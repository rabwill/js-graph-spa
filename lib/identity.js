(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.Identity = {})));
}(this, (function (exports) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    // Copyright (c) Microsoft Corporation.
    function log() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length > 0) {
            var firstArg = String(args[0]);
            if (firstArg.includes(":error")) {
                console.error.apply(console, __spread(args));
            }
            else if (firstArg.includes(":warning")) {
                console.warn.apply(console, __spread(args));
            }
            else if (firstArg.includes(":info")) {
                console.info.apply(console, __spread(args));
            }
            else if (firstArg.includes(":verbose")) {
                console.debug.apply(console, __spread(args));
            }
            else {
                console.debug.apply(console, __spread(args));
            }
        }
    }

    // Copyright (c) Microsoft Corporation.
    var debugEnvVariable = (typeof process !== "undefined" && process.env && process.env.DEBUG) || undefined;
    var enabledString;
    var enabledNamespaces = [];
    var skippedNamespaces = [];
    var debuggers = [];
    if (debugEnvVariable) {
        enable(debugEnvVariable);
    }
    var debugObj = Object.assign(function (namespace) {
        return createDebugger(namespace);
    }, {
        enable: enable,
        enabled: enabled,
        disable: disable,
        log: log
    });
    function enable(namespaces) {
        var e_1, _a, e_2, _b;
        enabledString = namespaces;
        enabledNamespaces = [];
        skippedNamespaces = [];
        var wildcard = /\*/g;
        var namespaceList = namespaces.split(",").map(function (ns) { return ns.trim().replace(wildcard, ".*?"); });
        try {
            for (var namespaceList_1 = __values(namespaceList), namespaceList_1_1 = namespaceList_1.next(); !namespaceList_1_1.done; namespaceList_1_1 = namespaceList_1.next()) {
                var ns = namespaceList_1_1.value;
                if (ns.startsWith("-")) {
                    skippedNamespaces.push(new RegExp("^" + ns.substr(1) + "$"));
                }
                else {
                    enabledNamespaces.push(new RegExp("^" + ns + "$"));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (namespaceList_1_1 && !namespaceList_1_1.done && (_a = namespaceList_1.return)) _a.call(namespaceList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var debuggers_1 = __values(debuggers), debuggers_1_1 = debuggers_1.next(); !debuggers_1_1.done; debuggers_1_1 = debuggers_1.next()) {
                var instance = debuggers_1_1.value;
                instance.enabled = enabled(instance.namespace);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (debuggers_1_1 && !debuggers_1_1.done && (_b = debuggers_1.return)) _b.call(debuggers_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    function enabled(namespace) {
        var e_3, _a, e_4, _b;
        if (namespace.endsWith("*")) {
            return true;
        }
        try {
            for (var skippedNamespaces_1 = __values(skippedNamespaces), skippedNamespaces_1_1 = skippedNamespaces_1.next(); !skippedNamespaces_1_1.done; skippedNamespaces_1_1 = skippedNamespaces_1.next()) {
                var skipped = skippedNamespaces_1_1.value;
                if (skipped.test(namespace)) {
                    return false;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (skippedNamespaces_1_1 && !skippedNamespaces_1_1.done && (_a = skippedNamespaces_1.return)) _a.call(skippedNamespaces_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var enabledNamespaces_1 = __values(enabledNamespaces), enabledNamespaces_1_1 = enabledNamespaces_1.next(); !enabledNamespaces_1_1.done; enabledNamespaces_1_1 = enabledNamespaces_1.next()) {
                var enabledNamespace = enabledNamespaces_1_1.value;
                if (enabledNamespace.test(namespace)) {
                    return true;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (enabledNamespaces_1_1 && !enabledNamespaces_1_1.done && (_b = enabledNamespaces_1.return)) _b.call(enabledNamespaces_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return false;
    }
    function disable() {
        var result = enabledString || "";
        enable("");
        return result;
    }
    function createDebugger(namespace) {
        var newDebugger = Object.assign(debug, {
            enabled: enabled(namespace),
            destroy: destroy,
            log: debugObj.log,
            namespace: namespace,
            extend: extend
        });
        function debug() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!newDebugger.enabled) {
                return;
            }
            if (args.length > 0) {
                args[0] = namespace + " " + args[0];
            }
            newDebugger.log.apply(newDebugger, __spread(args));
        }
        debuggers.push(newDebugger);
        return newDebugger;
    }
    function destroy() {
        var index = debuggers.indexOf(this);
        if (index >= 0) {
            debuggers.splice(index, 1);
            return true;
        }
        return false;
    }
    function extend(namespace) {
        var newDebugger = createDebugger(this.namespace + ":" + namespace);
        newDebugger.log = this.log;
        return newDebugger;
    }

    // Copyright (c) Microsoft Corporation.
    var registeredLoggers = new Set();
    var logLevelFromEnv = (typeof process !== "undefined" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;
    var azureLogLevel;
    /**
     * The AzureLogger provides a mechanism for overriding where logs are output to.
     * By default, logs are sent to stderr.
     * Override the `log` method to redirect logs to another location.
     */
    var AzureLogger = debugObj("azure");
    AzureLogger.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        debugObj.log.apply(debugObj, __spread(args));
    };
    var AZURE_LOG_LEVELS = ["verbose", "info", "warning", "error"];
    if (logLevelFromEnv) {
        // avoid calling setLogLevel because we don't want a mis-set environment variable to crash
        if (isAzureLogLevel(logLevelFromEnv)) {
            setLogLevel(logLevelFromEnv);
        }
        else {
            console.error("AZURE_LOG_LEVEL set to unknown log level '" + logLevelFromEnv + "'; logging is not enabled. Acceptable values: " + AZURE_LOG_LEVELS.join(", ") + ".");
        }
    }
    /**
     * Immediately enables logging at the specified log level.
     * @param level - The log level to enable for logging.
     * Options from most verbose to least verbose are:
     * - verbose
     * - info
     * - warning
     * - error
     */
    function setLogLevel(level) {
        var e_1, _a;
        if (level && !isAzureLogLevel(level)) {
            throw new Error("Unknown log level '" + level + "'. Acceptable values: " + AZURE_LOG_LEVELS.join(","));
        }
        azureLogLevel = level;
        var enabledNamespaces = [];
        try {
            for (var registeredLoggers_1 = __values(registeredLoggers), registeredLoggers_1_1 = registeredLoggers_1.next(); !registeredLoggers_1_1.done; registeredLoggers_1_1 = registeredLoggers_1.next()) {
                var logger = registeredLoggers_1_1.value;
                if (shouldEnable(logger)) {
                    enabledNamespaces.push(logger.namespace);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (registeredLoggers_1_1 && !registeredLoggers_1_1.done && (_a = registeredLoggers_1.return)) _a.call(registeredLoggers_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        debugObj.enable(enabledNamespaces.join(","));
    }
    var levelMap = {
        verbose: 400,
        info: 300,
        warning: 200,
        error: 100
    };
    /**
     * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.
     * @param namespace - The name of the SDK package.
     * @hidden
     */
    function createClientLogger(namespace) {
        var clientRootLogger = AzureLogger.extend(namespace);
        patchLogMethod(AzureLogger, clientRootLogger);
        return {
            error: createLogger(clientRootLogger, "error"),
            warning: createLogger(clientRootLogger, "warning"),
            info: createLogger(clientRootLogger, "info"),
            verbose: createLogger(clientRootLogger, "verbose")
        };
    }
    function patchLogMethod(parent, child) {
        child.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            parent.log.apply(parent, __spread(args));
        };
    }
    function createLogger(parent, level) {
        var logger = Object.assign(parent.extend(level), {
            level: level
        });
        patchLogMethod(parent, logger);
        if (shouldEnable(logger)) {
            var enabledNamespaces = debugObj.disable();
            debugObj.enable(enabledNamespaces + "," + logger.namespace);
        }
        registeredLoggers.add(logger);
        return logger;
    }
    function shouldEnable(logger) {
        if (azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]) {
            return true;
        }
        else {
            return false;
        }
    }
    function isAzureLogLevel(logLevel) {
        return AZURE_LOG_LEVELS.includes(logLevel);
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * The AzureLogger used for all clients within the identity package
     */
    const logger = createClientLogger("identity");
    /**
     * Formatting the success event on the credentials
     */
    function formatSuccess(scope) {
        return `SUCCESS. Scopes: ${Array.isArray(scope) ? scope.join(", ") : scope}.`;
    }
    /**
     * Formatting the success event on the credentials
     */
    function formatError(scope, error) {
        let message = "ERROR.";
        if (scope === null || scope === void 0 ? void 0 : scope.length) {
            message += ` Scopes: ${Array.isArray(scope) ? scope.join(", ") : scope}.`;
        }
        return `${message} Error message: ${typeof error === "string" ? error : error.message}.`;
    }
    /**
     * Generates a CredentialLoggerInstance.
     *
     * It logs with the format:
     *
     *   `[title] => [message]`
     *
     */
    function credentialLoggerInstance(title, parent, log = logger) {
        const fullTitle = parent ? `${parent.fullTitle} ${title}` : title;
        function info(message) {
            log.info(`${fullTitle} =>`, message);
        }
        return {
            title,
            fullTitle,
            info
        };
    }
    /**
     * Generates a CredentialLogger, which is a logger declared at the credential's constructor, and used at any point in the credential.
     * It has all the properties of a CredentialLoggerInstance, plus other logger instances, one per method.
     *
     * It logs with the format:
     *
     *   `[title] => [message]`
     *   `[title] => getToken() => [message]`
     *
     */
    function credentialLogger(title, log = logger) {
        const credLogger = credentialLoggerInstance(title, undefined, log);
        return Object.assign(Object.assign({}, credLogger), { getToken: credentialLoggerInstance("=> getToken()", credLogger, log) });
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    function isErrorResponse(errorResponse) {
        return (errorResponse &&
            typeof errorResponse.error === "string" &&
            typeof errorResponse.error_description === "string");
    }
    /**
     * This signifies that the credential that was tried in a chained credential
     * was not available to be used as the credential. Rather than treating this as
     * an error that should halt the chain, it's caught and the chain continues
     */
    class CredentialUnavailable extends Error {
    }
    /**
     * The Error.name value of an AuthenticationError
     */
    const AuthenticationErrorName = "AuthenticationError";
    /**
     * Provides details about a failure to authenticate with Azure Active
     * Directory.  The `errorResponse` field contains more details about
     * the specific failure.
     */
    class AuthenticationError extends Error {
        // eslint-disable-next-line @typescript-eslint/ban-types
        constructor(statusCode, errorBody) {
            let errorResponse = {
                error: "unknown",
                errorDescription: "An unknown error occurred and no additional details are available."
            };
            if (isErrorResponse(errorBody)) {
                errorResponse = convertOAuthErrorResponseToErrorResponse(errorBody);
            }
            else if (typeof errorBody === "string") {
                try {
                    // Most error responses will contain JSON-formatted error details
                    // in the response body
                    const oauthErrorResponse = JSON.parse(errorBody);
                    errorResponse = convertOAuthErrorResponseToErrorResponse(oauthErrorResponse);
                }
                catch (e) {
                    if (statusCode === 400) {
                        errorResponse = {
                            error: "authority_not_found",
                            errorDescription: "The specified authority URL was not found."
                        };
                    }
                    else {
                        errorResponse = {
                            error: "unknown_error",
                            errorDescription: `An unknown error has occurred. Response body:\n\n${errorBody}`
                        };
                    }
                }
            }
            else {
                errorResponse = {
                    error: "unknown_error",
                    errorDescription: "An unknown error occurred and no additional details are available."
                };
            }
            super(`${errorResponse.error}(status code ${statusCode}).\nMore details:\n${errorResponse.errorDescription}`);
            this.statusCode = statusCode;
            this.errorResponse = errorResponse;
            // Ensure that this type reports the correct name
            this.name = AuthenticationErrorName;
        }
    }
    /**
     * The Error.name value of an AggregateAuthenticationError
     */
    const AggregateAuthenticationErrorName = "AggregateAuthenticationError";
    /**
     * Provides an `errors` array containing {@link AuthenticationError} instance
     * for authentication failures from credentials in a {@link ChainedTokenCredential}.
     */
    class AggregateAuthenticationError extends Error {
        constructor(errors, errorMessage) {
            const errorDetail = errors.join("\n");
            super(`${errorMessage}\n\n${errorDetail}`);
            this.errors = errors;
            // Ensure that this type reports the correct name
            this.name = AggregateAuthenticationErrorName;
        }
    }
    function convertOAuthErrorResponseToErrorResponse(errorBody) {
        return {
            error: errorBody.error,
            errorDescription: errorBody.error_description,
            correlationId: errorBody.correlation_id,
            errorCodes: errorBody.error_codes,
            timestamp: errorBody.timestamp,
            traceId: errorBody.trace_id
        };
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var Logger = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(Logger);

    var Time = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(Time);

    var getter = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultGetter = void 0;
    /**
     * Default getter which just does a simple property access. Returns
     * undefined if the key is not set.
     *
     * @param carrier
     * @param key
     */
    function defaultGetter(carrier, key) {
        return carrier[key];
    }
    exports.defaultGetter = defaultGetter;

    });

    unwrapExports(getter);
    var getter_1 = getter.defaultGetter;

    var HttpTextPropagator = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(HttpTextPropagator);

    var NoopHttpTextPropagator_1 = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NOOP_HTTP_TEXT_PROPAGATOR = exports.NoopHttpTextPropagator = void 0;
    /**
     * No-op implementations of {@link HttpTextPropagator}.
     */
    var NoopHttpTextPropagator = /** @class */ (function () {
        function NoopHttpTextPropagator() {
        }
        /** Noop inject function does nothing */
        NoopHttpTextPropagator.prototype.inject = function (context, carrier, setter) { };
        /** Noop extract function does nothing and returns the input context */
        NoopHttpTextPropagator.prototype.extract = function (context, carrier, getter) {
            return context;
        };
        return NoopHttpTextPropagator;
    }());
    exports.NoopHttpTextPropagator = NoopHttpTextPropagator;
    exports.NOOP_HTTP_TEXT_PROPAGATOR = new NoopHttpTextPropagator();

    });

    unwrapExports(NoopHttpTextPropagator_1);
    var NoopHttpTextPropagator_2 = NoopHttpTextPropagator_1.NOOP_HTTP_TEXT_PROPAGATOR;
    var NoopHttpTextPropagator_3 = NoopHttpTextPropagator_1.NoopHttpTextPropagator;

    var setter = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultSetter = void 0;
    /**
     * Default setter which sets value via direct property access
     *
     * @param carrier
     * @param key
     */
    function defaultSetter(carrier, key, value) {
        carrier[key] = value;
    }
    exports.defaultSetter = defaultSetter;

    });

    unwrapExports(setter);
    var setter_1 = setter.defaultSetter;

    var CorrelationContext = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(CorrelationContext);

    var EntryValue = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryTtl = void 0;
    /**
     * EntryTtl is an integer that represents number of hops an entry can propagate.
     *
     * For now, ONLY special values (0 and -1) are supported.
     */
    var EntryTtl;
    (function (EntryTtl) {
        /**
         * NO_PROPAGATION is considered to have local context and is used within the
         * process it created.
         */
        EntryTtl[EntryTtl["NO_PROPAGATION"] = 0] = "NO_PROPAGATION";
        /** UNLIMITED_PROPAGATION can propagate unlimited hops. */
        EntryTtl[EntryTtl["UNLIMITED_PROPAGATION"] = -1] = "UNLIMITED_PROPAGATION";
    })(EntryTtl = exports.EntryTtl || (exports.EntryTtl = {}));

    });

    unwrapExports(EntryValue);
    var EntryValue_1 = EntryValue.EntryTtl;

    var BatchObserverResult = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(BatchObserverResult);

    var BoundInstrument = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(BoundInstrument);

    var Meter = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(Meter);

    var MeterProvider = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(MeterProvider);

    var Metric = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValueType = void 0;
    /** The Type of value. It describes how the data is reported. */
    var ValueType;
    (function (ValueType) {
        ValueType[ValueType["INT"] = 0] = "INT";
        ValueType[ValueType["DOUBLE"] = 1] = "DOUBLE";
    })(ValueType = exports.ValueType || (exports.ValueType = {}));

    });

    unwrapExports(Metric);
    var Metric_1 = Metric.ValueType;

    var NoopMeter_1 = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NOOP_BATCH_OBSERVER_METRIC = exports.NOOP_SUM_OBSERVER_METRIC = exports.NOOP_UP_DOWN_SUM_OBSERVER_METRIC = exports.NOOP_VALUE_OBSERVER_METRIC = exports.NOOP_BOUND_BASE_OBSERVER = exports.NOOP_VALUE_RECORDER_METRIC = exports.NOOP_BOUND_VALUE_RECORDER = exports.NOOP_COUNTER_METRIC = exports.NOOP_BOUND_COUNTER = exports.NOOP_METER = exports.NoopBoundBaseObserver = exports.NoopBoundValueRecorder = exports.NoopBoundCounter = exports.NoopBatchObserverMetric = exports.NoopBaseObserverMetric = exports.NoopValueRecorderMetric = exports.NoopCounterMetric = exports.NoopMetric = exports.NoopMeter = void 0;
    /**
     * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses
     * constant NoopMetrics for all of its methods.
     */
    var NoopMeter = /** @class */ (function () {
        function NoopMeter() {
        }
        /**
         * Returns constant noop value recorder.
         * @param name the name of the metric.
         * @param [options] the metric options.
         */
        NoopMeter.prototype.createValueRecorder = function (name, options) {
            return exports.NOOP_VALUE_RECORDER_METRIC;
        };
        /**
         * Returns a constant noop counter.
         * @param name the name of the metric.
         * @param [options] the metric options.
         */
        NoopMeter.prototype.createCounter = function (name, options) {
            return exports.NOOP_COUNTER_METRIC;
        };
        /**
         * Returns a constant noop UpDownCounter.
         * @param name the name of the metric.
         * @param [options] the metric options.
         */
        NoopMeter.prototype.createUpDownCounter = function (name, options) {
            return exports.NOOP_COUNTER_METRIC;
        };
        /**
         * Returns constant noop value observer.
         * @param name the name of the metric.
         * @param [options] the metric options.
         * @param [callback] the value observer callback
         */
        NoopMeter.prototype.createValueObserver = function (name, options, callback) {
            return exports.NOOP_VALUE_OBSERVER_METRIC;
        };
        /**
         * Returns constant noop batch observer.
         * @param name the name of the metric.
         * @param callback the batch observer callback
         */
        NoopMeter.prototype.createBatchObserver = function (name, callback) {
            return exports.NOOP_BATCH_OBSERVER_METRIC;
        };
        return NoopMeter;
    }());
    exports.NoopMeter = NoopMeter;
    var NoopMetric = /** @class */ (function () {
        function NoopMetric(instrument) {
            this._instrument = instrument;
        }
        /**
         * Returns a Bound Instrument associated with specified Labels.
         * It is recommended to keep a reference to the Bound Instrument instead of
         * always calling this method for every operations.
         * @param labels key-values pairs that are associated with a specific metric
         *     that you want to record.
         */
        NoopMetric.prototype.bind = function (labels) {
            return this._instrument;
        };
        /**
         * Removes the Binding from the metric, if it is present.
         * @param labels key-values pairs that are associated with a specific metric.
         */
        NoopMetric.prototype.unbind = function (labels) {
            return;
        };
        /**
         * Clears all timeseries from the Metric.
         */
        NoopMetric.prototype.clear = function () {
            return;
        };
        return NoopMetric;
    }());
    exports.NoopMetric = NoopMetric;
    var NoopCounterMetric = /** @class */ (function (_super) {
        __extends(NoopCounterMetric, _super);
        function NoopCounterMetric() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NoopCounterMetric.prototype.add = function (value, labels) {
            this.bind(labels).add(value);
        };
        return NoopCounterMetric;
    }(NoopMetric));
    exports.NoopCounterMetric = NoopCounterMetric;
    var NoopValueRecorderMetric = /** @class */ (function (_super) {
        __extends(NoopValueRecorderMetric, _super);
        function NoopValueRecorderMetric() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NoopValueRecorderMetric.prototype.record = function (value, labels, correlationContext, spanContext) {
            if (typeof correlationContext === 'undefined') {
                this.bind(labels).record(value);
            }
            else if (typeof spanContext === 'undefined') {
                this.bind(labels).record(value, correlationContext);
            }
            else {
                this.bind(labels).record(value, correlationContext, spanContext);
            }
        };
        return NoopValueRecorderMetric;
    }(NoopMetric));
    exports.NoopValueRecorderMetric = NoopValueRecorderMetric;
    var NoopBaseObserverMetric = /** @class */ (function (_super) {
        __extends(NoopBaseObserverMetric, _super);
        function NoopBaseObserverMetric() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NoopBaseObserverMetric.prototype.observation = function () {
            return {
                observer: this,
                value: 0,
            };
        };
        return NoopBaseObserverMetric;
    }(NoopMetric));
    exports.NoopBaseObserverMetric = NoopBaseObserverMetric;
    var NoopBatchObserverMetric = /** @class */ (function (_super) {
        __extends(NoopBatchObserverMetric, _super);
        function NoopBatchObserverMetric() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NoopBatchObserverMetric;
    }(NoopMetric));
    exports.NoopBatchObserverMetric = NoopBatchObserverMetric;
    var NoopBoundCounter = /** @class */ (function () {
        function NoopBoundCounter() {
        }
        NoopBoundCounter.prototype.add = function (value) {
            return;
        };
        return NoopBoundCounter;
    }());
    exports.NoopBoundCounter = NoopBoundCounter;
    var NoopBoundValueRecorder = /** @class */ (function () {
        function NoopBoundValueRecorder() {
        }
        NoopBoundValueRecorder.prototype.record = function (value, correlationContext, spanContext) {
            return;
        };
        return NoopBoundValueRecorder;
    }());
    exports.NoopBoundValueRecorder = NoopBoundValueRecorder;
    var NoopBoundBaseObserver = /** @class */ (function () {
        function NoopBoundBaseObserver() {
        }
        NoopBoundBaseObserver.prototype.update = function (value) { };
        return NoopBoundBaseObserver;
    }());
    exports.NoopBoundBaseObserver = NoopBoundBaseObserver;
    exports.NOOP_METER = new NoopMeter();
    exports.NOOP_BOUND_COUNTER = new NoopBoundCounter();
    exports.NOOP_COUNTER_METRIC = new NoopCounterMetric(exports.NOOP_BOUND_COUNTER);
    exports.NOOP_BOUND_VALUE_RECORDER = new NoopBoundValueRecorder();
    exports.NOOP_VALUE_RECORDER_METRIC = new NoopValueRecorderMetric(exports.NOOP_BOUND_VALUE_RECORDER);
    exports.NOOP_BOUND_BASE_OBSERVER = new NoopBoundBaseObserver();
    exports.NOOP_VALUE_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);
    exports.NOOP_UP_DOWN_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);
    exports.NOOP_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);
    exports.NOOP_BATCH_OBSERVER_METRIC = new NoopBatchObserverMetric();

    });

    unwrapExports(NoopMeter_1);
    var NoopMeter_2 = NoopMeter_1.NOOP_BATCH_OBSERVER_METRIC;
    var NoopMeter_3 = NoopMeter_1.NOOP_SUM_OBSERVER_METRIC;
    var NoopMeter_4 = NoopMeter_1.NOOP_UP_DOWN_SUM_OBSERVER_METRIC;
    var NoopMeter_5 = NoopMeter_1.NOOP_VALUE_OBSERVER_METRIC;
    var NoopMeter_6 = NoopMeter_1.NOOP_BOUND_BASE_OBSERVER;
    var NoopMeter_7 = NoopMeter_1.NOOP_VALUE_RECORDER_METRIC;
    var NoopMeter_8 = NoopMeter_1.NOOP_BOUND_VALUE_RECORDER;
    var NoopMeter_9 = NoopMeter_1.NOOP_COUNTER_METRIC;
    var NoopMeter_10 = NoopMeter_1.NOOP_BOUND_COUNTER;
    var NoopMeter_11 = NoopMeter_1.NOOP_METER;
    var NoopMeter_12 = NoopMeter_1.NoopBoundBaseObserver;
    var NoopMeter_13 = NoopMeter_1.NoopBoundValueRecorder;
    var NoopMeter_14 = NoopMeter_1.NoopBoundCounter;
    var NoopMeter_15 = NoopMeter_1.NoopBatchObserverMetric;
    var NoopMeter_16 = NoopMeter_1.NoopBaseObserverMetric;
    var NoopMeter_17 = NoopMeter_1.NoopValueRecorderMetric;
    var NoopMeter_18 = NoopMeter_1.NoopCounterMetric;
    var NoopMeter_19 = NoopMeter_1.NoopMetric;
    var NoopMeter_20 = NoopMeter_1.NoopMeter;

    var NoopMeterProvider_1 = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NOOP_METER_PROVIDER = exports.NoopMeterProvider = void 0;

    /**
     * An implementation of the {@link MeterProvider} which returns an impotent Meter
     * for all calls to `getMeter`
     */
    var NoopMeterProvider = /** @class */ (function () {
        function NoopMeterProvider() {
        }
        NoopMeterProvider.prototype.getMeter = function (_name, _version) {
            return NoopMeter_1.NOOP_METER;
        };
        return NoopMeterProvider;
    }());
    exports.NoopMeterProvider = NoopMeterProvider;
    exports.NOOP_METER_PROVIDER = new NoopMeterProvider();

    });

    unwrapExports(NoopMeterProvider_1);
    var NoopMeterProvider_2 = NoopMeterProvider_1.NOOP_METER_PROVIDER;
    var NoopMeterProvider_3 = NoopMeterProvider_1.NoopMeterProvider;

    var Observation = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(Observation);

    var ObserverResult = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(ObserverResult);

    var attributes = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(attributes);

    var Event = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(Event);

    var Plugin = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(Plugin);

    var link_context = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(link_context);

    var link = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(link);

    var trace_flags = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TraceFlags = void 0;
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TraceFlags;
    (function (TraceFlags) {
        /** Represents no flag set. */
        TraceFlags[TraceFlags["NONE"] = 0] = "NONE";
        /** Bit to represent whether trace is sampled in trace flags. */
        TraceFlags[TraceFlags["SAMPLED"] = 1] = "SAMPLED";
    })(TraceFlags = exports.TraceFlags || (exports.TraceFlags = {}));

    });

    unwrapExports(trace_flags);
    var trace_flags_1 = trace_flags.TraceFlags;

    var NoopSpan_1 = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NOOP_SPAN = exports.NoopSpan = exports.INVALID_SPAN_ID = exports.INVALID_TRACE_ID = void 0;

    exports.INVALID_TRACE_ID = '0';
    exports.INVALID_SPAN_ID = '0';
    var INVALID_SPAN_CONTEXT = {
        traceId: exports.INVALID_TRACE_ID,
        spanId: exports.INVALID_SPAN_ID,
        traceFlags: trace_flags.TraceFlags.NONE,
    };
    /**
     * The NoopSpan is the default {@link Span} that is used when no Span
     * implementation is available. All operations are no-op including context
     * propagation.
     */
    var NoopSpan = /** @class */ (function () {
        function NoopSpan(_spanContext) {
            if (_spanContext === void 0) { _spanContext = INVALID_SPAN_CONTEXT; }
            this._spanContext = _spanContext;
        }
        // Returns a SpanContext.
        NoopSpan.prototype.context = function () {
            return this._spanContext;
        };
        // By default does nothing
        NoopSpan.prototype.setAttribute = function (key, value) {
            return this;
        };
        // By default does nothing
        NoopSpan.prototype.setAttributes = function (attributes) {
            return this;
        };
        // By default does nothing
        NoopSpan.prototype.addEvent = function (name, attributes) {
            return this;
        };
        // By default does nothing
        NoopSpan.prototype.setStatus = function (status) {
            return this;
        };
        // By default does nothing
        NoopSpan.prototype.updateName = function (name) {
            return this;
        };
        // By default does nothing
        NoopSpan.prototype.end = function (endTime) { };
        // isRecording always returns false for noopSpan.
        NoopSpan.prototype.isRecording = function () {
            return false;
        };
        return NoopSpan;
    }());
    exports.NoopSpan = NoopSpan;
    exports.NOOP_SPAN = new NoopSpan();

    });

    unwrapExports(NoopSpan_1);
    var NoopSpan_2 = NoopSpan_1.NOOP_SPAN;
    var NoopSpan_3 = NoopSpan_1.NoopSpan;
    var NoopSpan_4 = NoopSpan_1.INVALID_SPAN_ID;
    var NoopSpan_5 = NoopSpan_1.INVALID_TRACE_ID;

    var NoopTracer_1 = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NOOP_TRACER = exports.NoopTracer = void 0;

    /**
     * No-op implementations of {@link Tracer}.
     */
    var NoopTracer = /** @class */ (function () {
        function NoopTracer() {
        }
        NoopTracer.prototype.getCurrentSpan = function () {
            return NoopSpan_1.NOOP_SPAN;
        };
        // startSpan starts a noop span.
        NoopTracer.prototype.startSpan = function (name, options) {
            return NoopSpan_1.NOOP_SPAN;
        };
        NoopTracer.prototype.withSpan = function (span, fn) {
            return fn();
        };
        NoopTracer.prototype.bind = function (target, span) {
            return target;
        };
        return NoopTracer;
    }());
    exports.NoopTracer = NoopTracer;
    exports.NOOP_TRACER = new NoopTracer();

    });

    unwrapExports(NoopTracer_1);
    var NoopTracer_2 = NoopTracer_1.NOOP_TRACER;
    var NoopTracer_3 = NoopTracer_1.NoopTracer;

    var NoopTracerProvider_1 = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NOOP_TRACER_PROVIDER = exports.NoopTracerProvider = void 0;

    /**
     * An implementation of the {@link TracerProvider} which returns an impotent
     * Tracer for all calls to `getTracer`.
     *
     * All operations are no-op.
     */
    var NoopTracerProvider = /** @class */ (function () {
        function NoopTracerProvider() {
        }
        NoopTracerProvider.prototype.getTracer = function (_name, _version) {
            return NoopTracer_1.NOOP_TRACER;
        };
        return NoopTracerProvider;
    }());
    exports.NoopTracerProvider = NoopTracerProvider;
    exports.NOOP_TRACER_PROVIDER = new NoopTracerProvider();

    });

    unwrapExports(NoopTracerProvider_1);
    var NoopTracerProvider_2 = NoopTracerProvider_1.NOOP_TRACER_PROVIDER;
    var NoopTracerProvider_3 = NoopTracerProvider_1.NoopTracerProvider;

    var Sampler = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(Sampler);

    var SamplingResult = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SamplingDecision = void 0;
    /**
     * A sampling decision that determines how a {@link Span} will be recorded
     * and collected.
     */
    var SamplingDecision;
    (function (SamplingDecision) {
        /**
         * `Span.isRecording() === false`, span will not be recorded and all events
         * and attributes will be dropped.
         */
        SamplingDecision[SamplingDecision["NOT_RECORD"] = 0] = "NOT_RECORD";
        /**
         * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}
         * MUST NOT be set.
         */
        SamplingDecision[SamplingDecision["RECORD"] = 1] = "RECORD";
        /**
         * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}
         * MUST be set.
         */
        SamplingDecision[SamplingDecision["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
    })(SamplingDecision = exports.SamplingDecision || (exports.SamplingDecision = {}));

    });

    unwrapExports(SamplingResult);
    var SamplingResult_1 = SamplingResult.SamplingDecision;

    var span_context = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(span_context);

    var span_kind = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SpanKind = void 0;
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SpanKind;
    (function (SpanKind) {
        /** Default value. Indicates that the span is used internally. */
        SpanKind[SpanKind["INTERNAL"] = 0] = "INTERNAL";
        /**
         * Indicates that the span covers server-side handling of an RPC or other
         * remote request.
         */
        SpanKind[SpanKind["SERVER"] = 1] = "SERVER";
        /**
         * Indicates that the span covers the client-side wrapper around an RPC or
         * other remote request.
         */
        SpanKind[SpanKind["CLIENT"] = 2] = "CLIENT";
        /**
         * Indicates that the span describes producer sending a message to a
         * broker. Unlike client and server, there is no direct critical path latency
         * relationship between producer and consumer spans.
         */
        SpanKind[SpanKind["PRODUCER"] = 3] = "PRODUCER";
        /**
         * Indicates that the span describes consumer receiving a message from a
         * broker. Unlike client and server, there is no direct critical path latency
         * relationship between producer and consumer spans.
         */
        SpanKind[SpanKind["CONSUMER"] = 4] = "CONSUMER";
    })(SpanKind = exports.SpanKind || (exports.SpanKind = {}));

    });

    unwrapExports(span_kind);
    var span_kind_1 = span_kind.SpanKind;

    var span = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(span);

    var SpanOptions = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(SpanOptions);

    var status = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CanonicalCode = void 0;
    /**
     * An enumeration of canonical status codes.
     */
    var CanonicalCode;
    (function (CanonicalCode) {
        /**
         * Not an error; returned on success
         */
        CanonicalCode[CanonicalCode["OK"] = 0] = "OK";
        /**
         * The operation was cancelled (typically by the caller).
         */
        CanonicalCode[CanonicalCode["CANCELLED"] = 1] = "CANCELLED";
        /**
         * Unknown error.  An example of where this error may be returned is
         * if a status value received from another address space belongs to
         * an error-space that is not known in this address space.  Also
         * errors raised by APIs that do not return enough error information
         * may be converted to this error.
         */
        CanonicalCode[CanonicalCode["UNKNOWN"] = 2] = "UNKNOWN";
        /**
         * Client specified an invalid argument.  Note that this differs
         * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments
         * that are problematic regardless of the state of the system
         * (e.g., a malformed file name).
         */
        CanonicalCode[CanonicalCode["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
        /**
         * Deadline expired before operation could complete.  For operations
         * that change the state of the system, this error may be returned
         * even if the operation has completed successfully.  For example, a
         * successful response from a server could have been delayed long
         * enough for the deadline to expire.
         */
        CanonicalCode[CanonicalCode["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
        /**
         * Some requested entity (e.g., file or directory) was not found.
         */
        CanonicalCode[CanonicalCode["NOT_FOUND"] = 5] = "NOT_FOUND";
        /**
         * Some entity that we attempted to create (e.g., file or directory)
         * already exists.
         */
        CanonicalCode[CanonicalCode["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
        /**
         * The caller does not have permission to execute the specified
         * operation.  PERMISSION_DENIED must not be used for rejections
         * caused by exhausting some resource (use RESOURCE_EXHAUSTED
         * instead for those errors).  PERMISSION_DENIED must not be
         * used if the caller can not be identified (use UNAUTHENTICATED
         * instead for those errors).
         */
        CanonicalCode[CanonicalCode["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
        /**
         * Some resource has been exhausted, perhaps a per-user quota, or
         * perhaps the entire file system is out of space.
         */
        CanonicalCode[CanonicalCode["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
        /**
         * Operation was rejected because the system is not in a state
         * required for the operation's execution.  For example, directory
         * to be deleted may be non-empty, an rmdir operation is applied to
         * a non-directory, etc.
         *
         * A litmus test that may help a service implementor in deciding
         * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
         *
         *  - Use UNAVAILABLE if the client can retry just the failing call.
         *  - Use ABORTED if the client should retry at a higher-level
         *    (e.g., restarting a read-modify-write sequence).
         *  - Use FAILED_PRECONDITION if the client should not retry until
         *    the system state has been explicitly fixed.  E.g., if an "rmdir"
         *    fails because the directory is non-empty, FAILED_PRECONDITION
         *    should be returned since the client should not retry unless
         *    they have first fixed up the directory by deleting files from it.
         *  - Use FAILED_PRECONDITION if the client performs conditional
         *    REST Get/Update/Delete on a resource and the resource on the
         *    server does not match the condition. E.g., conflicting
         *    read-modify-write on the same resource.
         */
        CanonicalCode[CanonicalCode["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
        /**
         * The operation was aborted, typically due to a concurrency issue
         * like sequencer check failures, transaction aborts, etc.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION,
         * ABORTED, and UNAVAILABLE.
         */
        CanonicalCode[CanonicalCode["ABORTED"] = 10] = "ABORTED";
        /**
         * Operation was attempted past the valid range.  E.g., seeking or
         * reading past end of file.
         *
         * Unlike INVALID_ARGUMENT, this error indicates a problem that may
         * be fixed if the system state changes. For example, a 32-bit file
         * system will generate INVALID_ARGUMENT if asked to read at an
         * offset that is not in the range [0,2^32-1], but it will generate
         * OUT_OF_RANGE if asked to read from an offset past the current
         * file size.
         *
         * There is a fair bit of overlap between FAILED_PRECONDITION and
         * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific
         * error) when it applies so that callers who are iterating through
         * a space can easily look for an OUT_OF_RANGE error to detect when
         * they are done.
         */
        CanonicalCode[CanonicalCode["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
        /**
         * Operation is not implemented or not supported/enabled in this service.
         */
        CanonicalCode[CanonicalCode["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
        /**
         * Internal errors.  Means some invariants expected by underlying
         * system has been broken.  If you see one of these errors,
         * something is very broken.
         */
        CanonicalCode[CanonicalCode["INTERNAL"] = 13] = "INTERNAL";
        /**
         * The service is currently unavailable.  This is a most likely a
         * transient condition and may be corrected by retrying with
         * a backoff.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION,
         * ABORTED, and UNAVAILABLE.
         */
        CanonicalCode[CanonicalCode["UNAVAILABLE"] = 14] = "UNAVAILABLE";
        /**
         * Unrecoverable data loss or corruption.
         */
        CanonicalCode[CanonicalCode["DATA_LOSS"] = 15] = "DATA_LOSS";
        /**
         * The request does not have valid authentication credentials for the
         * operation.
         */
        CanonicalCode[CanonicalCode["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
    })(CanonicalCode = exports.CanonicalCode || (exports.CanonicalCode = {}));

    });

    unwrapExports(status);
    var status_1 = status.CanonicalCode;

    var TimedEvent = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(TimedEvent);

    var trace_state = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(trace_state);

    var tracer_provider = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(tracer_provider);

    var tracer = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(tracer);

    var types = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });

    });

    unwrapExports(types);

    var context = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Context = void 0;
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Context = /** @class */ (function () {
        /**
         * Construct a new context which inherits values from an optional parent context.
         *
         * @param parentContext a context from which to inherit values
         */
        function Context(parentContext) {
            this._currentContext = parentContext ? new Map(parentContext) : new Map();
        }
        /** Get a key to uniquely identify a context value */
        Context.createKey = function (description) {
            return Symbol(description);
        };
        /**
         * Get a value from the context.
         *
         * @param key key which identifies a context value
         */
        Context.prototype.getValue = function (key) {
            return this._currentContext.get(key);
        };
        /**
         * Create a new context which inherits from this context and has
         * the given key set to the given value.
         *
         * @param key context key for which to set the value
         * @param value value to set for the given key
         */
        Context.prototype.setValue = function (key, value) {
            var context = new Context(this._currentContext);
            context._currentContext.set(key, value);
            return context;
        };
        /**
         * Return a new context which inherits from this context but does
         * not contain a value for the given key.
         *
         * @param key context key for which to clear a value
         */
        Context.prototype.deleteValue = function (key) {
            var context = new Context(this._currentContext);
            context._currentContext.delete(key);
            return context;
        };
        /** The root context is used as the default parent context when there is no active context */
        Context.ROOT_CONTEXT = new Context();
        /**
         * This is another identifier to the root context which allows developers to easily search the
         * codebase for direct uses of context which need to be removed in later PRs.
         *
         * It's existence is temporary and it should be removed when all references are fixed.
         */
        Context.TODO = Context.ROOT_CONTEXT;
        return Context;
    }());
    exports.Context = Context;

    });

    unwrapExports(context);
    var context_1 = context.Context;

    var NoopContextManager_1 = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NoopContextManager = void 0;

    var NoopContextManager = /** @class */ (function () {
        function NoopContextManager() {
        }
        NoopContextManager.prototype.active = function () {
            return context.Context.ROOT_CONTEXT;
        };
        NoopContextManager.prototype.with = function (context, fn) {
            return fn();
        };
        NoopContextManager.prototype.bind = function (target, context) {
            return target;
        };
        NoopContextManager.prototype.enable = function () {
            return this;
        };
        NoopContextManager.prototype.disable = function () {
            return this;
        };
        return NoopContextManager;
    }());
    exports.NoopContextManager = NoopContextManager;

    });

    unwrapExports(NoopContextManager_1);
    var NoopContextManager_2 = NoopContextManager_1.NoopContextManager;

    var src = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types, exports);
    __exportStar(context, exports);
    __exportStar(NoopContextManager_1, exports);

    });

    unwrapExports(src);

    var globalThis_1 = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._globalThis = void 0;
    /** only globals that common to node and browsers are allowed */
    // eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
    exports._globalThis = typeof globalThis === 'object' ? globalThis : window;

    });

    unwrapExports(globalThis_1);
    var globalThis_2 = globalThis_1._globalThis;

    var browser = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(globalThis_1, exports);

    });

    unwrapExports(browser);

    var globalUtils = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.API_BACKWARDS_COMPATIBILITY_VERSION = exports.makeGetter = exports._global = exports.GLOBAL_TRACE_API_KEY = exports.GLOBAL_PROPAGATION_API_KEY = exports.GLOBAL_METRICS_API_KEY = exports.GLOBAL_CONTEXT_MANAGER_API_KEY = void 0;

    exports.GLOBAL_CONTEXT_MANAGER_API_KEY = Symbol.for('io.opentelemetry.js.api.context');
    exports.GLOBAL_METRICS_API_KEY = Symbol.for('io.opentelemetry.js.api.metrics');
    exports.GLOBAL_PROPAGATION_API_KEY = Symbol.for('io.opentelemetry.js.api.propagation');
    exports.GLOBAL_TRACE_API_KEY = Symbol.for('io.opentelemetry.js.api.trace');
    exports._global = browser._globalThis;
    /**
     * Make a function which accepts a version integer and returns the instance of an API if the version
     * is compatible, or a fallback version (usually NOOP) if it is not.
     *
     * @param requiredVersion Backwards compatibility version which is required to return the instance
     * @param instance Instance which should be returned if the required version is compatible
     * @param fallback Fallback instance, usually NOOP, which will be returned if the required version is not compatible
     */
    function makeGetter(requiredVersion, instance, fallback) {
        return function (version) {
            return version === requiredVersion ? instance : fallback;
        };
    }
    exports.makeGetter = makeGetter;
    /**
     * A number which should be incremented each time a backwards incompatible
     * change is made to the API. This number is used when an API package
     * attempts to access the global API to ensure it is getting a compatible
     * version. If the global API is not compatible with the API package
     * attempting to get it, a NOOP API implementation will be returned.
     */
    exports.API_BACKWARDS_COMPATIBILITY_VERSION = 0;

    });

    unwrapExports(globalUtils);
    var globalUtils_1 = globalUtils.API_BACKWARDS_COMPATIBILITY_VERSION;
    var globalUtils_2 = globalUtils.makeGetter;
    var globalUtils_3 = globalUtils._global;
    var globalUtils_4 = globalUtils.GLOBAL_TRACE_API_KEY;
    var globalUtils_5 = globalUtils.GLOBAL_PROPAGATION_API_KEY;
    var globalUtils_6 = globalUtils.GLOBAL_METRICS_API_KEY;
    var globalUtils_7 = globalUtils.GLOBAL_CONTEXT_MANAGER_API_KEY;

    var context$1 = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContextAPI = void 0;


    var NOOP_CONTEXT_MANAGER = new src.NoopContextManager();
    /**
     * Singleton object which represents the entry point to the OpenTelemetry Context API
     */
    var ContextAPI = /** @class */ (function () {
        /** Empty private constructor prevents end users from constructing a new instance of the API */
        function ContextAPI() {
        }
        /** Get the singleton instance of the Context API */
        ContextAPI.getInstance = function () {
            if (!this._instance) {
                this._instance = new ContextAPI();
            }
            return this._instance;
        };
        /**
         * Set the current context manager. Returns the initialized context manager
         */
        ContextAPI.prototype.setGlobalContextManager = function (contextManager) {
            if (globalUtils._global[globalUtils.GLOBAL_CONTEXT_MANAGER_API_KEY]) {
                // global context manager has already been set
                return this._getContextManager();
            }
            globalUtils._global[globalUtils.GLOBAL_CONTEXT_MANAGER_API_KEY] = globalUtils.makeGetter(globalUtils.API_BACKWARDS_COMPATIBILITY_VERSION, contextManager, NOOP_CONTEXT_MANAGER);
            return contextManager;
        };
        /**
         * Get the currently active context
         */
        ContextAPI.prototype.active = function () {
            return this._getContextManager().active();
        };
        /**
         * Execute a function with an active context
         *
         * @param context context to be active during function execution
         * @param fn function to execute in a context
         */
        ContextAPI.prototype.with = function (context, fn) {
            return this._getContextManager().with(context, fn);
        };
        /**
         * Bind a context to a target function or event emitter
         *
         * @param target function or event emitter to bind
         * @param context context to bind to the event emitter or function. Defaults to the currently active context
         */
        ContextAPI.prototype.bind = function (target, context) {
            if (context === void 0) { context = this.active(); }
            return this._getContextManager().bind(target, context);
        };
        ContextAPI.prototype._getContextManager = function () {
            var _a, _b;
            return ((_b = (_a = globalUtils._global[globalUtils.GLOBAL_CONTEXT_MANAGER_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(globalUtils._global, globalUtils.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NOOP_CONTEXT_MANAGER);
        };
        /** Disable and remove the global context manager */
        ContextAPI.prototype.disable = function () {
            this._getContextManager().disable();
            delete globalUtils._global[globalUtils.GLOBAL_CONTEXT_MANAGER_API_KEY];
        };
        return ContextAPI;
    }());
    exports.ContextAPI = ContextAPI;

    });

    unwrapExports(context$1);
    var context_1$1 = context$1.ContextAPI;

    var trace = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TraceAPI = void 0;


    /**
     * Singleton object which represents the entry point to the OpenTelemetry Tracing API
     */
    var TraceAPI = /** @class */ (function () {
        /** Empty private constructor prevents end users from constructing a new instance of the API */
        function TraceAPI() {
        }
        /** Get the singleton instance of the Trace API */
        TraceAPI.getInstance = function () {
            if (!this._instance) {
                this._instance = new TraceAPI();
            }
            return this._instance;
        };
        /**
         * Set the current global tracer. Returns the initialized global tracer provider
         */
        TraceAPI.prototype.setGlobalTracerProvider = function (provider) {
            if (globalUtils._global[globalUtils.GLOBAL_TRACE_API_KEY]) {
                // global tracer provider has already been set
                return this.getTracerProvider();
            }
            globalUtils._global[globalUtils.GLOBAL_TRACE_API_KEY] = globalUtils.makeGetter(globalUtils.API_BACKWARDS_COMPATIBILITY_VERSION, provider, NoopTracerProvider_1.NOOP_TRACER_PROVIDER);
            return this.getTracerProvider();
        };
        /**
         * Returns the global tracer provider.
         */
        TraceAPI.prototype.getTracerProvider = function () {
            var _a, _b;
            return ((_b = (_a = globalUtils._global[globalUtils.GLOBAL_TRACE_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(globalUtils._global, globalUtils.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopTracerProvider_1.NOOP_TRACER_PROVIDER);
        };
        /**
         * Returns a tracer from the global tracer provider.
         */
        TraceAPI.prototype.getTracer = function (name, version) {
            return this.getTracerProvider().getTracer(name, version);
        };
        /** Remove the global tracer provider */
        TraceAPI.prototype.disable = function () {
            delete globalUtils._global[globalUtils.GLOBAL_TRACE_API_KEY];
        };
        return TraceAPI;
    }());
    exports.TraceAPI = TraceAPI;

    });

    unwrapExports(trace);
    var trace_1 = trace.TraceAPI;

    var metrics = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MetricsAPI = void 0;


    /**
     * Singleton object which represents the entry point to the OpenTelemetry Metrics API
     */
    var MetricsAPI = /** @class */ (function () {
        /** Empty private constructor prevents end users from constructing a new instance of the API */
        function MetricsAPI() {
        }
        /** Get the singleton instance of the Metrics API */
        MetricsAPI.getInstance = function () {
            if (!this._instance) {
                this._instance = new MetricsAPI();
            }
            return this._instance;
        };
        /**
         * Set the current global meter. Returns the initialized global meter provider.
         */
        MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {
            if (globalUtils._global[globalUtils.GLOBAL_METRICS_API_KEY]) {
                // global meter provider has already been set
                return this.getMeterProvider();
            }
            globalUtils._global[globalUtils.GLOBAL_METRICS_API_KEY] = globalUtils.makeGetter(globalUtils.API_BACKWARDS_COMPATIBILITY_VERSION, provider, NoopMeterProvider_1.NOOP_METER_PROVIDER);
            return provider;
        };
        /**
         * Returns the global meter provider.
         */
        MetricsAPI.prototype.getMeterProvider = function () {
            var _a, _b;
            return ((_b = (_a = globalUtils._global[globalUtils.GLOBAL_METRICS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(globalUtils._global, globalUtils.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopMeterProvider_1.NOOP_METER_PROVIDER);
        };
        /**
         * Returns a meter from the global meter provider.
         */
        MetricsAPI.prototype.getMeter = function (name, version) {
            return this.getMeterProvider().getMeter(name, version);
        };
        /** Remove the global meter provider */
        MetricsAPI.prototype.disable = function () {
            delete globalUtils._global[globalUtils.GLOBAL_METRICS_API_KEY];
        };
        return MetricsAPI;
    }());
    exports.MetricsAPI = MetricsAPI;

    });

    unwrapExports(metrics);
    var metrics_1 = metrics.MetricsAPI;

    var propagation = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PropagationAPI = void 0;





    var contextApi = context$1.ContextAPI.getInstance();
    /**
     * Singleton object which represents the entry point to the OpenTelemetry Propagation API
     */
    var PropagationAPI = /** @class */ (function () {
        /** Empty private constructor prevents end users from constructing a new instance of the API */
        function PropagationAPI() {
        }
        /** Get the singleton instance of the Propagator API */
        PropagationAPI.getInstance = function () {
            if (!this._instance) {
                this._instance = new PropagationAPI();
            }
            return this._instance;
        };
        /**
         * Set the current propagator. Returns the initialized propagator
         */
        PropagationAPI.prototype.setGlobalPropagator = function (propagator) {
            if (globalUtils._global[globalUtils.GLOBAL_PROPAGATION_API_KEY]) {
                // global propagator has already been set
                return this._getGlobalPropagator();
            }
            globalUtils._global[globalUtils.GLOBAL_PROPAGATION_API_KEY] = globalUtils.makeGetter(globalUtils.API_BACKWARDS_COMPATIBILITY_VERSION, propagator, NoopHttpTextPropagator_1.NOOP_HTTP_TEXT_PROPAGATOR);
            return propagator;
        };
        /**
         * Inject context into a carrier to be propagated inter-process
         *
         * @param carrier carrier to inject context into
         * @param setter Function used to set values on the carrier
         * @param context Context carrying tracing data to inject. Defaults to the currently active context.
         */
        PropagationAPI.prototype.inject = function (carrier, setter$1, context) {
            if (setter$1 === void 0) { setter$1 = setter.defaultSetter; }
            if (context === void 0) { context = contextApi.active(); }
            return this._getGlobalPropagator().inject(context, carrier, setter$1);
        };
        /**
         * Extract context from a carrier
         *
         * @param carrier Carrier to extract context from
         * @param getter Function used to extract keys from a carrier
         * @param context Context which the newly created context will inherit from. Defaults to the currently active context.
         */
        PropagationAPI.prototype.extract = function (carrier, getter$1, context) {
            if (getter$1 === void 0) { getter$1 = getter.defaultGetter; }
            if (context === void 0) { context = contextApi.active(); }
            return this._getGlobalPropagator().extract(context, carrier, getter$1);
        };
        /** Remove the global propagator */
        PropagationAPI.prototype.disable = function () {
            delete globalUtils._global[globalUtils.GLOBAL_PROPAGATION_API_KEY];
        };
        PropagationAPI.prototype._getGlobalPropagator = function () {
            var _a, _b;
            return ((_b = (_a = globalUtils._global[globalUtils.GLOBAL_PROPAGATION_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(globalUtils._global, globalUtils.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopHttpTextPropagator_1.NOOP_HTTP_TEXT_PROPAGATOR);
        };
        return PropagationAPI;
    }());
    exports.PropagationAPI = PropagationAPI;

    });

    unwrapExports(propagation);
    var propagation_1 = propagation.PropagationAPI;

    var src$1 = createCommonjsModule(function (module, exports) {
    /*
     * Copyright The OpenTelemetry Authors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.propagation = exports.metrics = exports.trace = exports.context = void 0;
    __exportStar(Logger, exports);
    __exportStar(Time, exports);
    __exportStar(getter, exports);
    __exportStar(HttpTextPropagator, exports);
    __exportStar(NoopHttpTextPropagator_1, exports);
    __exportStar(setter, exports);
    __exportStar(CorrelationContext, exports);
    __exportStar(EntryValue, exports);
    __exportStar(BatchObserverResult, exports);
    __exportStar(BoundInstrument, exports);
    __exportStar(Meter, exports);
    __exportStar(MeterProvider, exports);
    __exportStar(Metric, exports);
    __exportStar(NoopMeter_1, exports);
    __exportStar(NoopMeterProvider_1, exports);
    __exportStar(Observation, exports);
    __exportStar(ObserverResult, exports);
    __exportStar(attributes, exports);
    __exportStar(Event, exports);
    __exportStar(Plugin, exports);
    __exportStar(link_context, exports);
    __exportStar(link, exports);
    __exportStar(NoopSpan_1, exports);
    __exportStar(NoopTracer_1, exports);
    __exportStar(NoopTracerProvider_1, exports);
    __exportStar(Sampler, exports);
    __exportStar(SamplingResult, exports);
    __exportStar(span_context, exports);
    __exportStar(span_kind, exports);
    __exportStar(span, exports);
    __exportStar(SpanOptions, exports);
    __exportStar(status, exports);
    __exportStar(TimedEvent, exports);
    __exportStar(trace_flags, exports);
    __exportStar(trace_state, exports);
    __exportStar(tracer_provider, exports);
    __exportStar(tracer, exports);

    Object.defineProperty(exports, "Context", { enumerable: true, get: function () { return src.Context; } });

    /** Entrypoint for context API */
    exports.context = context$1.ContextAPI.getInstance();

    /** Entrypoint for trace API */
    exports.trace = trace.TraceAPI.getInstance();

    /** Entrypoint for metrics API */
    exports.metrics = metrics.MetricsAPI.getInstance();

    /** Entrypoint for propagation API */
    exports.propagation = propagation.PropagationAPI.getInstance();
    exports.default = {
        trace: exports.trace,
        metrics: exports.metrics,
        context: exports.context,
        propagation: exports.propagation,
    };

    });

    unwrapExports(src$1);
    var src_1 = src$1.CanonicalCode;
    var src_2 = src$1.SpanKind;
    var src_3 = src$1.TraceFlags;
    var src_4 = src$1.propagation;
    var src_5 = src$1.metrics;
    var src_6 = src$1.trace;
    var src_7 = src$1.context;

    // Copyright (c) Microsoft Corporation.
    /**
     * A no-op implementation of Span that can safely be used without side-effects.
     */
    var NoOpSpan = /** @class */ (function () {
        function NoOpSpan() {
        }
        /**
         * Returns the SpanContext associated with this Span.
         */
        NoOpSpan.prototype.context = function () {
            return {
                spanId: "",
                traceId: "",
                traceFlags: src_3.NONE
            };
        };
        /**
         * Marks the end of Span execution.
         * @param _endTime - The time to use as the Span's end time. Defaults to
         * the current time.
         */
        NoOpSpan.prototype.end = function (_endTime) {
            /* Noop */
        };
        /**
         * Sets an attribute on the Span
         * @param _key - The attribute key
         * @param _value - The attribute value
         */
        NoOpSpan.prototype.setAttribute = function (_key, _value) {
            return this;
        };
        /**
         * Sets attributes on the Span
         * @param _attributes - The attributes to add
         */
        NoOpSpan.prototype.setAttributes = function (_attributes) {
            return this;
        };
        /**
         * Adds an event to the Span
         * @param _name - The name of the event
         * @param _attributes - The associated attributes to add for this event
         */
        NoOpSpan.prototype.addEvent = function (_name, _attributes) {
            return this;
        };
        /**
         * Sets a status on the span. Overrides the default of CanonicalCode.OK.
         * @param _status - The status to set.
         */
        NoOpSpan.prototype.setStatus = function (_status) {
            return this;
        };
        /**
         * Updates the name of the Span
         * @param _name - the new Span name
         */
        NoOpSpan.prototype.updateName = function (_name) {
            return this;
        };
        /**
         * Returns whether this span will be recorded
         */
        NoOpSpan.prototype.isRecording = function () {
            return false;
        };
        return NoOpSpan;
    }());

    // Copyright (c) Microsoft Corporation.
    /**
     * A no-op implementation of Tracer that can be used when tracing
     * is disabled.
     */
    var NoOpTracer = /** @class */ (function () {
        function NoOpTracer() {
        }
        /**
         * Starts a new Span.
         * @param _name - The name of the span.
         * @param _options - The SpanOptions used during Span creation.
         */
        NoOpTracer.prototype.startSpan = function (_name, _options) {
            return new NoOpSpan();
        };
        /**
         * Returns the current Span from the current context, if available.
         */
        NoOpTracer.prototype.getCurrentSpan = function () {
            return new NoOpSpan();
        };
        /**
         * Executes the given function within the context provided by a Span.
         * @param _span - The span that provides the context.
         * @param fn - The function to be executed.
         */
        NoOpTracer.prototype.withSpan = function (_span, fn) {
            return fn();
        };
        /**
         * Bind a Span as the target's scope
         * @param target - An object to bind the scope.
         * @param _span - A specific Span to use. Otherwise, use the current one.
         */
        NoOpTracer.prototype.bind = function (target, _span) {
            return target;
        };
        return NoOpTracer;
    }());

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    function getGlobalObject() {
        return self;
    }

    // Copyright (c) Microsoft Corporation.
    // V1 = OpenTelemetry 0.1
    // V2 = OpenTelemetry 0.2
    // V3 = OpenTelemetry 0.6.1
    var GLOBAL_TRACER_VERSION = 3;
    // preview5 shipped with @azure/core-tracing.tracerCache
    // and didn't have smart detection for collisions
    var GLOBAL_TRACER_SYMBOL = Symbol.for("@azure/core-tracing.tracerCache2");
    var cache;
    function loadTracerCache() {
        var globalObj = getGlobalObject();
        var existingCache = globalObj[GLOBAL_TRACER_SYMBOL];
        var setGlobalCache = true;
        if (existingCache) {
            if (existingCache.version === GLOBAL_TRACER_VERSION) {
                cache = existingCache;
            }
            else {
                setGlobalCache = false;
                if (existingCache.tracer) {
                    throw new Error("Two incompatible versions of @azure/core-tracing have been loaded.\n          This library is " + GLOBAL_TRACER_VERSION + ", existing is " + existingCache.version + ".");
                }
            }
        }
        if (!cache) {
            cache = {
                tracer: undefined,
                version: GLOBAL_TRACER_VERSION
            };
        }
        if (setGlobalCache) {
            globalObj[GLOBAL_TRACER_SYMBOL] = cache;
        }
    }
    function getCache() {
        if (!cache) {
            loadTracerCache();
        }
        return cache;
    }

    // Copyright (c) Microsoft Corporation.
    var defaultTracer;
    function getDefaultTracer() {
        if (!defaultTracer) {
            defaultTracer = new NoOpTracer();
        }
        return defaultTracer;
    }
    /**
     * Retrieves the active tracer, or returns a
     * no-op implementation if one is not set.
     */
    function getTracer() {
        var cache = getCache();
        if (!cache.tracer) {
            return getDefaultTracer();
        }
        return cache.tracer;
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * Creates a function that can be used to create spans using the global tracer.
     *
     * Usage:
     *
     * ```typescript
     * // once
     * const createSpan = createSpanFunction({ packagePrefix: "Azure.Data.AppConfiguration", namespace: "Microsoft.AppConfiguration" });
     *
     * // in each operation
     * const span = createSpan("deleteConfigurationSetting", operationOptions);
     *    // code...
     * span.end();
     * ```
     *
     * @hidden
     * @param args - allows configuration of the prefix for each span as well as the az.namespace field.
     */
    function createSpanFunction(args) {
        return function (operationName, operationOptions) {
            var tracer = getTracer();
            var tracingOptions = (operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) || {};
            var spanOptions = __assign({ kind: src_2.INTERNAL }, tracingOptions.spanOptions);
            var spanName = args.packagePrefix ? args.packagePrefix + "." + operationName : operationName;
            var span = tracer.startSpan(spanName, spanOptions);
            if (args.namespace) {
                span.setAttribute("az.namespace", args.namespace);
            }
            var newSpanOptions = tracingOptions.spanOptions || {};
            if (span.isRecording() && args.namespace) {
                newSpanOptions = __assign(__assign({}, tracingOptions.spanOptions), { parent: span.context(), attributes: __assign(__assign({}, spanOptions.attributes), { "az.namespace": args.namespace }) });
            }
            var newTracingOptions = __assign(__assign({}, tracingOptions), { spanOptions: newSpanOptions });
            var newOperationOptions = __assign(__assign({}, operationOptions), { tracingOptions: newTracingOptions });
            return {
                span: span,
                updatedOptions: newOperationOptions
            };
        };
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    var VERSION = "00";
    /**
     * Generates a `traceparent` value given a span context.
     * @param spanContext - Contains context for a specific span.
     * @returns The `spanContext` represented as a `traceparent` value.
     */
    function getTraceParentHeader(spanContext) {
        var missingFields = [];
        if (!spanContext.traceId) {
            missingFields.push("traceId");
        }
        if (!spanContext.spanId) {
            missingFields.push("spanId");
        }
        if (missingFields.length) {
            return;
        }
        var flags = spanContext.traceFlags || 0 /* NONE */;
        var hexFlags = flags.toString(16);
        var traceFlags = hexFlags.length === 1 ? "0" + hexFlags : hexFlags;
        // https://www.w3.org/TR/trace-context/#traceparent-header-field-values
        return VERSION + "-" + spanContext.traceId + "-" + spanContext.spanId + "-" + traceFlags;
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * Creates a span using the global tracer.
     * @internal
     */
    const createSpan = createSpanFunction({
        packagePrefix: "Azure.Identity",
        namespace: "Microsoft.AAD"
    });

    // Copyright (c) Microsoft Corporation.
    const logger$1 = credentialLogger("ChainedTokenCredential");
    /**
     * Enables multiple `TokenCredential` implementations to be tried in order
     * until one of the getToken methods returns an access token.
     */
    class ChainedTokenCredential {
        /**
         * Creates an instance of ChainedTokenCredential using the given credentials.
         *
         * @param sources - `TokenCredential` implementations to be tried in order.
         *
         * Example usage:
         * ```javascript
         * const firstCredential = new ClientSecretCredential(tenantId, clientId, clientSecret);
         * const secondCredential = new ClientSecretCredential(tenantId, anotherClientId, anotherSecret);
         * const credentialChain = new ChainedTokenCredential(firstCredential, secondCredential);
         * ```
         */
        constructor(...sources) {
            /**
             * The message to use when the chained token fails to get a token
             */
            this.UnavailableMessage = "ChainedTokenCredential => failed to retrieve a token from the included credentials";
            this._sources = [];
            this._sources = sources;
        }
        /**
         * Returns the first access token returned by one of the chained
         * `TokenCredential` implementations.  Throws an {@link AggregateAuthenticationError}
         * when one or more credentials throws an {@link AuthenticationError} and
         * no credentials have returned an access token.
         *
         * This method is called automatically by Azure SDK client libraries. You may call this method
         * directly, but you must also handle token caching and token refreshing.
         *
         * @param scopes - The list of scopes for which the token will have access.
         * @param options - The options used to configure any requests this
         *                `TokenCredential` implementation might make.
         */
        getToken(scopes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                let token = null;
                const errors = [];
                const { span, updatedOptions } = createSpan("ChainedTokenCredential-getToken", options);
                for (let i = 0; i < this._sources.length && token === null; i++) {
                    try {
                        token = yield this._sources[i].getToken(scopes, updatedOptions);
                    }
                    catch (err) {
                        if (err instanceof CredentialUnavailable) {
                            errors.push(err);
                        }
                        else {
                            logger$1.getToken.info(formatError(scopes, err));
                            throw err;
                        }
                    }
                }
                if (!token && errors.length > 0) {
                    const err = new AggregateAuthenticationError(errors);
                    span.setStatus({
                        code: src_1.UNAUTHENTICATED,
                        message: err.message
                    });
                    logger$1.getToken.info(formatError(scopes, err));
                    throw err;
                }
                span.end();
                logger$1.getToken.info(formatSuccess(scopes));
                return token;
            });
        }
    }

    // Copyright (c) Microsoft Corporation.
    const BrowserNotSupportedError = new Error("DefaultAzureCredential is not supported in the browser. Use InteractiveBrowserCredential instead.");
    const logger$2 = credentialLogger("DefaultAzureCredential");
    /**
     * Provides a default {@link ChainedTokenCredential} configuration for
     * applications that will be deployed to Azure.
     *
     * Only available in NodeJS.
     */
    class DefaultAzureCredential extends ChainedTokenCredential {
        /**
         * Creates an instance of the DefaultAzureCredential class.
         *
         * @param options - Options for configuring the client which makes the authentication request.
         */
        constructor(_tokenCredentialOptions) {
            super();
            logger$2.info(formatError("", BrowserNotSupportedError));
            throw BrowserNotSupportedError;
        }
        getToken() {
            logger$2.getToken.info(formatError("", BrowserNotSupportedError));
            throw BrowserNotSupportedError;
        }
    }

    // Copyright (c) Microsoft Corporation.
    const BrowserNotSupportedError$1 = new Error("EnvironmentCredential is not supported in the browser.");
    const logger$3 = credentialLogger("EnvironmentCredential");
    class EnvironmentCredential {
        constructor() {
            logger$3.info(formatError("", BrowserNotSupportedError$1));
            throw BrowserNotSupportedError$1;
        }
        getToken() {
            logger$3.getToken.info(formatError("", BrowserNotSupportedError$1));
            throw BrowserNotSupportedError$1;
        }
    }

    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;

    var Format = {
        RFC1738: 'RFC1738',
        RFC3986: 'RFC3986'
    };

    var formats = {
        'default': Format.RFC3986,
        formatters: {
            RFC1738: function (value) {
                return replace.call(value, percentTwenties, '+');
            },
            RFC3986: function (value) {
                return String(value);
            }
        },
        RFC1738: Format.RFC1738,
        RFC3986: Format.RFC3986
    };

    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;

    var hexTable = (function () {
        var array = [];
        for (var i = 0; i < 256; ++i) {
            array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
        }

        return array;
    }());

    var compactQueue = function compactQueue(queue) {
        while (queue.length > 1) {
            var item = queue.pop();
            var obj = item.obj[item.prop];

            if (isArray(obj)) {
                var compacted = [];

                for (var j = 0; j < obj.length; ++j) {
                    if (typeof obj[j] !== 'undefined') {
                        compacted.push(obj[j]);
                    }
                }

                item.obj[item.prop] = compacted;
            }
        }
    };

    var arrayToObject = function arrayToObject(source, options) {
        var obj = options && options.plainObjects ? Object.create(null) : {};
        for (var i = 0; i < source.length; ++i) {
            if (typeof source[i] !== 'undefined') {
                obj[i] = source[i];
            }
        }

        return obj;
    };

    var merge = function merge(target, source, options) {
        /* eslint no-param-reassign: 0 */
        if (!source) {
            return target;
        }

        if (typeof source !== 'object') {
            if (isArray(target)) {
                target.push(source);
            } else if (target && typeof target === 'object') {
                if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {
                    target[source] = true;
                }
            } else {
                return [target, source];
            }

            return target;
        }

        if (!target || typeof target !== 'object') {
            return [target].concat(source);
        }

        var mergeTarget = target;
        if (isArray(target) && !isArray(source)) {
            mergeTarget = arrayToObject(target, options);
        }

        if (isArray(target) && isArray(source)) {
            source.forEach(function (item, i) {
                if (has.call(target, i)) {
                    var targetItem = target[i];
                    if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
                        target[i] = merge(targetItem, item, options);
                    } else {
                        target.push(item);
                    }
                } else {
                    target[i] = item;
                }
            });
            return target;
        }

        return Object.keys(source).reduce(function (acc, key) {
            var value = source[key];

            if (has.call(acc, key)) {
                acc[key] = merge(acc[key], value, options);
            } else {
                acc[key] = value;
            }
            return acc;
        }, mergeTarget);
    };

    var assign = function assignSingleSource(target, source) {
        return Object.keys(source).reduce(function (acc, key) {
            acc[key] = source[key];
            return acc;
        }, target);
    };

    var decode = function (str, decoder, charset) {
        var strWithoutPlus = str.replace(/\+/g, ' ');
        if (charset === 'iso-8859-1') {
            // unescape never throws, no try...catch needed:
            return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
        }
        // utf-8
        try {
            return decodeURIComponent(strWithoutPlus);
        } catch (e) {
            return strWithoutPlus;
        }
    };

    var encode = function encode(str, defaultEncoder, charset, kind, format) {
        // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
        // It has been adapted here for stricter adherence to RFC 3986
        if (str.length === 0) {
            return str;
        }

        var string = str;
        if (typeof str === 'symbol') {
            string = Symbol.prototype.toString.call(str);
        } else if (typeof str !== 'string') {
            string = String(str);
        }

        if (charset === 'iso-8859-1') {
            return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
                return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
            });
        }

        var out = '';
        for (var i = 0; i < string.length; ++i) {
            var c = string.charCodeAt(i);

            if (
                c === 0x2D // -
                || c === 0x2E // .
                || c === 0x5F // _
                || c === 0x7E // ~
                || (c >= 0x30 && c <= 0x39) // 0-9
                || (c >= 0x41 && c <= 0x5A) // a-z
                || (c >= 0x61 && c <= 0x7A) // A-Z
                || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )
            ) {
                out += string.charAt(i);
                continue;
            }

            if (c < 0x80) {
                out = out + hexTable[c];
                continue;
            }

            if (c < 0x800) {
                out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
                continue;
            }

            if (c < 0xD800 || c >= 0xE000) {
                out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
                continue;
            }

            i += 1;
            c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
            out += hexTable[0xF0 | (c >> 18)]
                + hexTable[0x80 | ((c >> 12) & 0x3F)]
                + hexTable[0x80 | ((c >> 6) & 0x3F)]
                + hexTable[0x80 | (c & 0x3F)];
        }

        return out;
    };

    var compact = function compact(value) {
        var queue = [{ obj: { o: value }, prop: 'o' }];
        var refs = [];

        for (var i = 0; i < queue.length; ++i) {
            var item = queue[i];
            var obj = item.obj[item.prop];

            var keys = Object.keys(obj);
            for (var j = 0; j < keys.length; ++j) {
                var key = keys[j];
                var val = obj[key];
                if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                    queue.push({ obj: obj, prop: key });
                    refs.push(val);
                }
            }
        }

        compactQueue(queue);

        return value;
    };

    var isRegExp = function isRegExp(obj) {
        return Object.prototype.toString.call(obj) === '[object RegExp]';
    };

    var isBuffer = function isBuffer(obj) {
        if (!obj || typeof obj !== 'object') {
            return false;
        }

        return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };

    var combine = function combine(a, b) {
        return [].concat(a, b);
    };

    var maybeMap = function maybeMap(val, fn) {
        if (isArray(val)) {
            var mapped = [];
            for (var i = 0; i < val.length; i += 1) {
                mapped.push(fn(val[i]));
            }
            return mapped;
        }
        return fn(val);
    };

    var utils = {
        arrayToObject: arrayToObject,
        assign: assign,
        combine: combine,
        compact: compact,
        decode: decode,
        encode: encode,
        isBuffer: isBuffer,
        isRegExp: isRegExp,
        maybeMap: maybeMap,
        merge: merge
    };

    var has$1 = Object.prototype.hasOwnProperty;

    var arrayPrefixGenerators = {
        brackets: function brackets(prefix) {
            return prefix + '[]';
        },
        comma: 'comma',
        indices: function indices(prefix, key) {
            return prefix + '[' + key + ']';
        },
        repeat: function repeat(prefix) {
            return prefix;
        }
    };

    var isArray$1 = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function (arr, valueOrArray) {
        push.apply(arr, isArray$1(valueOrArray) ? valueOrArray : [valueOrArray]);
    };

    var toISO = Date.prototype.toISOString;

    var defaultFormat = formats['default'];
    var defaults = {
        addQueryPrefix: false,
        allowDots: false,
        charset: 'utf-8',
        charsetSentinel: false,
        delimiter: '&',
        encode: true,
        encoder: utils.encode,
        encodeValuesOnly: false,
        format: defaultFormat,
        formatter: formats.formatters[defaultFormat],
        // deprecated
        indices: false,
        serializeDate: function serializeDate(date) {
            return toISO.call(date);
        },
        skipNulls: false,
        strictNullHandling: false
    };

    var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
        return typeof v === 'string'
            || typeof v === 'number'
            || typeof v === 'boolean'
            || typeof v === 'symbol'
            || typeof v === 'bigint';
    };

    var stringify = function stringify(
        object,
        prefix,
        generateArrayPrefix,
        strictNullHandling,
        skipNulls,
        encoder,
        filter,
        sort,
        allowDots,
        serializeDate,
        format,
        formatter,
        encodeValuesOnly,
        charset
    ) {
        var obj = object;
        if (typeof filter === 'function') {
            obj = filter(prefix, obj);
        } else if (obj instanceof Date) {
            obj = serializeDate(obj);
        } else if (generateArrayPrefix === 'comma' && isArray$1(obj)) {
            obj = utils.maybeMap(obj, function (value) {
                if (value instanceof Date) {
                    return serializeDate(value);
                }
                return value;
            });
        }

        if (obj === null) {
            if (strictNullHandling) {
                return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;
            }

            obj = '';
        }

        if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
            if (encoder) {
                var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);
                return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];
            }
            return [formatter(prefix) + '=' + formatter(String(obj))];
        }

        var values = [];

        if (typeof obj === 'undefined') {
            return values;
        }

        var objKeys;
        if (generateArrayPrefix === 'comma' && isArray$1(obj)) {
            // we need to join elements in
            objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : undefined }];
        } else if (isArray$1(filter)) {
            objKeys = filter;
        } else {
            var keys = Object.keys(obj);
            objKeys = sort ? keys.sort(sort) : keys;
        }

        for (var i = 0; i < objKeys.length; ++i) {
            var key = objKeys[i];
            var value = typeof key === 'object' && key.value !== undefined ? key.value : obj[key];

            if (skipNulls && value === null) {
                continue;
            }

            var keyPrefix = isArray$1(obj)
                ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(prefix, key) : prefix
                : prefix + (allowDots ? '.' + key : '[' + key + ']');

            pushToArray(values, stringify(
                value,
                keyPrefix,
                generateArrayPrefix,
                strictNullHandling,
                skipNulls,
                encoder,
                filter,
                sort,
                allowDots,
                serializeDate,
                format,
                formatter,
                encodeValuesOnly,
                charset
            ));
        }

        return values;
    };

    var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
        if (!opts) {
            return defaults;
        }

        if (opts.encoder !== null && opts.encoder !== undefined && typeof opts.encoder !== 'function') {
            throw new TypeError('Encoder has to be a function.');
        }

        var charset = opts.charset || defaults.charset;
        if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
            throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
        }

        var format = formats['default'];
        if (typeof opts.format !== 'undefined') {
            if (!has$1.call(formats.formatters, opts.format)) {
                throw new TypeError('Unknown format option provided.');
            }
            format = opts.format;
        }
        var formatter = formats.formatters[format];

        var filter = defaults.filter;
        if (typeof opts.filter === 'function' || isArray$1(opts.filter)) {
            filter = opts.filter;
        }

        return {
            addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
            allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
            charset: charset,
            charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
            delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
            encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
            encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
            encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
            filter: filter,
            format: format,
            formatter: formatter,
            serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
            skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
            sort: typeof opts.sort === 'function' ? opts.sort : null,
            strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
        };
    };

    var stringify_1 = function (object, opts) {
        var obj = object;
        var options = normalizeStringifyOptions(opts);

        var objKeys;
        var filter;

        if (typeof options.filter === 'function') {
            filter = options.filter;
            obj = filter('', obj);
        } else if (isArray$1(options.filter)) {
            filter = options.filter;
            objKeys = filter;
        }

        var keys = [];

        if (typeof obj !== 'object' || obj === null) {
            return '';
        }

        var arrayFormat;
        if (opts && opts.arrayFormat in arrayPrefixGenerators) {
            arrayFormat = opts.arrayFormat;
        } else if (opts && 'indices' in opts) {
            arrayFormat = opts.indices ? 'indices' : 'repeat';
        } else {
            arrayFormat = 'indices';
        }

        var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

        if (!objKeys) {
            objKeys = Object.keys(obj);
        }

        if (options.sort) {
            objKeys.sort(options.sort);
        }

        for (var i = 0; i < objKeys.length; ++i) {
            var key = objKeys[i];

            if (options.skipNulls && obj[key] === null) {
                continue;
            }
            pushToArray(keys, stringify(
                obj[key],
                key,
                generateArrayPrefix,
                options.strictNullHandling,
                options.skipNulls,
                options.encode ? options.encoder : null,
                options.filter,
                options.sort,
                options.allowDots,
                options.serializeDate,
                options.format,
                options.formatter,
                options.encodeValuesOnly,
                options.charset
            ));
        }

        var joined = keys.join(options.delimiter);
        var prefix = options.addQueryPrefix === true ? '?' : '';

        if (options.charsetSentinel) {
            if (options.charset === 'iso-8859-1') {
                // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
                prefix += 'utf8=%26%2310003%3B&';
            } else {
                // encodeURIComponent('✓')
                prefix += 'utf8=%E2%9C%93&';
            }
        }

        return joined.length > 0 ? prefix + joined : '';
    };

    var has$2 = Object.prototype.hasOwnProperty;
    var isArray$2 = Array.isArray;

    var defaults$1 = {
        allowDots: false,
        allowPrototypes: false,
        arrayLimit: 20,
        charset: 'utf-8',
        charsetSentinel: false,
        comma: false,
        decoder: utils.decode,
        delimiter: '&',
        depth: 5,
        ignoreQueryPrefix: false,
        interpretNumericEntities: false,
        parameterLimit: 1000,
        parseArrays: true,
        plainObjects: false,
        strictNullHandling: false
    };

    var interpretNumericEntities = function (str) {
        return str.replace(/&#(\d+);/g, function ($0, numberStr) {
            return String.fromCharCode(parseInt(numberStr, 10));
        });
    };

    var parseArrayValue = function (val, options) {
        if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
            return val.split(',');
        }

        return val;
    };

    // This is what browsers will submit when the ✓ character occurs in an
    // application/x-www-form-urlencoded body and the encoding of the page containing
    // the form is iso-8859-1, or when the submitted form has an accept-charset
    // attribute of iso-8859-1. Presumably also with other charsets that do not contain
    // the ✓ character, such as us-ascii.
    var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')

    // These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
    var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

    var parseValues = function parseQueryStringValues(str, options) {
        var obj = {};
        var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
        var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
        var parts = cleanStr.split(options.delimiter, limit);
        var skipIndex = -1; // Keep track of where the utf8 sentinel was found
        var i;

        var charset = options.charset;
        if (options.charsetSentinel) {
            for (i = 0; i < parts.length; ++i) {
                if (parts[i].indexOf('utf8=') === 0) {
                    if (parts[i] === charsetSentinel) {
                        charset = 'utf-8';
                    } else if (parts[i] === isoSentinel) {
                        charset = 'iso-8859-1';
                    }
                    skipIndex = i;
                    i = parts.length; // The eslint settings do not allow break;
                }
            }
        }

        for (i = 0; i < parts.length; ++i) {
            if (i === skipIndex) {
                continue;
            }
            var part = parts[i];

            var bracketEqualsPos = part.indexOf(']=');
            var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

            var key, val;
            if (pos === -1) {
                key = options.decoder(part, defaults$1.decoder, charset, 'key');
                val = options.strictNullHandling ? null : '';
            } else {
                key = options.decoder(part.slice(0, pos), defaults$1.decoder, charset, 'key');
                val = utils.maybeMap(
                    parseArrayValue(part.slice(pos + 1), options),
                    function (encodedVal) {
                        return options.decoder(encodedVal, defaults$1.decoder, charset, 'value');
                    }
                );
            }

            if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
                val = interpretNumericEntities(val);
            }

            if (part.indexOf('[]=') > -1) {
                val = isArray$2(val) ? [val] : val;
            }

            if (has$2.call(obj, key)) {
                obj[key] = utils.combine(obj[key], val);
            } else {
                obj[key] = val;
            }
        }

        return obj;
    };

    var parseObject = function (chain, val, options, valuesParsed) {
        var leaf = valuesParsed ? val : parseArrayValue(val, options);

        for (var i = chain.length - 1; i >= 0; --i) {
            var obj;
            var root = chain[i];

            if (root === '[]' && options.parseArrays) {
                obj = [].concat(leaf);
            } else {
                obj = options.plainObjects ? Object.create(null) : {};
                var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
                var index = parseInt(cleanRoot, 10);
                if (!options.parseArrays && cleanRoot === '') {
                    obj = { 0: leaf };
                } else if (
                    !isNaN(index)
                    && root !== cleanRoot
                    && String(index) === cleanRoot
                    && index >= 0
                    && (options.parseArrays && index <= options.arrayLimit)
                ) {
                    obj = [];
                    obj[index] = leaf;
                } else {
                    obj[cleanRoot] = leaf;
                }
            }

            leaf = obj;
        }

        return leaf;
    };

    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
        if (!givenKey) {
            return;
        }

        // Transform dot notation to bracket notation
        var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

        // The regex chunks

        var brackets = /(\[[^[\]]*])/;
        var child = /(\[[^[\]]*])/g;

        // Get the parent

        var segment = options.depth > 0 && brackets.exec(key);
        var parent = segment ? key.slice(0, segment.index) : key;

        // Stash the parent if it exists

        var keys = [];
        if (parent) {
            // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
            if (!options.plainObjects && has$2.call(Object.prototype, parent)) {
                if (!options.allowPrototypes) {
                    return;
                }
            }

            keys.push(parent);
        }

        // Loop through children appending to the array until we hit depth

        var i = 0;
        while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
            i += 1;
            if (!options.plainObjects && has$2.call(Object.prototype, segment[1].slice(1, -1))) {
                if (!options.allowPrototypes) {
                    return;
                }
            }
            keys.push(segment[1]);
        }

        // If there's a remainder, just add whatever is left

        if (segment) {
            keys.push('[' + key.slice(segment.index) + ']');
        }

        return parseObject(keys, val, options, valuesParsed);
    };

    var normalizeParseOptions = function normalizeParseOptions(opts) {
        if (!opts) {
            return defaults$1;
        }

        if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
            throw new TypeError('Decoder has to be a function.');
        }

        if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
            throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
        }
        var charset = typeof opts.charset === 'undefined' ? defaults$1.charset : opts.charset;

        return {
            allowDots: typeof opts.allowDots === 'undefined' ? defaults$1.allowDots : !!opts.allowDots,
            allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults$1.allowPrototypes,
            arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults$1.arrayLimit,
            charset: charset,
            charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults$1.charsetSentinel,
            comma: typeof opts.comma === 'boolean' ? opts.comma : defaults$1.comma,
            decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults$1.decoder,
            delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults$1.delimiter,
            // eslint-disable-next-line no-implicit-coercion, no-extra-parens
            depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults$1.depth,
            ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
            interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults$1.interpretNumericEntities,
            parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults$1.parameterLimit,
            parseArrays: opts.parseArrays !== false,
            plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults$1.plainObjects,
            strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults$1.strictNullHandling
        };
    };

    var parse = function (str, opts) {
        var options = normalizeParseOptions(opts);

        if (str === '' || str === null || typeof str === 'undefined') {
            return options.plainObjects ? Object.create(null) : {};
        }

        var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
        var obj = options.plainObjects ? Object.create(null) : {};

        // Iterate over the keys and setup the new object

        var keys = Object.keys(tempObj);
        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
            obj = utils.merge(obj, newObj, options);
        }

        return utils.compact(obj);
    };

    var lib = {
        formats: formats,
        parse: parse,
        stringify: stringify_1
    };

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    /**
     * A collection of HttpHeaders that can be sent with a HTTP request.
     */
    function getHeaderKey(headerName) {
        return headerName.toLowerCase();
    }
    function isHttpHeadersLike(object) {
        if (object && typeof object === "object") {
            var castObject = object;
            if (typeof castObject.rawHeaders === "function" &&
                typeof castObject.clone === "function" &&
                typeof castObject.get === "function" &&
                typeof castObject.set === "function" &&
                typeof castObject.contains === "function" &&
                typeof castObject.remove === "function" &&
                typeof castObject.headersArray === "function" &&
                typeof castObject.headerValues === "function" &&
                typeof castObject.headerNames === "function" &&
                typeof castObject.toJson === "function") {
                return true;
            }
        }
        return false;
    }
    /**
     * A collection of HTTP header key/value pairs.
     */
    var HttpHeaders = /** @class */ (function () {
        function HttpHeaders(rawHeaders) {
            this._headersMap = {};
            if (rawHeaders) {
                for (var headerName in rawHeaders) {
                    this.set(headerName, rawHeaders[headerName]);
                }
            }
        }
        /**
         * Set a header in this collection with the provided name and value. The name is
         * case-insensitive.
         * @param headerName - The name of the header to set. This value is case-insensitive.
         * @param headerValue - The value of the header to set.
         */
        HttpHeaders.prototype.set = function (headerName, headerValue) {
            this._headersMap[getHeaderKey(headerName)] = {
                name: headerName,
                value: headerValue.toString()
            };
        };
        /**
         * Get the header value for the provided header name, or undefined if no header exists in this
         * collection with the provided name.
         * @param headerName - The name of the header.
         */
        HttpHeaders.prototype.get = function (headerName) {
            var header = this._headersMap[getHeaderKey(headerName)];
            return !header ? undefined : header.value;
        };
        /**
         * Get whether or not this header collection contains a header entry for the provided header name.
         */
        HttpHeaders.prototype.contains = function (headerName) {
            return !!this._headersMap[getHeaderKey(headerName)];
        };
        /**
         * Remove the header with the provided headerName. Return whether or not the header existed and
         * was removed.
         * @param headerName - The name of the header to remove.
         */
        HttpHeaders.prototype.remove = function (headerName) {
            var result = this.contains(headerName);
            delete this._headersMap[getHeaderKey(headerName)];
            return result;
        };
        /**
         * Get the headers that are contained this collection as an object.
         */
        HttpHeaders.prototype.rawHeaders = function () {
            var result = {};
            for (var headerKey in this._headersMap) {
                var header = this._headersMap[headerKey];
                result[header.name.toLowerCase()] = header.value;
            }
            return result;
        };
        /**
         * Get the headers that are contained in this collection as an array.
         */
        HttpHeaders.prototype.headersArray = function () {
            var headers = [];
            for (var headerKey in this._headersMap) {
                headers.push(this._headersMap[headerKey]);
            }
            return headers;
        };
        /**
         * Get the header names that are contained in this collection.
         */
        HttpHeaders.prototype.headerNames = function () {
            var headerNames = [];
            var headers = this.headersArray();
            for (var i = 0; i < headers.length; ++i) {
                headerNames.push(headers[i].name);
            }
            return headerNames;
        };
        /**
         * Get the header values that are contained in this collection.
         */
        HttpHeaders.prototype.headerValues = function () {
            var headerValues = [];
            var headers = this.headersArray();
            for (var i = 0; i < headers.length; ++i) {
                headerValues.push(headers[i].value);
            }
            return headerValues;
        };
        /**
         * Get the JSON object representation of this HTTP header collection.
         */
        HttpHeaders.prototype.toJson = function () {
            return this.rawHeaders();
        };
        /**
         * Get the string representation of this HTTP header collection.
         */
        HttpHeaders.prototype.toString = function () {
            return JSON.stringify(this.toJson());
        };
        /**
         * Create a deep clone/copy of this HttpHeaders collection.
         */
        HttpHeaders.prototype.clone = function () {
            return new HttpHeaders(this.rawHeaders());
        };
        return HttpHeaders;
    }());

    // Copyright (c) Microsoft Corporation.
    /**
     * Encodes a byte array in base64 format.
     * @param value - The Uint8Aray to encode
     */
    function encodeByteArray(value) {
        var str = "";
        for (var i = 0; i < value.length; i++) {
            str += String.fromCharCode(value[i]);
        }
        return btoa(str);
    }
    /**
     * Decodes a base64 string into a byte array.
     * @param value - The base64 string to decode
     */
    function decodeString(value) {
        var byteString = atob(value);
        var arr = new Uint8Array(byteString.length);
        for (var i = 0; i < byteString.length; i++) {
            arr[i] = byteString.charCodeAt(i);
        }
        return arr;
    }

    // Unique ID creation requires a high quality random # generator. In the browser we therefore
    // require the crypto API and do not support built-in fallback to lower quality random number
    // generators (like Math.random()).
    var getRandomValues;
    var rnds8 = new Uint8Array(16);
    function rng() {
      // lazy load so that environments that need to polyfill have a chance to do so
      if (!getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
        // find the complete implementation of crypto (msCrypto) on IE11.
        getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

        if (!getRandomValues) {
          throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
        }
      }

      return getRandomValues(rnds8);
    }

    var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

    function validate(uuid) {
      return typeof uuid === 'string' && REGEX.test(uuid);
    }

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */

    var byteToHex = [];

    for (var i = 0; i < 256; ++i) {
      byteToHex.push((i + 0x100).toString(16).substr(1));
    }

    function stringify$1(arr) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      // Note: Be careful editing this code!  It's been tuned for performance
      // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
      var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
      // of the following:
      // - One or more input array values don't map to a hex octet (leading to
      // "undefined" in the uuid)
      // - Invalid input values for the RFC `version` or `variant` fields

      if (!validate(uuid)) {
        throw TypeError('Stringified UUID is invalid');
      }

      return uuid;
    }

    function v4(options, buf, offset) {
      options = options || {};
      var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

      rnds[6] = rnds[6] & 0x0f | 0x40;
      rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

      if (buf) {
        offset = offset || 0;

        for (var i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }

        return buf;
      }

      return stringify$1(rnds);
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    var Constants = {
        /**
         * The core-http version
         */
        coreHttpVersion: "1.2.4",
        /**
         * Specifies HTTP.
         */
        HTTP: "http:",
        /**
         * Specifies HTTPS.
         */
        HTTPS: "https:",
        /**
         * Specifies HTTP Proxy.
         */
        HTTP_PROXY: "HTTP_PROXY",
        /**
         * Specifies HTTPS Proxy.
         */
        HTTPS_PROXY: "HTTPS_PROXY",
        /**
         * Specifies NO Proxy.
         */
        NO_PROXY: "NO_PROXY",
        /**
         * Specifies ALL Proxy.
         */
        ALL_PROXY: "ALL_PROXY",
        HttpConstants: {
            /**
             * Http Verbs
             */
            HttpVerbs: {
                PUT: "PUT",
                GET: "GET",
                DELETE: "DELETE",
                POST: "POST",
                MERGE: "MERGE",
                HEAD: "HEAD",
                PATCH: "PATCH"
            },
            StatusCodes: {
                TooManyRequests: 429
            }
        },
        /**
         * Defines constants for use with HTTP headers.
         */
        HeaderConstants: {
            /**
             * The Authorization header.
             */
            AUTHORIZATION: "authorization",
            AUTHORIZATION_SCHEME: "Bearer",
            /**
             * The Retry-After response-header field can be used with a 503 (Service
             * Unavailable) or 349 (Too Many Requests) responses to indicate how long
             * the service is expected to be unavailable to the requesting client.
             */
            RETRY_AFTER: "Retry-After",
            /**
             * The UserAgent header.
             */
            USER_AGENT: "User-Agent"
        }
    };

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    /**
     * Default key used to access the XML attributes.
     */
    var XML_ATTRKEY = "$";
    /**
     * Default key used to access the XML value content.
     */
    var XML_CHARKEY = "_";

    // Copyright (c) Microsoft Corporation.
    var validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;
    /**
     * A constant that indicates whether the environment is node.js or browser based.
     */
    var isNode = typeof process !== "undefined" &&
        !!process.version &&
        !!process.versions &&
        !!process.versions.node;
    /**
     * Validates the given uuid as a string
     *
     * @param uuid - The uuid as a string that needs to be validated
     * @returns True if the uuid is valid; false otherwise.
     */
    function isValidUuid(uuid) {
        return validUuidRegex.test(uuid);
    }
    /**
     * Generated UUID
     *
     * @returns RFC4122 v4 UUID.
     */
    function generateUuid() {
        return v4();
    }
    /**
     * A wrapper for setTimeout that resolves a promise after t milliseconds.
     * @param t - The number of milliseconds to be delayed.
     * @param value - The value to be resolved with after a timeout of t milliseconds.
     * @returns Resolved promise
     */
    function delay(t, value) {
        return new Promise(function (resolve) { return setTimeout(function () { return resolve(value); }, t); });
    }
    function prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {
        var _a, _b, _c;
        if (!Array.isArray(obj)) {
            obj = [obj];
        }
        if (!xmlNamespaceKey || !xmlNamespace) {
            return _a = {}, _a[elementName] = obj, _a;
        }
        var result = (_b = {}, _b[elementName] = obj, _b);
        result[XML_ATTRKEY] = (_c = {}, _c[xmlNamespaceKey] = xmlNamespace, _c);
        return result;
    }
    var validateISODuration = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    /**
     * Indicates whether the given string is in ISO 8601 format.
     * @param value - The value to be validated for ISO 8601 duration format.
     * @returns `true` if valid, `false` otherwise.
     */
    function isDuration(value) {
        return validateISODuration.test(value);
    }
    /**
     * Replace all of the instances of searchValue in value with the provided replaceValue.
     * @param value - The value to search and replace in.
     * @param searchValue - The value to search for in the value argument.
     * @param replaceValue - The value to replace searchValue with in the value argument.
     * @returns The value where each instance of searchValue was replaced with replacedValue.
     */
    function replaceAll(value, searchValue, replaceValue) {
        return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || "");
    }
    /**
     * Determines whether the given entity is a basic/primitive type
     * (string, number, boolean, null, undefined).
     * @param value - Any entity
     * @returns true is it is primitive type, false otherwise.
     */
    function isPrimitiveType(value) {
        return (typeof value !== "object" && typeof value !== "function") || value === null;
    }

    // Copyright (c) Microsoft Corporation.
    var Serializer = /** @class */ (function () {
        function Serializer(modelMappers, isXML) {
            if (modelMappers === void 0) { modelMappers = {}; }
            this.modelMappers = modelMappers;
            this.isXML = isXML;
        }
        Serializer.prototype.validateConstraints = function (mapper, value, objectName) {
            var failValidation = function (constraintName, constraintValue) {
                throw new Error("\"" + objectName + "\" with value \"" + value + "\" should satisfy the constraint \"" + constraintName + "\": " + constraintValue + ".");
            };
            if (mapper.constraints && value != undefined) {
                var valueAsNumber = value;
                var _a = mapper.constraints, ExclusiveMaximum = _a.ExclusiveMaximum, ExclusiveMinimum = _a.ExclusiveMinimum, InclusiveMaximum = _a.InclusiveMaximum, InclusiveMinimum = _a.InclusiveMinimum, MaxItems = _a.MaxItems, MaxLength = _a.MaxLength, MinItems = _a.MinItems, MinLength = _a.MinLength, MultipleOf = _a.MultipleOf, Pattern = _a.Pattern, UniqueItems = _a.UniqueItems;
                if (ExclusiveMaximum != undefined && valueAsNumber >= ExclusiveMaximum) {
                    failValidation("ExclusiveMaximum", ExclusiveMaximum);
                }
                if (ExclusiveMinimum != undefined && valueAsNumber <= ExclusiveMinimum) {
                    failValidation("ExclusiveMinimum", ExclusiveMinimum);
                }
                if (InclusiveMaximum != undefined && valueAsNumber > InclusiveMaximum) {
                    failValidation("InclusiveMaximum", InclusiveMaximum);
                }
                if (InclusiveMinimum != undefined && valueAsNumber < InclusiveMinimum) {
                    failValidation("InclusiveMinimum", InclusiveMinimum);
                }
                var valueAsArray = value;
                if (MaxItems != undefined && valueAsArray.length > MaxItems) {
                    failValidation("MaxItems", MaxItems);
                }
                if (MaxLength != undefined && valueAsArray.length > MaxLength) {
                    failValidation("MaxLength", MaxLength);
                }
                if (MinItems != undefined && valueAsArray.length < MinItems) {
                    failValidation("MinItems", MinItems);
                }
                if (MinLength != undefined && valueAsArray.length < MinLength) {
                    failValidation("MinLength", MinLength);
                }
                if (MultipleOf != undefined && valueAsNumber % MultipleOf !== 0) {
                    failValidation("MultipleOf", MultipleOf);
                }
                if (Pattern) {
                    var pattern = typeof Pattern === "string" ? new RegExp(Pattern) : Pattern;
                    if (typeof value !== "string" || value.match(pattern) === null) {
                        failValidation("Pattern", Pattern);
                    }
                }
                if (UniqueItems &&
                    valueAsArray.some(function (item, i, ar) { return ar.indexOf(item) !== i; })) {
                    failValidation("UniqueItems", UniqueItems);
                }
            }
        };
        /**
         * Serialize the given object based on its metadata defined in the mapper
         *
         * @param mapper - The mapper which defines the metadata of the serializable object
         * @param object - A valid Javascript object to be serialized
         * @param objectName - Name of the serialized object
         * @param options - additional options to deserialization
         * @returns A valid serialized Javascript object
         */
        Serializer.prototype.serialize = function (mapper, object, objectName, options) {
            var _a, _b, _c;
            if (options === void 0) { options = {}; }
            var updatedOptions = {
                rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : "",
                includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,
                xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY
            };
            var payload = {};
            var mapperType = mapper.type.name;
            if (!objectName) {
                objectName = mapper.serializedName;
            }
            if (mapperType.match(/^Sequence$/i) !== null) {
                payload = [];
            }
            if (mapper.isConstant) {
                object = mapper.defaultValue;
            }
            // This table of allowed values should help explain
            // the mapper.required and mapper.nullable properties.
            // X means "neither undefined or null are allowed".
            //           || required
            //           || true      | false
            //  nullable || ==========================
            //      true || null      | undefined/null
            //     false || X         | undefined
            // undefined || X         | undefined/null
            var required = mapper.required, nullable = mapper.nullable;
            if (required && nullable && object === undefined) {
                throw new Error(objectName + " cannot be undefined.");
            }
            if (required && !nullable && object == undefined) {
                throw new Error(objectName + " cannot be null or undefined.");
            }
            if (!required && nullable === false && object === null) {
                throw new Error(objectName + " cannot be null.");
            }
            if (object == undefined) {
                payload = object;
            }
            else {
                // Validate Constraints if any
                this.validateConstraints(mapper, object, objectName);
                if (mapperType.match(/^any$/i) !== null) {
                    payload = object;
                }
                else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {
                    payload = serializeBasicTypes(mapperType, objectName, object);
                }
                else if (mapperType.match(/^Enum$/i) !== null) {
                    var enumMapper = mapper;
                    payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);
                }
                else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {
                    payload = serializeDateTypes(mapperType, object, objectName);
                }
                else if (mapperType.match(/^ByteArray$/i) !== null) {
                    payload = serializeByteArrayType(objectName, object);
                }
                else if (mapperType.match(/^Base64Url$/i) !== null) {
                    payload = serializeBase64UrlType(objectName, object);
                }
                else if (mapperType.match(/^Sequence$/i) !== null) {
                    payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
                }
                else if (mapperType.match(/^Dictionary$/i) !== null) {
                    payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
                }
                else if (mapperType.match(/^Composite$/i) !== null) {
                    payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
                }
            }
            return payload;
        };
        /**
         * Deserialize the given object based on its metadata defined in the mapper
         *
         * @param mapper - The mapper which defines the metadata of the serializable object
         * @param responseBody - A valid Javascript entity to be deserialized
         * @param objectName - Name of the deserialized object
         * @param options - Controls behavior of XML parser and builder.
         * @returns A valid deserialized Javascript object
         */
        Serializer.prototype.deserialize = function (mapper, responseBody, objectName, options) {
            var _a, _b, _c;
            if (options === void 0) { options = {}; }
            var updatedOptions = {
                rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : "",
                includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,
                xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY
            };
            if (responseBody == undefined) {
                if (this.isXML && mapper.type.name === "Sequence" && !mapper.xmlIsWrapped) {
                    // Edge case for empty XML non-wrapped lists. xml2js can't distinguish
                    // between the list being empty versus being missing,
                    // so let's do the more user-friendly thing and return an empty list.
                    responseBody = [];
                }
                // specifically check for undefined as default value can be a falsey value `0, "", false, null`
                if (mapper.defaultValue !== undefined) {
                    responseBody = mapper.defaultValue;
                }
                return responseBody;
            }
            var payload;
            var mapperType = mapper.type.name;
            if (!objectName) {
                objectName = mapper.serializedName;
            }
            if (mapperType.match(/^Composite$/i) !== null) {
                payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);
            }
            else {
                if (this.isXML) {
                    var xmlCharKey = updatedOptions.xmlCharKey;
                    var castResponseBody = responseBody;
                    /**
                     * If the mapper specifies this as a non-composite type value but the responseBody contains
                     * both header ("$" i.e., XML_ATTRKEY) and body ("#" i.e., XML_CHARKEY) properties,
                     * then just reduce the responseBody value to the body ("#" i.e., XML_CHARKEY) property.
                     */
                    if (castResponseBody[XML_ATTRKEY] != undefined &&
                        castResponseBody[xmlCharKey] != undefined) {
                        responseBody = castResponseBody[xmlCharKey];
                    }
                }
                if (mapperType.match(/^Number$/i) !== null) {
                    payload = parseFloat(responseBody);
                    if (isNaN(payload)) {
                        payload = responseBody;
                    }
                }
                else if (mapperType.match(/^Boolean$/i) !== null) {
                    if (responseBody === "true") {
                        payload = true;
                    }
                    else if (responseBody === "false") {
                        payload = false;
                    }
                    else {
                        payload = responseBody;
                    }
                }
                else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {
                    payload = responseBody;
                }
                else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {
                    payload = new Date(responseBody);
                }
                else if (mapperType.match(/^UnixTime$/i) !== null) {
                    payload = unixTimeToDate(responseBody);
                }
                else if (mapperType.match(/^ByteArray$/i) !== null) {
                    payload = decodeString(responseBody);
                }
                else if (mapperType.match(/^Base64Url$/i) !== null) {
                    payload = base64UrlToByteArray(responseBody);
                }
                else if (mapperType.match(/^Sequence$/i) !== null) {
                    payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);
                }
                else if (mapperType.match(/^Dictionary$/i) !== null) {
                    payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);
                }
            }
            if (mapper.isConstant) {
                payload = mapper.defaultValue;
            }
            return payload;
        };
        return Serializer;
    }());
    function trimEnd(str, ch) {
        var len = str.length;
        while (len - 1 >= 0 && str[len - 1] === ch) {
            --len;
        }
        return str.substr(0, len);
    }
    function bufferToBase64Url(buffer) {
        if (!buffer) {
            return undefined;
        }
        if (!(buffer instanceof Uint8Array)) {
            throw new Error("Please provide an input of type Uint8Array for converting to Base64Url.");
        }
        // Uint8Array to Base64.
        var str = encodeByteArray(buffer);
        // Base64 to Base64Url.
        return trimEnd(str, "=")
            .replace(/\+/g, "-")
            .replace(/\//g, "_");
    }
    function base64UrlToByteArray(str) {
        if (!str) {
            return undefined;
        }
        if (str && typeof str.valueOf() !== "string") {
            throw new Error("Please provide an input of type string for converting to Uint8Array");
        }
        // Base64Url to Base64.
        str = str.replace(/-/g, "+").replace(/_/g, "/");
        // Base64 to Uint8Array.
        return decodeString(str);
    }
    function splitSerializeName(prop) {
        var classes = [];
        var partialclass = "";
        if (prop) {
            var subwords = prop.split(".");
            for (var _i = 0, subwords_1 = subwords; _i < subwords_1.length; _i++) {
                var item = subwords_1[_i];
                if (item.charAt(item.length - 1) === "\\") {
                    partialclass += item.substr(0, item.length - 1) + ".";
                }
                else {
                    partialclass += item;
                    classes.push(partialclass);
                    partialclass = "";
                }
            }
        }
        return classes;
    }
    function dateToUnixTime(d) {
        if (!d) {
            return undefined;
        }
        if (typeof d.valueOf() === "string") {
            d = new Date(d);
        }
        return Math.floor(d.getTime() / 1000);
    }
    function unixTimeToDate(n) {
        if (!n) {
            return undefined;
        }
        return new Date(n * 1000);
    }
    function serializeBasicTypes(typeName, objectName, value) {
        if (value !== null && value !== undefined) {
            if (typeName.match(/^Number$/i) !== null) {
                if (typeof value !== "number") {
                    throw new Error(objectName + " with value " + value + " must be of type number.");
                }
            }
            else if (typeName.match(/^String$/i) !== null) {
                if (typeof value.valueOf() !== "string") {
                    throw new Error(objectName + " with value \"" + value + "\" must be of type string.");
                }
            }
            else if (typeName.match(/^Uuid$/i) !== null) {
                if (!(typeof value.valueOf() === "string" && isValidUuid(value))) {
                    throw new Error(objectName + " with value \"" + value + "\" must be of type string and a valid uuid.");
                }
            }
            else if (typeName.match(/^Boolean$/i) !== null) {
                if (typeof value !== "boolean") {
                    throw new Error(objectName + " with value " + value + " must be of type boolean.");
                }
            }
            else if (typeName.match(/^Stream$/i) !== null) {
                var objectType = typeof value;
                if (objectType !== "string" &&
                    objectType !== "function" &&
                    !(value instanceof ArrayBuffer) &&
                    !ArrayBuffer.isView(value) &&
                    !((typeof Blob === "function" || typeof Blob === "object") && value instanceof Blob)) {
                    throw new Error(objectName + " must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.");
                }
            }
        }
        return value;
    }
    function serializeEnumType(objectName, allowedValues, value) {
        if (!allowedValues) {
            throw new Error("Please provide a set of allowedValues to validate " + objectName + " as an Enum Type.");
        }
        var isPresent = allowedValues.some(function (item) {
            if (typeof item.valueOf() === "string") {
                return item.toLowerCase() === value.toLowerCase();
            }
            return item === value;
        });
        if (!isPresent) {
            throw new Error(value + " is not a valid value for " + objectName + ". The valid values are: " + JSON.stringify(allowedValues) + ".");
        }
        return value;
    }
    function serializeByteArrayType(objectName, value) {
        var returnValue = "";
        if (value != undefined) {
            if (!(value instanceof Uint8Array)) {
                throw new Error(objectName + " must be of type Uint8Array.");
            }
            returnValue = encodeByteArray(value);
        }
        return returnValue;
    }
    function serializeBase64UrlType(objectName, value) {
        var returnValue = "";
        if (value != undefined) {
            if (!(value instanceof Uint8Array)) {
                throw new Error(objectName + " must be of type Uint8Array.");
            }
            returnValue = bufferToBase64Url(value) || "";
        }
        return returnValue;
    }
    function serializeDateTypes(typeName, value, objectName) {
        if (value != undefined) {
            if (typeName.match(/^Date$/i) !== null) {
                if (!(value instanceof Date ||
                    (typeof value.valueOf() === "string" && !isNaN(Date.parse(value))))) {
                    throw new Error(objectName + " must be an instanceof Date or a string in ISO8601 format.");
                }
                value =
                    value instanceof Date
                        ? value.toISOString().substring(0, 10)
                        : new Date(value).toISOString().substring(0, 10);
            }
            else if (typeName.match(/^DateTime$/i) !== null) {
                if (!(value instanceof Date ||
                    (typeof value.valueOf() === "string" && !isNaN(Date.parse(value))))) {
                    throw new Error(objectName + " must be an instanceof Date or a string in ISO8601 format.");
                }
                value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();
            }
            else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {
                if (!(value instanceof Date ||
                    (typeof value.valueOf() === "string" && !isNaN(Date.parse(value))))) {
                    throw new Error(objectName + " must be an instanceof Date or a string in RFC-1123 format.");
                }
                value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();
            }
            else if (typeName.match(/^UnixTime$/i) !== null) {
                if (!(value instanceof Date ||
                    (typeof value.valueOf() === "string" && !isNaN(Date.parse(value))))) {
                    throw new Error(objectName + " must be an instanceof Date or a string in RFC-1123/ISO8601 format " +
                        "for it to be serialized in UnixTime/Epoch format.");
                }
                value = dateToUnixTime(value);
            }
            else if (typeName.match(/^TimeSpan$/i) !== null) {
                if (!isDuration(value)) {
                    throw new Error(objectName + " must be a string in ISO 8601 format. Instead was \"" + value + "\".");
                }
            }
        }
        return value;
    }
    function serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {
        var _a, _b;
        if (!Array.isArray(object)) {
            throw new Error(objectName + " must be of type Array.");
        }
        var elementType = mapper.type.element;
        if (!elementType || typeof elementType !== "object") {
            throw new Error("element\" metadata for an Array must be defined in the " +
                ("mapper and it must of type \"object\" in " + objectName + "."));
        }
        var tempArray = [];
        for (var i = 0; i < object.length; i++) {
            var serializedValue = serializer.serialize(elementType, object[i], objectName, options);
            if (isXml && elementType.xmlNamespace) {
                var xmlnsKey = elementType.xmlNamespacePrefix
                    ? "xmlns:" + elementType.xmlNamespacePrefix
                    : "xmlns";
                if (elementType.type.name === "Composite") {
                    tempArray[i] = __assign({}, serializedValue);
                    tempArray[i][XML_ATTRKEY] = (_a = {}, _a[xmlnsKey] = elementType.xmlNamespace, _a);
                }
                else {
                    tempArray[i] = {};
                    tempArray[i][options.xmlCharKey] = serializedValue;
                    tempArray[i][XML_ATTRKEY] = (_b = {}, _b[xmlnsKey] = elementType.xmlNamespace, _b);
                }
            }
            else {
                tempArray[i] = serializedValue;
            }
        }
        return tempArray;
    }
    function serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {
        var _a;
        if (typeof object !== "object") {
            throw new Error(objectName + " must be of type object.");
        }
        var valueType = mapper.type.value;
        if (!valueType || typeof valueType !== "object") {
            throw new Error("\"value\" metadata for a Dictionary must be defined in the " +
                ("mapper and it must of type \"object\" in " + objectName + "."));
        }
        var tempDictionary = {};
        for (var _i = 0, _b = Object.keys(object); _i < _b.length; _i++) {
            var key = _b[_i];
            var serializedValue = serializer.serialize(valueType, object[key], objectName, options);
            // If the element needs an XML namespace we need to add it within the $ property
            tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);
        }
        // Add the namespace to the root element if needed
        if (isXml && mapper.xmlNamespace) {
            var xmlnsKey = mapper.xmlNamespacePrefix ? "xmlns:" + mapper.xmlNamespacePrefix : "xmlns";
            var result = tempDictionary;
            result[XML_ATTRKEY] = (_a = {}, _a[xmlnsKey] = mapper.xmlNamespace, _a);
            return result;
        }
        return tempDictionary;
    }
    /**
     * Resolves the additionalProperties property from a referenced mapper
     * @param serializer - The serializer containing the entire set of mappers
     * @param mapper - The composite mapper to resolve
     * @param objectName - Name of the object being serialized
     */
    function resolveAdditionalProperties(serializer, mapper, objectName) {
        var additionalProperties = mapper.type.additionalProperties;
        if (!additionalProperties && mapper.type.className) {
            var modelMapper = resolveReferencedMapper(serializer, mapper, objectName);
            return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;
        }
        return additionalProperties;
    }
    /**
     * Finds the mapper referenced by className
     * @param serializer - The serializer containing the entire set of mappers
     * @param mapper - The composite mapper to resolve
     * @param objectName - Name of the object being serialized
     */
    function resolveReferencedMapper(serializer, mapper, objectName) {
        var className = mapper.type.className;
        if (!className) {
            throw new Error("Class name for model \"" + objectName + "\" is not provided in the mapper \"" + JSON.stringify(mapper, undefined, 2) + "\".");
        }
        return serializer.modelMappers[className];
    }
    /**
     * Resolves a composite mapper's modelProperties.
     * @param serializer - The serializer containing the entire set of mappers
     * @param mapper - The composite mapper to resolve
     */
    function resolveModelProperties(serializer, mapper, objectName) {
        var modelProps = mapper.type.modelProperties;
        if (!modelProps) {
            var modelMapper = resolveReferencedMapper(serializer, mapper, objectName);
            if (!modelMapper) {
                throw new Error("mapper() cannot be null or undefined for model \"" + mapper.type.className + "\".");
            }
            modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;
            if (!modelProps) {
                throw new Error("modelProperties cannot be null or undefined in the " +
                    ("mapper \"" + JSON.stringify(modelMapper) + "\" of type \"" + mapper.type.className + "\" for object \"" + objectName + "\"."));
            }
        }
        return modelProps;
    }
    function serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {
        var _a, _b;
        if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
            mapper = getPolymorphicMapper(serializer, mapper, object, "clientName");
        }
        if (object != undefined) {
            var payload = {};
            var modelProps = resolveModelProperties(serializer, mapper, objectName);
            for (var _i = 0, _c = Object.keys(modelProps); _i < _c.length; _i++) {
                var key = _c[_i];
                var propertyMapper = modelProps[key];
                if (propertyMapper.readOnly) {
                    continue;
                }
                var propName = void 0;
                var parentObject = payload;
                if (serializer.isXML) {
                    if (propertyMapper.xmlIsWrapped) {
                        propName = propertyMapper.xmlName;
                    }
                    else {
                        propName = propertyMapper.xmlElementName || propertyMapper.xmlName;
                    }
                }
                else {
                    var paths = splitSerializeName(propertyMapper.serializedName);
                    propName = paths.pop();
                    for (var _d = 0, paths_1 = paths; _d < paths_1.length; _d++) {
                        var pathName = paths_1[_d];
                        var childObject = parentObject[pathName];
                        if (childObject == undefined &&
                            (object[key] != undefined || propertyMapper.defaultValue !== undefined)) {
                            parentObject[pathName] = {};
                        }
                        parentObject = parentObject[pathName];
                    }
                }
                if (parentObject != undefined) {
                    if (isXml && mapper.xmlNamespace) {
                        var xmlnsKey = mapper.xmlNamespacePrefix
                            ? "xmlns:" + mapper.xmlNamespacePrefix
                            : "xmlns";
                        parentObject[XML_ATTRKEY] = __assign(__assign({}, parentObject[XML_ATTRKEY]), (_a = {}, _a[xmlnsKey] = mapper.xmlNamespace, _a));
                    }
                    var propertyObjectName = propertyMapper.serializedName !== ""
                        ? objectName + "." + propertyMapper.serializedName
                        : objectName;
                    var toSerialize = object[key];
                    var polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
                    if (polymorphicDiscriminator &&
                        polymorphicDiscriminator.clientName === key &&
                        toSerialize == undefined) {
                        toSerialize = mapper.serializedName;
                    }
                    var serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);
                    if (serializedValue !== undefined && propName != undefined) {
                        var value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);
                        if (isXml && propertyMapper.xmlIsAttribute) {
                            // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.
                            // This keeps things simple while preventing name collision
                            // with names in user documents.
                            parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};
                            parentObject[XML_ATTRKEY][propName] = serializedValue;
                        }
                        else if (isXml && propertyMapper.xmlIsWrapped) {
                            parentObject[propName] = (_b = {}, _b[propertyMapper.xmlElementName] = value, _b);
                        }
                        else {
                            parentObject[propName] = value;
                        }
                    }
                }
            }
            var additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);
            if (additionalPropertiesMapper) {
                var propNames = Object.keys(modelProps);
                var _loop_1 = function (clientPropName) {
                    var isAdditionalProperty = propNames.every(function (pn) { return pn !== clientPropName; });
                    if (isAdditionalProperty) {
                        payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '["' + clientPropName + '"]', options);
                    }
                };
                for (var clientPropName in object) {
                    _loop_1(clientPropName);
                }
            }
            return payload;
        }
        return object;
    }
    function getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {
        var _a;
        if (!isXml || !propertyMapper.xmlNamespace) {
            return serializedValue;
        }
        var xmlnsKey = propertyMapper.xmlNamespacePrefix
            ? "xmlns:" + propertyMapper.xmlNamespacePrefix
            : "xmlns";
        var xmlNamespace = (_a = {}, _a[xmlnsKey] = propertyMapper.xmlNamespace, _a);
        if (["Composite"].includes(propertyMapper.type.name)) {
            if (serializedValue[XML_ATTRKEY]) {
                return serializedValue;
            }
            else {
                var result_1 = __assign({}, serializedValue);
                result_1[XML_ATTRKEY] = xmlNamespace;
                return result_1;
            }
        }
        var result = {};
        result[options.xmlCharKey] = serializedValue;
        result[XML_ATTRKEY] = xmlNamespace;
        return result;
    }
    function isSpecialXmlProperty(propertyName, options) {
        return [XML_ATTRKEY, options.xmlCharKey].includes(propertyName);
    }
    function deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {
        var _a;
        if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
            mapper = getPolymorphicMapper(serializer, mapper, responseBody, "serializedName");
        }
        var modelProps = resolveModelProperties(serializer, mapper, objectName);
        var instance = {};
        var handledPropertyNames = [];
        for (var _i = 0, _b = Object.keys(modelProps); _i < _b.length; _i++) {
            var key = _b[_i];
            var propertyMapper = modelProps[key];
            var paths = splitSerializeName(modelProps[key].serializedName);
            handledPropertyNames.push(paths[0]);
            var serializedName = propertyMapper.serializedName, xmlName = propertyMapper.xmlName, xmlElementName = propertyMapper.xmlElementName;
            var propertyObjectName = objectName;
            if (serializedName !== "" && serializedName !== undefined) {
                propertyObjectName = objectName + "." + serializedName;
            }
            var headerCollectionPrefix = propertyMapper.headerCollectionPrefix;
            if (headerCollectionPrefix) {
                var dictionary = {};
                for (var _c = 0, _d = Object.keys(responseBody); _c < _d.length; _c++) {
                    var headerKey = _d[_c];
                    if (headerKey.startsWith(headerCollectionPrefix)) {
                        dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);
                    }
                    handledPropertyNames.push(headerKey);
                }
                instance[key] = dictionary;
            }
            else if (serializer.isXML) {
                if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {
                    instance[key] = serializer.deserialize(propertyMapper, responseBody[XML_ATTRKEY][xmlName], propertyObjectName, options);
                }
                else {
                    var propertyName = xmlElementName || xmlName || serializedName;
                    if (propertyMapper.xmlIsWrapped) {
                        /* a list of <xmlElementName> wrapped by <xmlName>
                          For the xml example below
                            <Cors>
                              <CorsRule>...</CorsRule>
                              <CorsRule>...</CorsRule>
                            </Cors>
                          the responseBody has
                            {
                              Cors: {
                                CorsRule: [{...}, {...}]
                              }
                            }
                          xmlName is "Cors" and xmlElementName is"CorsRule".
                        */
                        var wrapped = responseBody[xmlName];
                        var elementList = (_a = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _a !== void 0 ? _a : [];
                        instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);
                    }
                    else {
                        var property = responseBody[propertyName];
                        instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);
                    }
                }
            }
            else {
                // deserialize the property if it is present in the provided responseBody instance
                var propertyInstance = void 0;
                var res = responseBody;
                // traversing the object step by step.
                for (var _e = 0, paths_2 = paths; _e < paths_2.length; _e++) {
                    var item = paths_2[_e];
                    if (!res)
                        break;
                    res = res[item];
                }
                propertyInstance = res;
                var polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;
                // checking that the model property name (key)(ex: "fishtype") and the
                // clientName of the polymorphicDiscriminator {metadata} (ex: "fishtype")
                // instead of the serializedName of the polymorphicDiscriminator (ex: "fish.type")
                // is a better approach. The generator is not consistent with escaping '\.' in the
                // serializedName of the property (ex: "fish\.type") that is marked as polymorphic discriminator
                // and the serializedName of the metadata polymorphicDiscriminator (ex: "fish.type"). However,
                // the clientName transformation of the polymorphicDiscriminator (ex: "fishtype") and
                // the transformation of model property name (ex: "fishtype") is done consistently.
                // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.
                if (polymorphicDiscriminator &&
                    key === polymorphicDiscriminator.clientName &&
                    propertyInstance == undefined) {
                    propertyInstance = mapper.serializedName;
                }
                var serializedValue = void 0;
                // paging
                if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === "") {
                    propertyInstance = responseBody[key];
                    instance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
                }
                else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {
                    serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
                    instance[key] = serializedValue;
                }
            }
        }
        var additionalPropertiesMapper = mapper.type.additionalProperties;
        if (additionalPropertiesMapper) {
            var isAdditionalProperty = function (responsePropName) {
                for (var clientPropName in modelProps) {
                    var paths = splitSerializeName(modelProps[clientPropName].serializedName);
                    if (paths[0] === responsePropName) {
                        return false;
                    }
                }
                return true;
            };
            for (var responsePropName in responseBody) {
                if (isAdditionalProperty(responsePropName)) {
                    instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '["' + responsePropName + '"]', options);
                }
            }
        }
        else if (responseBody) {
            for (var _f = 0, _g = Object.keys(responseBody); _f < _g.length; _f++) {
                var key = _g[_f];
                if (instance[key] === undefined &&
                    !handledPropertyNames.includes(key) &&
                    !isSpecialXmlProperty(key, options)) {
                    instance[key] = responseBody[key];
                }
            }
        }
        return instance;
    }
    function deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {
        var value = mapper.type.value;
        if (!value || typeof value !== "object") {
            throw new Error("\"value\" metadata for a Dictionary must be defined in the " +
                ("mapper and it must of type \"object\" in " + objectName));
        }
        if (responseBody) {
            var tempDictionary = {};
            for (var _i = 0, _a = Object.keys(responseBody); _i < _a.length; _i++) {
                var key = _a[_i];
                tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);
            }
            return tempDictionary;
        }
        return responseBody;
    }
    function deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {
        var element = mapper.type.element;
        if (!element || typeof element !== "object") {
            throw new Error("element\" metadata for an Array must be defined in the " +
                ("mapper and it must of type \"object\" in " + objectName));
        }
        if (responseBody) {
            if (!Array.isArray(responseBody)) {
                // xml2js will interpret a single element array as just the element, so force it to be an array
                responseBody = [responseBody];
            }
            var tempArray = [];
            for (var i = 0; i < responseBody.length; i++) {
                tempArray[i] = serializer.deserialize(element, responseBody[i], objectName + "[" + i + "]", options);
            }
            return tempArray;
        }
        return responseBody;
    }
    function getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {
        var polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
        if (polymorphicDiscriminator) {
            var discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];
            if (discriminatorName != undefined) {
                var discriminatorValue = object[discriminatorName];
                if (discriminatorValue != undefined) {
                    var typeName = mapper.type.uberParent || mapper.type.className;
                    var indexDiscriminator = discriminatorValue === typeName
                        ? discriminatorValue
                        : typeName + "." + discriminatorValue;
                    var polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];
                    if (polymorphicMapper) {
                        mapper = polymorphicMapper;
                    }
                }
            }
        }
        return mapper;
    }
    function getPolymorphicDiscriminatorRecursively(serializer, mapper) {
        return (mapper.type.polymorphicDiscriminator ||
            getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||
            getPolymorphicDiscriminatorSafely(serializer, mapper.type.className));
    }
    function getPolymorphicDiscriminatorSafely(serializer, typeName) {
        return (typeName &&
            serializer.modelMappers[typeName] &&
            serializer.modelMappers[typeName].type.polymorphicDiscriminator);
    }
    /**
     * Utility function to create a K:V from a list of strings
     */
    function strEnum(o) {
        var result = {};
        for (var _i = 0, o_1 = o; _i < o_1.length; _i++) {
            var key = o_1[_i];
            result[key] = key;
        }
        return result;
    }
    // eslint-disable-next-line @typescript-eslint/no-redeclare
    var MapperType = strEnum([
        "Base64Url",
        "Boolean",
        "ByteArray",
        "Composite",
        "Date",
        "DateTime",
        "DateTimeRfc1123",
        "Dictionary",
        "Enum",
        "Number",
        "Object",
        "Sequence",
        "String",
        "Stream",
        "TimeSpan",
        "UnixTime"
    ]);

    // Copyright (c) Microsoft Corporation.
    function isWebResourceLike(object) {
        if (object && typeof object === "object") {
            var castObject = object;
            if (typeof castObject.url === "string" &&
                typeof castObject.method === "string" &&
                typeof castObject.headers === "object" &&
                isHttpHeadersLike(castObject.headers) &&
                typeof castObject.validateRequestProperties === "function" &&
                typeof castObject.prepare === "function" &&
                typeof castObject.clone === "function") {
                return true;
            }
        }
        return false;
    }
    /**
     * Creates a new WebResource object.
     *
     * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary
     * properties to initiate a request.
     */
    var WebResource = /** @class */ (function () {
        function WebResource(url, method, body, query, headers, streamResponseBody, withCredentials, abortSignal, timeout, onUploadProgress, onDownloadProgress, proxySettings, keepAlive, decompressResponse, streamResponseStatusCodes) {
            this.streamResponseBody = streamResponseBody;
            this.streamResponseStatusCodes = streamResponseStatusCodes;
            this.url = url || "";
            this.method = method || "GET";
            this.headers = isHttpHeadersLike(headers) ? headers : new HttpHeaders(headers);
            this.body = body;
            this.query = query;
            this.formData = undefined;
            this.withCredentials = withCredentials || false;
            this.abortSignal = abortSignal;
            this.timeout = timeout || 0;
            this.onUploadProgress = onUploadProgress;
            this.onDownloadProgress = onDownloadProgress;
            this.proxySettings = proxySettings;
            this.keepAlive = keepAlive;
            this.decompressResponse = decompressResponse;
            this.requestId = this.headers.get("x-ms-client-request-id") || generateUuid();
        }
        /**
         * Validates that the required properties such as method, url, headers["Content-Type"],
         * headers["accept-language"] are defined. It will throw an error if one of the above
         * mentioned properties are not defined.
         */
        WebResource.prototype.validateRequestProperties = function () {
            if (!this.method) {
                throw new Error("WebResource.method is required.");
            }
            if (!this.url) {
                throw new Error("WebResource.url is required.");
            }
        };
        /**
         * Prepares the request.
         * @param options - Options to provide for preparing the request.
         * @returns Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.
         */
        WebResource.prototype.prepare = function (options) {
            if (!options) {
                throw new Error("options object is required");
            }
            if (options.method === undefined ||
                options.method === null ||
                typeof options.method.valueOf() !== "string") {
                throw new Error("options.method must be a string.");
            }
            if (options.url && options.pathTemplate) {
                throw new Error("options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.");
            }
            if ((options.pathTemplate === undefined ||
                options.pathTemplate === null ||
                typeof options.pathTemplate.valueOf() !== "string") &&
                (options.url === undefined ||
                    options.url === null ||
                    typeof options.url.valueOf() !== "string")) {
                throw new Error("Please provide exactly one of options.pathTemplate or options.url.");
            }
            // set the url if it is provided.
            if (options.url) {
                if (typeof options.url !== "string") {
                    throw new Error('options.url must be of type "string".');
                }
                this.url = options.url;
            }
            // set the method
            if (options.method) {
                var validMethods = ["GET", "PUT", "HEAD", "DELETE", "OPTIONS", "POST", "PATCH", "TRACE"];
                if (validMethods.indexOf(options.method.toUpperCase()) === -1) {
                    throw new Error('The provided method "' +
                        options.method +
                        '" is invalid. Supported HTTP methods are: ' +
                        JSON.stringify(validMethods));
                }
            }
            this.method = options.method.toUpperCase();
            // construct the url if path template is provided
            if (options.pathTemplate) {
                var pathTemplate_1 = options.pathTemplate, pathParameters_1 = options.pathParameters;
                if (typeof pathTemplate_1 !== "string") {
                    throw new Error('options.pathTemplate must be of type "string".');
                }
                if (!options.baseUrl) {
                    options.baseUrl = "https://management.azure.com";
                }
                var baseUrl = options.baseUrl;
                var url_1 = baseUrl +
                    (baseUrl.endsWith("/") ? "" : "/") +
                    (pathTemplate_1.startsWith("/") ? pathTemplate_1.slice(1) : pathTemplate_1);
                var segments = url_1.match(/({[\w-]*\s*[\w-]*})/gi);
                if (segments && segments.length) {
                    if (!pathParameters_1) {
                        throw new Error("pathTemplate: " + pathTemplate_1 + " has been provided. Hence, options.pathParameters must also be provided.");
                    }
                    segments.forEach(function (item) {
                        var pathParamName = item.slice(1, -1);
                        var pathParam = pathParameters_1[pathParamName];
                        if (pathParam === null ||
                            pathParam === undefined ||
                            !(typeof pathParam === "string" || typeof pathParam === "object")) {
                            var stringifiedPathParameters = JSON.stringify(pathParameters_1, undefined, 2);
                            throw new Error("pathTemplate: " + pathTemplate_1 + " contains the path parameter " + pathParamName +
                                (" however, it is not present in parameters: " + stringifiedPathParameters + ".") +
                                ("The value of the path parameter can either be a \"string\" of the form { " + pathParamName + ": \"some sample value\" } or ") +
                                ("it can be an \"object\" of the form { \"" + pathParamName + "\": { value: \"some sample value\", skipUrlEncoding: true } }."));
                        }
                        if (typeof pathParam.valueOf() === "string") {
                            url_1 = url_1.replace(item, encodeURIComponent(pathParam));
                        }
                        if (typeof pathParam.valueOf() === "object") {
                            if (!pathParam.value) {
                                throw new Error("options.pathParameters[" + pathParamName + "] is of type \"object\" but it does not contain a \"value\" property.");
                            }
                            if (pathParam.skipUrlEncoding) {
                                url_1 = url_1.replace(item, pathParam.value);
                            }
                            else {
                                url_1 = url_1.replace(item, encodeURIComponent(pathParam.value));
                            }
                        }
                    });
                }
                this.url = url_1;
            }
            // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.
            if (options.queryParameters) {
                var queryParameters = options.queryParameters;
                if (typeof queryParameters !== "object") {
                    throw new Error("options.queryParameters must be of type object. It should be a JSON object " +
                        "of \"query-parameter-name\" as the key and the \"query-parameter-value\" as the value. " +
                        "The \"query-parameter-value\" may be fo type \"string\" or an \"object\" of the form { value: \"query-parameter-value\", skipUrlEncoding: true }.");
                }
                // append question mark if it is not present in the url
                if (this.url && this.url.indexOf("?") === -1) {
                    this.url += "?";
                }
                // construct queryString
                var queryParams = [];
                // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().
                this.query = {};
                for (var queryParamName in queryParameters) {
                    var queryParam = queryParameters[queryParamName];
                    if (queryParam) {
                        if (typeof queryParam === "string") {
                            queryParams.push(queryParamName + "=" + encodeURIComponent(queryParam));
                            this.query[queryParamName] = encodeURIComponent(queryParam);
                        }
                        else if (typeof queryParam === "object") {
                            if (!queryParam.value) {
                                throw new Error("options.queryParameters[" + queryParamName + "] is of type \"object\" but it does not contain a \"value\" property.");
                            }
                            if (queryParam.skipUrlEncoding) {
                                queryParams.push(queryParamName + "=" + queryParam.value);
                                this.query[queryParamName] = queryParam.value;
                            }
                            else {
                                queryParams.push(queryParamName + "=" + encodeURIComponent(queryParam.value));
                                this.query[queryParamName] = encodeURIComponent(queryParam.value);
                            }
                        }
                    }
                } // end-of-for
                // append the queryString
                this.url += queryParams.join("&");
            }
            // add headers to the request if they are provided
            if (options.headers) {
                var headers = options.headers;
                for (var _i = 0, _a = Object.keys(options.headers); _i < _a.length; _i++) {
                    var headerName = _a[_i];
                    this.headers.set(headerName, headers[headerName]);
                }
            }
            // ensure accept-language is set correctly
            if (!this.headers.get("accept-language")) {
                this.headers.set("accept-language", "en-US");
            }
            // ensure the request-id is set correctly
            if (!this.headers.get("x-ms-client-request-id") && !options.disableClientRequestId) {
                this.headers.set("x-ms-client-request-id", this.requestId);
            }
            // default
            if (!this.headers.get("Content-Type")) {
                this.headers.set("Content-Type", "application/json; charset=utf-8");
            }
            // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicitly
            this.body = options.body;
            if (options.body !== undefined && options.body !== null) {
                // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.
                if (options.bodyIsStream) {
                    if (!this.headers.get("Transfer-Encoding")) {
                        this.headers.set("Transfer-Encoding", "chunked");
                    }
                    if (this.headers.get("Content-Type") !== "application/octet-stream") {
                        this.headers.set("Content-Type", "application/octet-stream");
                    }
                }
                else {
                    if (options.serializationMapper) {
                        this.body = new Serializer(options.mappers).serialize(options.serializationMapper, options.body, "requestBody");
                    }
                    if (!options.disableJsonStringifyOnBody) {
                        this.body = JSON.stringify(options.body);
                    }
                }
            }
            if (options.spanOptions) {
                this.spanOptions = options.spanOptions;
            }
            this.abortSignal = options.abortSignal;
            this.onDownloadProgress = options.onDownloadProgress;
            this.onUploadProgress = options.onUploadProgress;
            return this;
        };
        /**
         * Clone this WebResource HTTP request object.
         * @returns The clone of this WebResource HTTP request object.
         */
        WebResource.prototype.clone = function () {
            var result = new WebResource(this.url, this.method, this.body, this.query, this.headers && this.headers.clone(), this.streamResponseBody, this.withCredentials, this.abortSignal, this.timeout, this.onUploadProgress, this.onDownloadProgress, this.proxySettings, this.keepAlive, this.decompressResponse, this.streamResponseStatusCodes);
            if (this.formData) {
                result.formData = this.formData;
            }
            if (this.operationSpec) {
                result.operationSpec = this.operationSpec;
            }
            if (this.shouldDeserialize) {
                result.shouldDeserialize = this.shouldDeserialize;
            }
            if (this.operationResponseGetter) {
                result.operationResponseGetter = this.operationResponseGetter;
            }
            return result;
        };
        return WebResource;
    }());

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    var listenersMap = new WeakMap();
    var abortedMap = new WeakMap();
    /**
     * An aborter instance implements AbortSignal interface, can abort HTTP requests.
     *
     * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.
     * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation
     * cannot or will not ever be cancelled.
     *
     * @example
     * Abort without timeout
     * ```ts
     * await doAsyncWork(AbortSignal.none);
     * ```
     */
    var AbortSignal = /** @class */ (function () {
        function AbortSignal() {
            /**
             * onabort event listener.
             */
            this.onabort = null;
            listenersMap.set(this, []);
            abortedMap.set(this, false);
        }
        Object.defineProperty(AbortSignal.prototype, "aborted", {
            /**
             * Status of whether aborted or not.
             *
             * @readonly
             */
            get: function () {
                if (!abortedMap.has(this)) {
                    throw new TypeError("Expected `this` to be an instance of AbortSignal.");
                }
                return abortedMap.get(this);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbortSignal, "none", {
            /**
             * Creates a new AbortSignal instance that will never be aborted.
             *
             * @readonly
             */
            get: function () {
                return new AbortSignal();
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Added new "abort" event listener, only support "abort" event.
         *
         * @param _type - Only support "abort" event
         * @param listener - The listener to be added
         */
        AbortSignal.prototype.addEventListener = function (
        // tslint:disable-next-line:variable-name
        _type, listener) {
            if (!listenersMap.has(this)) {
                throw new TypeError("Expected `this` to be an instance of AbortSignal.");
            }
            var listeners = listenersMap.get(this);
            listeners.push(listener);
        };
        /**
         * Remove "abort" event listener, only support "abort" event.
         *
         * @param _type - Only support "abort" event
         * @param listener - The listener to be removed
         */
        AbortSignal.prototype.removeEventListener = function (
        // tslint:disable-next-line:variable-name
        _type, listener) {
            if (!listenersMap.has(this)) {
                throw new TypeError("Expected `this` to be an instance of AbortSignal.");
            }
            var listeners = listenersMap.get(this);
            var index = listeners.indexOf(listener);
            if (index > -1) {
                listeners.splice(index, 1);
            }
        };
        /**
         * Dispatches a synthetic event to the AbortSignal.
         */
        AbortSignal.prototype.dispatchEvent = function (_event) {
            throw new Error("This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.");
        };
        return AbortSignal;
    }());
    /**
     * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.
     * Will try to trigger abort event for all linked AbortSignal nodes.
     *
     * - If there is a timeout, the timer will be cancelled.
     * - If aborted is true, nothing will happen.
     *
     * @internal
     */
    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters
    function abortSignal(signal) {
        if (signal.aborted) {
            return;
        }
        if (signal.onabort) {
            signal.onabort.call(signal);
        }
        var listeners = listenersMap.get(signal);
        if (listeners) {
            // Create a copy of listeners so mutations to the array
            // (e.g. via removeListener calls) don't affect the listeners
            // we invoke.
            listeners.slice().forEach(function (listener) {
                listener.call(signal, { type: "abort" });
            });
        }
        abortedMap.set(signal, true);
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * This error is thrown when an asynchronous operation has been aborted.
     * Check for this error by testing the `name` that the name property of the
     * error matches `"AbortError"`.
     *
     * @example
     * ```ts
     * const controller = new AbortController();
     * controller.abort();
     * try {
     *   doAsyncWork(controller.signal)
     * } catch (e) {
     *   if (e.name === 'AbortError') {
     *     // handle abort error here.
     *   }
     * }
     * ```
     */
    var AbortError = /** @class */ (function (_super) {
        __extends(AbortError, _super);
        function AbortError(message) {
            var _this = _super.call(this, message) || this;
            _this.name = "AbortError";
            return _this;
        }
        return AbortError;
    }(Error));
    /**
     * An AbortController provides an AbortSignal and the associated controls to signal
     * that an asynchronous operation should be aborted.
     *
     * @example
     * Abort an operation when another event fires
     * ```ts
     * const controller = new AbortController();
     * const signal = controller.signal;
     * doAsyncWork(signal);
     * button.addEventListener('click', () => controller.abort());
     * ```
     *
     * @example
     * Share aborter cross multiple operations in 30s
     * ```ts
     * // Upload the same data to 2 different data centers at the same time,
     * // abort another when any of them is finished
     * const controller = AbortController.withTimeout(30 * 1000);
     * doAsyncWork(controller.signal).then(controller.abort);
     * doAsyncWork(controller.signal).then(controller.abort);
     *```
     *
     * @example
     * Cascaded aborting
     * ```ts
     * // All operations can't take more than 30 seconds
     * const aborter = Aborter.timeout(30 * 1000);
     *
     * // Following 2 operations can't take more than 25 seconds
     * await doAsyncWork(aborter.withTimeout(25 * 1000));
     * await doAsyncWork(aborter.withTimeout(25 * 1000));
     * ```
     */
    var AbortController = /** @class */ (function () {
        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
        function AbortController(parentSignals) {
            var _this = this;
            this._signal = new AbortSignal();
            if (!parentSignals) {
                return;
            }
            // coerce parentSignals into an array
            if (!Array.isArray(parentSignals)) {
                // eslint-disable-next-line prefer-rest-params
                parentSignals = arguments;
            }
            for (var _i = 0, parentSignals_1 = parentSignals; _i < parentSignals_1.length; _i++) {
                var parentSignal = parentSignals_1[_i];
                // if the parent signal has already had abort() called,
                // then call abort on this signal as well.
                if (parentSignal.aborted) {
                    this.abort();
                }
                else {
                    // when the parent signal aborts, this signal should as well.
                    parentSignal.addEventListener("abort", function () {
                        _this.abort();
                    });
                }
            }
        }
        Object.defineProperty(AbortController.prototype, "signal", {
            /**
             * The AbortSignal associated with this controller that will signal aborted
             * when the abort method is called on this controller.
             *
             * @readonly
             */
            get: function () {
                return this._signal;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Signal that any operations passed this controller's associated abort signal
         * to cancel any remaining work and throw an `AbortError`.
         */
        AbortController.prototype.abort = function () {
            abortSignal(this._signal);
        };
        /**
         * Creates a new AbortSignal instance that will abort after the provided ms.
         * @param ms - Elapsed time in milliseconds to trigger an abort.
         */
        AbortController.timeout = function (ms) {
            var signal = new AbortSignal();
            var timer = setTimeout(abortSignal, ms, signal);
            // Prevent the active Timer from keeping the Node.js event loop active.
            if (typeof timer.unref === "function") {
                timer.unref();
            }
            return signal;
        };
        return AbortController;
    }());

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    var custom = {};

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    var url = URL;

    // Copyright (c) Microsoft Corporation.
    /**
     * A class that handles the query portion of a URLBuilder.
     */
    var URLQuery = /** @class */ (function () {
        function URLQuery() {
            this._rawQuery = {};
        }
        /**
         * Get whether or not there any query parameters in this URLQuery.
         */
        URLQuery.prototype.any = function () {
            return Object.keys(this._rawQuery).length > 0;
        };
        /**
         * Get the keys of the query string.
         */
        URLQuery.prototype.keys = function () {
            return Object.keys(this._rawQuery);
        };
        /**
         * Set a query parameter with the provided name and value. If the parameterValue is undefined or
         * empty, then this will attempt to remove an existing query parameter with the provided
         * parameterName.
         */
        URLQuery.prototype.set = function (parameterName, parameterValue) {
            var caseParameterValue = parameterValue;
            if (parameterName) {
                if (caseParameterValue !== undefined && caseParameterValue !== null) {
                    var newValue = Array.isArray(caseParameterValue)
                        ? caseParameterValue
                        : caseParameterValue.toString();
                    this._rawQuery[parameterName] = newValue;
                }
                else {
                    delete this._rawQuery[parameterName];
                }
            }
        };
        /**
         * Get the value of the query parameter with the provided name. If no parameter exists with the
         * provided parameter name, then undefined will be returned.
         */
        URLQuery.prototype.get = function (parameterName) {
            return parameterName ? this._rawQuery[parameterName] : undefined;
        };
        /**
         * Get the string representation of this query. The return value will not start with a "?".
         */
        URLQuery.prototype.toString = function () {
            var result = "";
            for (var parameterName in this._rawQuery) {
                if (result) {
                    result += "&";
                }
                var parameterValue = this._rawQuery[parameterName];
                if (Array.isArray(parameterValue)) {
                    var parameterStrings = [];
                    for (var _i = 0, parameterValue_1 = parameterValue; _i < parameterValue_1.length; _i++) {
                        var parameterValueElement = parameterValue_1[_i];
                        parameterStrings.push(parameterName + "=" + parameterValueElement);
                    }
                    result += parameterStrings.join("&");
                }
                else {
                    result += parameterName + "=" + parameterValue;
                }
            }
            return result;
        };
        /**
         * Parse a URLQuery from the provided text.
         */
        URLQuery.parse = function (text) {
            var result = new URLQuery();
            if (text) {
                if (text.startsWith("?")) {
                    text = text.substring(1);
                }
                var currentState = "ParameterName";
                var parameterName = "";
                var parameterValue = "";
                for (var i = 0; i < text.length; ++i) {
                    var currentCharacter = text[i];
                    switch (currentState) {
                        case "ParameterName":
                            switch (currentCharacter) {
                                case "=":
                                    currentState = "ParameterValue";
                                    break;
                                case "&":
                                    parameterName = "";
                                    parameterValue = "";
                                    break;
                                default:
                                    parameterName += currentCharacter;
                                    break;
                            }
                            break;
                        case "ParameterValue":
                            switch (currentCharacter) {
                                case "&":
                                    result.set(parameterName, parameterValue);
                                    parameterName = "";
                                    parameterValue = "";
                                    currentState = "ParameterName";
                                    break;
                                default:
                                    parameterValue += currentCharacter;
                                    break;
                            }
                            break;
                        default:
                            throw new Error("Unrecognized URLQuery parse state: " + currentState);
                    }
                }
                if (currentState === "ParameterValue") {
                    result.set(parameterName, parameterValue);
                }
            }
            return result;
        };
        return URLQuery;
    }());
    /**
     * A class that handles creating, modifying, and parsing URLs.
     */
    var URLBuilder = /** @class */ (function () {
        function URLBuilder() {
        }
        /**
         * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL
         * (such as a host, port, path, or query), those parts will be added to this URL as well.
         */
        URLBuilder.prototype.setScheme = function (scheme) {
            if (!scheme) {
                this._scheme = undefined;
            }
            else {
                this.set(scheme, "SCHEME");
            }
        };
        /**
         * Get the scheme that has been set in this URL.
         */
        URLBuilder.prototype.getScheme = function () {
            return this._scheme;
        };
        /**
         * Set the host for this URL. If the provided host contains other parts of a URL (such as a
         * port, path, or query), those parts will be added to this URL as well.
         */
        URLBuilder.prototype.setHost = function (host) {
            if (!host) {
                this._host = undefined;
            }
            else {
                this.set(host, "SCHEME_OR_HOST");
            }
        };
        /**
         * Get the host that has been set in this URL.
         */
        URLBuilder.prototype.getHost = function () {
            return this._host;
        };
        /**
         * Set the port for this URL. If the provided port contains other parts of a URL (such as a
         * path or query), those parts will be added to this URL as well.
         */
        URLBuilder.prototype.setPort = function (port) {
            if (port === undefined || port === null || port === "") {
                this._port = undefined;
            }
            else {
                this.set(port.toString(), "PORT");
            }
        };
        /**
         * Get the port that has been set in this URL.
         */
        URLBuilder.prototype.getPort = function () {
            return this._port;
        };
        /**
         * Set the path for this URL. If the provided path contains a query, then it will be added to
         * this URL as well.
         */
        URLBuilder.prototype.setPath = function (path) {
            if (!path) {
                this._path = undefined;
            }
            else {
                var schemeIndex = path.indexOf("://");
                if (schemeIndex !== -1) {
                    var schemeStart = path.lastIndexOf("/", schemeIndex);
                    // Make sure to only grab the URL part of the path before setting the state back to SCHEME
                    // this will handle cases such as "/a/b/c/https://microsoft.com" => "https://microsoft.com"
                    this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), "SCHEME");
                }
                else {
                    this.set(path, "PATH");
                }
            }
        };
        /**
         * Append the provided path to this URL's existing path. If the provided path contains a query,
         * then it will be added to this URL as well.
         */
        URLBuilder.prototype.appendPath = function (path) {
            if (path) {
                var currentPath = this.getPath();
                if (currentPath) {
                    if (!currentPath.endsWith("/")) {
                        currentPath += "/";
                    }
                    if (path.startsWith("/")) {
                        path = path.substring(1);
                    }
                    path = currentPath + path;
                }
                this.set(path, "PATH");
            }
        };
        /**
         * Get the path that has been set in this URL.
         */
        URLBuilder.prototype.getPath = function () {
            return this._path;
        };
        /**
         * Set the query in this URL.
         */
        URLBuilder.prototype.setQuery = function (query) {
            if (!query) {
                this._query = undefined;
            }
            else {
                this._query = URLQuery.parse(query);
            }
        };
        /**
         * Set a query parameter with the provided name and value in this URL's query. If the provided
         * query parameter value is undefined or empty, then the query parameter will be removed if it
         * existed.
         */
        URLBuilder.prototype.setQueryParameter = function (queryParameterName, queryParameterValue) {
            if (queryParameterName) {
                if (!this._query) {
                    this._query = new URLQuery();
                }
                this._query.set(queryParameterName, queryParameterValue);
            }
        };
        /**
         * Get the value of the query parameter with the provided query parameter name. If no query
         * parameter exists with the provided name, then undefined will be returned.
         */
        URLBuilder.prototype.getQueryParameterValue = function (queryParameterName) {
            return this._query ? this._query.get(queryParameterName) : undefined;
        };
        /**
         * Get the query in this URL.
         */
        URLBuilder.prototype.getQuery = function () {
            return this._query ? this._query.toString() : undefined;
        };
        /**
         * Set the parts of this URL by parsing the provided text using the provided startState.
         */
        URLBuilder.prototype.set = function (text, startState) {
            var tokenizer = new URLTokenizer(text, startState);
            while (tokenizer.next()) {
                var token = tokenizer.current();
                var tokenPath = void 0;
                if (token) {
                    switch (token.type) {
                        case "SCHEME":
                            this._scheme = token.text || undefined;
                            break;
                        case "HOST":
                            this._host = token.text || undefined;
                            break;
                        case "PORT":
                            this._port = token.text || undefined;
                            break;
                        case "PATH":
                            tokenPath = token.text || undefined;
                            if (!this._path || this._path === "/" || tokenPath !== "/") {
                                this._path = tokenPath;
                            }
                            break;
                        case "QUERY":
                            this._query = URLQuery.parse(token.text);
                            break;
                        default:
                            throw new Error("Unrecognized URLTokenType: " + token.type);
                    }
                }
            }
        };
        URLBuilder.prototype.toString = function () {
            var result = "";
            if (this._scheme) {
                result += this._scheme + "://";
            }
            if (this._host) {
                result += this._host;
            }
            if (this._port) {
                result += ":" + this._port;
            }
            if (this._path) {
                if (!this._path.startsWith("/")) {
                    result += "/";
                }
                result += this._path;
            }
            if (this._query && this._query.any()) {
                result += "?" + this._query.toString();
            }
            return result;
        };
        /**
         * If the provided searchValue is found in this URLBuilder, then replace it with the provided
         * replaceValue.
         */
        URLBuilder.prototype.replaceAll = function (searchValue, replaceValue) {
            if (searchValue) {
                this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));
                this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));
                this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));
                this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));
                this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));
            }
        };
        URLBuilder.parse = function (text) {
            var result = new URLBuilder();
            result.set(text, "SCHEME_OR_HOST");
            return result;
        };
        return URLBuilder;
    }());
    var URLToken = /** @class */ (function () {
        function URLToken(text, type) {
            this.text = text;
            this.type = type;
        }
        URLToken.scheme = function (text) {
            return new URLToken(text, "SCHEME");
        };
        URLToken.host = function (text) {
            return new URLToken(text, "HOST");
        };
        URLToken.port = function (text) {
            return new URLToken(text, "PORT");
        };
        URLToken.path = function (text) {
            return new URLToken(text, "PATH");
        };
        URLToken.query = function (text) {
            return new URLToken(text, "QUERY");
        };
        return URLToken;
    }());
    /**
     * Get whether or not the provided character (single character string) is an alphanumeric (letter or
     * digit) character.
     */
    function isAlphaNumericCharacter(character) {
        var characterCode = character.charCodeAt(0);
        return ((48 /* '0' */ <= characterCode && characterCode <= 57) /* '9' */ ||
            (65 /* 'A' */ <= characterCode && characterCode <= 90) /* 'Z' */ ||
            (97 /* 'a' */ <= characterCode && characterCode <= 122) /* 'z' */);
    }
    /**
     * A class that tokenizes URL strings.
     */
    var URLTokenizer = /** @class */ (function () {
        function URLTokenizer(_text, state) {
            this._text = _text;
            this._textLength = _text ? _text.length : 0;
            this._currentState = state !== undefined && state !== null ? state : "SCHEME_OR_HOST";
            this._currentIndex = 0;
        }
        /**
         * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer
         * hasn't started or has finished tokenizing.
         */
        URLTokenizer.prototype.current = function () {
            return this._currentToken;
        };
        /**
         * Advance to the next URLToken and return whether or not a URLToken was found.
         */
        URLTokenizer.prototype.next = function () {
            if (!hasCurrentCharacter(this)) {
                this._currentToken = undefined;
            }
            else {
                switch (this._currentState) {
                    case "SCHEME":
                        nextScheme(this);
                        break;
                    case "SCHEME_OR_HOST":
                        nextSchemeOrHost(this);
                        break;
                    case "HOST":
                        nextHost(this);
                        break;
                    case "PORT":
                        nextPort(this);
                        break;
                    case "PATH":
                        nextPath(this);
                        break;
                    case "QUERY":
                        nextQuery(this);
                        break;
                    default:
                        throw new Error("Unrecognized URLTokenizerState: " + this._currentState);
                }
            }
            return !!this._currentToken;
        };
        return URLTokenizer;
    }());
    /**
     * Read the remaining characters from this Tokenizer's character stream.
     */
    function readRemaining(tokenizer) {
        var result = "";
        if (tokenizer._currentIndex < tokenizer._textLength) {
            result = tokenizer._text.substring(tokenizer._currentIndex);
            tokenizer._currentIndex = tokenizer._textLength;
        }
        return result;
    }
    /**
     * Whether or not this URLTokenizer has a current character.
     */
    function hasCurrentCharacter(tokenizer) {
        return tokenizer._currentIndex < tokenizer._textLength;
    }
    /**
     * Get the character in the text string at the current index.
     */
    function getCurrentCharacter(tokenizer) {
        return tokenizer._text[tokenizer._currentIndex];
    }
    /**
     * Advance to the character in text that is "step" characters ahead. If no step value is provided,
     * then step will default to 1.
     */
    function nextCharacter(tokenizer, step) {
        if (hasCurrentCharacter(tokenizer)) {
            if (!step) {
                step = 1;
            }
            tokenizer._currentIndex += step;
        }
    }
    /**
     * Starting with the current character, peek "charactersToPeek" number of characters ahead in this
     * Tokenizer's stream of characters.
     */
    function peekCharacters(tokenizer, charactersToPeek) {
        var endIndex = tokenizer._currentIndex + charactersToPeek;
        if (tokenizer._textLength < endIndex) {
            endIndex = tokenizer._textLength;
        }
        return tokenizer._text.substring(tokenizer._currentIndex, endIndex);
    }
    /**
     * Read characters from this Tokenizer until the end of the stream or until the provided condition
     * is false when provided the current character.
     */
    function readWhile(tokenizer, condition) {
        var result = "";
        while (hasCurrentCharacter(tokenizer)) {
            var currentCharacter = getCurrentCharacter(tokenizer);
            if (!condition(currentCharacter)) {
                break;
            }
            else {
                result += currentCharacter;
                nextCharacter(tokenizer);
            }
        }
        return result;
    }
    /**
     * Read characters from this Tokenizer until a non-alphanumeric character or the end of the
     * character stream is reached.
     */
    function readWhileLetterOrDigit(tokenizer) {
        return readWhile(tokenizer, function (character) { return isAlphaNumericCharacter(character); });
    }
    /**
     * Read characters from this Tokenizer until one of the provided terminating characters is read or
     * the end of the character stream is reached.
     */
    function readUntilCharacter(tokenizer) {
        var terminatingCharacters = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            terminatingCharacters[_i - 1] = arguments[_i];
        }
        return readWhile(tokenizer, function (character) { return terminatingCharacters.indexOf(character) === -1; });
    }
    function nextScheme(tokenizer) {
        var scheme = readWhileLetterOrDigit(tokenizer);
        tokenizer._currentToken = URLToken.scheme(scheme);
        if (!hasCurrentCharacter(tokenizer)) {
            tokenizer._currentState = "DONE";
        }
        else {
            tokenizer._currentState = "HOST";
        }
    }
    function nextSchemeOrHost(tokenizer) {
        var schemeOrHost = readUntilCharacter(tokenizer, ":", "/", "?");
        if (!hasCurrentCharacter(tokenizer)) {
            tokenizer._currentToken = URLToken.host(schemeOrHost);
            tokenizer._currentState = "DONE";
        }
        else if (getCurrentCharacter(tokenizer) === ":") {
            if (peekCharacters(tokenizer, 3) === "://") {
                tokenizer._currentToken = URLToken.scheme(schemeOrHost);
                tokenizer._currentState = "HOST";
            }
            else {
                tokenizer._currentToken = URLToken.host(schemeOrHost);
                tokenizer._currentState = "PORT";
            }
        }
        else {
            tokenizer._currentToken = URLToken.host(schemeOrHost);
            if (getCurrentCharacter(tokenizer) === "/") {
                tokenizer._currentState = "PATH";
            }
            else {
                tokenizer._currentState = "QUERY";
            }
        }
    }
    function nextHost(tokenizer) {
        if (peekCharacters(tokenizer, 3) === "://") {
            nextCharacter(tokenizer, 3);
        }
        var host = readUntilCharacter(tokenizer, ":", "/", "?");
        tokenizer._currentToken = URLToken.host(host);
        if (!hasCurrentCharacter(tokenizer)) {
            tokenizer._currentState = "DONE";
        }
        else if (getCurrentCharacter(tokenizer) === ":") {
            tokenizer._currentState = "PORT";
        }
        else if (getCurrentCharacter(tokenizer) === "/") {
            tokenizer._currentState = "PATH";
        }
        else {
            tokenizer._currentState = "QUERY";
        }
    }
    function nextPort(tokenizer) {
        if (getCurrentCharacter(tokenizer) === ":") {
            nextCharacter(tokenizer);
        }
        var port = readUntilCharacter(tokenizer, "/", "?");
        tokenizer._currentToken = URLToken.port(port);
        if (!hasCurrentCharacter(tokenizer)) {
            tokenizer._currentState = "DONE";
        }
        else if (getCurrentCharacter(tokenizer) === "/") {
            tokenizer._currentState = "PATH";
        }
        else {
            tokenizer._currentState = "QUERY";
        }
    }
    function nextPath(tokenizer) {
        var path = readUntilCharacter(tokenizer, "?");
        tokenizer._currentToken = URLToken.path(path);
        if (!hasCurrentCharacter(tokenizer)) {
            tokenizer._currentState = "DONE";
        }
        else {
            tokenizer._currentState = "QUERY";
        }
    }
    function nextQuery(tokenizer) {
        if (getCurrentCharacter(tokenizer) === "?") {
            nextCharacter(tokenizer);
        }
        var query = readRemaining(tokenizer);
        tokenizer._currentToken = URLToken.query(query);
        tokenizer._currentState = "DONE";
    }

    // Copyright (c) Microsoft Corporation.
    var RedactedString = "REDACTED";
    var defaultAllowedHeaderNames = [
        "x-ms-client-request-id",
        "x-ms-return-client-request-id",
        "x-ms-useragent",
        "x-ms-correlation-request-id",
        "x-ms-request-id",
        "client-request-id",
        "ms-cv",
        "return-client-request-id",
        "traceparent",
        "Access-Control-Allow-Credentials",
        "Access-Control-Allow-Headers",
        "Access-Control-Allow-Methods",
        "Access-Control-Allow-Origin",
        "Access-Control-Expose-Headers",
        "Access-Control-Max-Age",
        "Access-Control-Request-Headers",
        "Access-Control-Request-Method",
        "Origin",
        "Accept",
        "Cache-Control",
        "Connection",
        "Content-Length",
        "Content-Type",
        "Date",
        "ETag",
        "Expires",
        "If-Match",
        "If-Modified-Since",
        "If-None-Match",
        "If-Unmodified-Since",
        "Last-Modified",
        "Pragma",
        "Request-Id",
        "Retry-After",
        "Server",
        "Transfer-Encoding",
        "User-Agent"
    ];
    var defaultAllowedQueryParameters = ["api-version"];
    var Sanitizer = /** @class */ (function () {
        function Sanitizer(_a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.allowedHeaderNames, allowedHeaderNames = _c === void 0 ? [] : _c, _d = _b.allowedQueryParameters, allowedQueryParameters = _d === void 0 ? [] : _d;
            allowedHeaderNames = Array.isArray(allowedHeaderNames)
                ? defaultAllowedHeaderNames.concat(allowedHeaderNames)
                : defaultAllowedHeaderNames;
            allowedQueryParameters = Array.isArray(allowedQueryParameters)
                ? defaultAllowedQueryParameters.concat(allowedQueryParameters)
                : defaultAllowedQueryParameters;
            this.allowedHeaderNames = new Set(allowedHeaderNames.map(function (n) { return n.toLowerCase(); }));
            this.allowedQueryParameters = new Set(allowedQueryParameters.map(function (p) { return p.toLowerCase(); }));
        }
        Sanitizer.prototype.sanitize = function (obj) {
            return JSON.stringify(obj, this.replacer.bind(this), 2);
        };
        Sanitizer.prototype.replacer = function (key, value) {
            // Ensure Errors include their interesting non-enumerable members
            if (value instanceof Error) {
                return __assign(__assign({}, value), { name: value.name, message: value.message });
            }
            if (key === "_headersMap") {
                return this.sanitizeHeaders(key, value);
            }
            else if (key === "url") {
                return this.sanitizeUrl(value);
            }
            else if (key === "query") {
                return this.sanitizeQuery(value);
            }
            else if (key === "body") {
                // Don't log the request body
                return undefined;
            }
            else if (key === "response") {
                // Don't log response again
                return undefined;
            }
            else if (key === "operationSpec") {
                // When using sendOperationRequest, the request carries a massive
                // field with the autorest spec. No need to log it.
                return undefined;
            }
            return value;
        };
        Sanitizer.prototype.sanitizeHeaders = function (_, value) {
            return this.sanitizeObject(value, this.allowedHeaderNames, function (v, k) { return v[k].value; });
        };
        Sanitizer.prototype.sanitizeQuery = function (value) {
            return this.sanitizeObject(value, this.allowedQueryParameters, function (v, k) { return v[k]; });
        };
        Sanitizer.prototype.sanitizeObject = function (value, allowedKeys, accessor) {
            if (typeof value !== "object" || value === null) {
                return value;
            }
            var sanitized = {};
            for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {
                var k = _a[_i];
                if (allowedKeys.has(k.toLowerCase())) {
                    sanitized[k] = accessor(value, k);
                }
                else {
                    sanitized[k] = RedactedString;
                }
            }
            return sanitized;
        };
        Sanitizer.prototype.sanitizeUrl = function (value) {
            if (typeof value !== "string" || value === null) {
                return value;
            }
            var urlBuilder = URLBuilder.parse(value);
            var queryString = urlBuilder.getQuery();
            if (!queryString) {
                return value;
            }
            var query = URLQuery.parse(queryString);
            for (var _i = 0, _a = query.keys(); _i < _a.length; _i++) {
                var k = _a[_i];
                if (!this.allowedQueryParameters.has(k.toLowerCase())) {
                    query.set(k, RedactedString);
                }
            }
            urlBuilder.setQuery(query.toString());
            return urlBuilder.toString();
        };
        return Sanitizer;
    }());

    // Copyright (c) Microsoft Corporation.
    var errorSanitizer = new Sanitizer();
    var RestError = /** @class */ (function (_super) {
        __extends(RestError, _super);
        function RestError(message, code, statusCode, request, response) {
            var _this = _super.call(this, message) || this;
            _this.name = "RestError";
            _this.code = code;
            _this.statusCode = statusCode;
            _this.request = request;
            _this.response = response;
            Object.setPrototypeOf(_this, RestError.prototype);
            return _this;
        }
        /**
         * Logging method for util.inspect in Node
         */
        RestError.prototype[custom] = function () {
            return "RestError: " + this.message + " \n " + errorSanitizer.sanitize(this);
        };
        RestError.REQUEST_SEND_ERROR = "REQUEST_SEND_ERROR";
        RestError.PARSE_ERROR = "PARSE_ERROR";
        return RestError;
    }(Error));

    // Copyright (c) Microsoft Corporation.
    /**
     * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.
     */
    var XhrHttpClient = /** @class */ (function () {
        function XhrHttpClient() {
        }
        XhrHttpClient.prototype.sendRequest = function (request) {
            var _a;
            var xhr = new XMLHttpRequest();
            if (request.proxySettings) {
                throw new Error("HTTP proxy is not supported in browser environment");
            }
            var abortSignal = request.abortSignal;
            if (abortSignal) {
                if (abortSignal.aborted) {
                    return Promise.reject(new AbortError("The operation was aborted."));
                }
                var listener_1 = function () {
                    xhr.abort();
                };
                abortSignal.addEventListener("abort", listener_1);
                xhr.addEventListener("readystatechange", function () {
                    if (xhr.readyState === XMLHttpRequest.DONE) {
                        abortSignal.removeEventListener("abort", listener_1);
                    }
                });
            }
            addProgressListener(xhr.upload, request.onUploadProgress);
            addProgressListener(xhr, request.onDownloadProgress);
            if (request.formData) {
                var formData = request.formData;
                var requestForm_1 = new FormData();
                var appendFormValue = function (key, value) {
                    if (value &&
                        Object.prototype.hasOwnProperty.call(value, "value") &&
                        Object.prototype.hasOwnProperty.call(value, "options")) {
                        requestForm_1.append(key, value.value, value.options);
                    }
                    else {
                        requestForm_1.append(key, value);
                    }
                };
                for (var _i = 0, _b = Object.keys(formData); _i < _b.length; _i++) {
                    var formKey = _b[_i];
                    var formValue = formData[formKey];
                    if (Array.isArray(formValue)) {
                        for (var j = 0; j < formValue.length; j++) {
                            appendFormValue(formKey, formValue[j]);
                        }
                    }
                    else {
                        appendFormValue(formKey, formValue);
                    }
                }
                request.body = requestForm_1;
                request.formData = undefined;
                var contentType = request.headers.get("Content-Type");
                if (contentType && contentType.indexOf("multipart/form-data") !== -1) {
                    // browser will automatically apply a suitable content-type header
                    request.headers.remove("Content-Type");
                }
            }
            xhr.open(request.method, request.url);
            xhr.timeout = request.timeout;
            xhr.withCredentials = request.withCredentials;
            for (var _c = 0, _d = request.headers.headersArray(); _c < _d.length; _c++) {
                var header = _d[_c];
                xhr.setRequestHeader(header.name, header.value);
            }
            xhr.responseType =
                ((_a = request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.size) || request.streamResponseBody ? "blob" : "text";
            // tslint:disable-next-line:no-null-keyword
            xhr.send(request.body === undefined ? null : request.body);
            if (xhr.responseType === "blob") {
                return new Promise(function (resolve, reject) {
                    handleBlobResponse(xhr, request, resolve, reject);
                    rejectOnTerminalEvent(request, xhr, reject);
                });
            }
            else {
                return new Promise(function (resolve, reject) {
                    xhr.addEventListener("load", function () {
                        return resolve({
                            request: request,
                            status: xhr.status,
                            headers: parseHeaders(xhr),
                            bodyAsText: xhr.responseText
                        });
                    });
                    rejectOnTerminalEvent(request, xhr, reject);
                });
            }
        };
        return XhrHttpClient;
    }());
    function handleBlobResponse(xhr, request, res, rej) {
        xhr.addEventListener("readystatechange", function () {
            var _a;
            // Resolve as soon as headers are loaded
            if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {
                if (request.streamResponseBody || ((_a = request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(xhr.status))) {
                    var blobBody = new Promise(function (resolve, reject) {
                        xhr.addEventListener("load", function () {
                            resolve(xhr.response);
                        });
                        rejectOnTerminalEvent(request, xhr, reject);
                    });
                    res({
                        request: request,
                        status: xhr.status,
                        headers: parseHeaders(xhr),
                        blobBody: blobBody
                    });
                }
                else {
                    xhr.addEventListener("load", function () {
                        // xhr.response is of Blob type if the request is sent with xhr.responseType === "blob"
                        // but the status code is not one of the stream response status codes,
                        // so treat it as text and convert from Blob to text
                        if (xhr.response) {
                            // Blob.text() is not supported in IE so using FileReader instead
                            var reader_1 = new FileReader();
                            reader_1.onload = function (e) {
                                var _a;
                                var text = (_a = e.target) === null || _a === void 0 ? void 0 : _a.result;
                                res({
                                    request: request,
                                    status: xhr.status,
                                    headers: parseHeaders(xhr),
                                    bodyAsText: text
                                });
                            };
                            reader_1.onerror = function (_e) {
                                rej(reader_1.error);
                            };
                            reader_1.readAsText(xhr.response, "UTF-8");
                        }
                        else {
                            res({
                                request: request,
                                status: xhr.status,
                                headers: parseHeaders(xhr)
                            });
                        }
                    });
                }
            }
        });
    }
    function addProgressListener(xhr, listener) {
        if (listener) {
            xhr.addEventListener("progress", function (rawEvent) {
                return listener({
                    loadedBytes: rawEvent.loaded
                });
            });
        }
    }
    // exported locally for testing
    function parseHeaders(xhr) {
        var responseHeaders = new HttpHeaders();
        var headerLines = xhr
            .getAllResponseHeaders()
            .trim()
            .split(/[\r\n]+/);
        for (var _i = 0, headerLines_1 = headerLines; _i < headerLines_1.length; _i++) {
            var line = headerLines_1[_i];
            var index = line.indexOf(":");
            var headerName = line.slice(0, index);
            var headerValue = line.slice(index + 2);
            responseHeaders.set(headerName, headerValue);
        }
        return responseHeaders;
    }
    function rejectOnTerminalEvent(request, xhr, reject) {
        xhr.addEventListener("error", function () {
            return reject(new RestError("Failed to send request to " + request.url, RestError.REQUEST_SEND_ERROR, undefined, request));
        });
        var abortError = new AbortError("The operation was aborted.");
        xhr.addEventListener("abort", function () { return reject(abortError); });
        xhr.addEventListener("timeout", function () { return reject(abortError); });
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    /**
     * The different levels of logs that can be used with the HttpPipelineLogger.
     */
    var HttpPipelineLogLevel;
    (function (HttpPipelineLogLevel) {
        /**
         * A log level that indicates that no logs will be logged.
         */
        HttpPipelineLogLevel[HttpPipelineLogLevel["OFF"] = 0] = "OFF";
        /**
         * An error log.
         */
        HttpPipelineLogLevel[HttpPipelineLogLevel["ERROR"] = 1] = "ERROR";
        /**
         * A warning log.
         */
        HttpPipelineLogLevel[HttpPipelineLogLevel["WARNING"] = 2] = "WARNING";
        /**
         * An information log.
         */
        HttpPipelineLogLevel[HttpPipelineLogLevel["INFO"] = 3] = "INFO";
    })(HttpPipelineLogLevel || (HttpPipelineLogLevel = {}));

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    /**
     * Tests an object to determine whether it implements TokenCredential.
     *
     * @param credential - The assumed TokenCredential to be tested.
     */
    function isTokenCredential(credential) {
        // Check for an object with a 'getToken' function and possibly with
        // a 'signRequest' function.  We do this check to make sure that
        // a ServiceClientCredentials implementor (like TokenClientCredentials
        // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if
        // it doesn't actually implement TokenCredential also.
        var castCredential = credential;
        return (castCredential &&
            typeof castCredential.getToken === "function" &&
            (castCredential.signRequest === undefined || castCredential.getToken.length > 0));
    }

    // Copyright (c) Microsoft Corporation.
    var BaseRequestPolicy = /** @class */ (function () {
        function BaseRequestPolicy(_nextPolicy, _options) {
            this._nextPolicy = _nextPolicy;
            this._options = _options;
        }
        /**
         * Get whether or not a log with the provided log level should be logged.
         * @param logLevel - The log level of the log that will be logged.
         * @returns Whether or not a log with the provided log level should be logged.
         */
        BaseRequestPolicy.prototype.shouldLog = function (logLevel) {
            return this._options.shouldLog(logLevel);
        };
        /**
         * Attempt to log the provided message to the provided logger. If no logger was provided or if
         * the log level does not meat the logger's threshold, then nothing will be logged.
         * @param logLevel - The log level of this log.
         * @param message - The message of this log.
         */
        BaseRequestPolicy.prototype.log = function (logLevel, message) {
            this._options.log(logLevel, message);
        };
        return BaseRequestPolicy;
    }());
    /**
     * Optional properties that can be used when creating a RequestPolicy.
     */
    var RequestPolicyOptions = /** @class */ (function () {
        function RequestPolicyOptions(_logger) {
            this._logger = _logger;
        }
        /**
         * Get whether or not a log with the provided log level should be logged.
         * @param logLevel - The log level of the log that will be logged.
         * @returns Whether or not a log with the provided log level should be logged.
         */
        RequestPolicyOptions.prototype.shouldLog = function (logLevel) {
            return (!!this._logger &&
                logLevel !== HttpPipelineLogLevel.OFF &&
                logLevel <= this._logger.minimumLogLevel);
        };
        /**
         * Attempt to log the provided message to the provided logger. If no logger was provided or if
         * the log level does not meet the logger's threshold, then nothing will be logged.
         * @param logLevel - The log level of this log.
         * @param message - The message of this log.
         */
        RequestPolicyOptions.prototype.log = function (logLevel, message) {
            if (this._logger && this.shouldLog(logLevel)) {
                this._logger.log(logLevel, message);
            }
        };
        return RequestPolicyOptions;
    }());

    // Copyright (c) Microsoft Corporation.
    var logger$4 = createClientLogger("core-http");

    // Copyright (c) Microsoft Corporation.
    function logPolicy(loggingOptions) {
        if (loggingOptions === void 0) { loggingOptions = {}; }
        return {
            create: function (nextPolicy, options) {
                return new LogPolicy(nextPolicy, options, loggingOptions);
            }
        };
    }
    var LogPolicy = /** @class */ (function (_super) {
        __extends(LogPolicy, _super);
        function LogPolicy(nextPolicy, options, _a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.logger, logger = _c === void 0 ? logger$4.info : _c, _d = _b.allowedHeaderNames, allowedHeaderNames = _d === void 0 ? [] : _d, _e = _b.allowedQueryParameters, allowedQueryParameters = _e === void 0 ? [] : _e;
            var _this = _super.call(this, nextPolicy, options) || this;
            _this.logger = logger;
            _this.sanitizer = new Sanitizer({ allowedHeaderNames: allowedHeaderNames, allowedQueryParameters: allowedQueryParameters });
            return _this;
        }
        Object.defineProperty(LogPolicy.prototype, "allowedHeaderNames", {
            /**
             * Header names whose values will be logged when logging is enabled. Defaults to
             * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers
             * specified in this field will be added to that list.  Any other values will
             * be written to logs as "REDACTED".
             * @deprecated Pass these into the constructor instead.
             */
            get: function () {
                return this.sanitizer.allowedHeaderNames;
            },
            /**
             * Header names whose values will be logged when logging is enabled. Defaults to
             * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers
             * specified in this field will be added to that list.  Any other values will
             * be written to logs as "REDACTED".
             * @deprecated Pass these into the constructor instead.
             */
            set: function (allowedHeaderNames) {
                this.sanitizer.allowedHeaderNames = allowedHeaderNames;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LogPolicy.prototype, "allowedQueryParameters", {
            /**
             * Query string names whose values will be logged when logging is enabled. By default no
             * query string values are logged.
             * @deprecated Pass these into the constructor instead.
             */
            get: function () {
                return this.sanitizer.allowedQueryParameters;
            },
            /**
             * Query string names whose values will be logged when logging is enabled. By default no
             * query string values are logged.
             * @deprecated Pass these into the constructor instead.
             */
            set: function (allowedQueryParameters) {
                this.sanitizer.allowedQueryParameters = allowedQueryParameters;
            },
            enumerable: false,
            configurable: true
        });
        LogPolicy.prototype.sendRequest = function (request) {
            var _this = this;
            if (!this.logger.enabled)
                return this._nextPolicy.sendRequest(request);
            this.logRequest(request);
            return this._nextPolicy.sendRequest(request).then(function (response) { return _this.logResponse(response); });
        };
        LogPolicy.prototype.logRequest = function (request) {
            this.logger("Request: " + this.sanitizer.sanitize(request));
        };
        LogPolicy.prototype.logResponse = function (response) {
            this.logger("Response status code: " + response.status);
            this.logger("Headers: " + this.sanitizer.sanitize(response.headers));
            return response;
        };
        return LogPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    /**
     * Get the path to this parameter's value as a dotted string (a.b.c).
     * @param parameter - The parameter to get the path string for.
     * @returns The path to this parameter's value as a dotted string.
     */
    function getPathStringFromParameter(parameter) {
        return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);
    }
    function getPathStringFromParameterPath(parameterPath, mapper) {
        var result;
        if (typeof parameterPath === "string") {
            result = parameterPath;
        }
        else if (Array.isArray(parameterPath)) {
            result = parameterPath.join(".");
        }
        else {
            result = mapper.serializedName;
        }
        return result;
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * Gets the list of status codes for streaming responses.
     * @internal
     */
    function getStreamResponseStatusCodes(operationSpec) {
        var result = new Set();
        for (var statusCode in operationSpec.responses) {
            var operationResponse = operationSpec.responses[statusCode];
            if (operationResponse.bodyMapper &&
                operationResponse.bodyMapper.type.name === MapperType.Stream) {
                result.add(Number(statusCode));
            }
        }
        return result;
    }

    // Copyright (c) Microsoft Corporation.
    // tslint:disable-next-line:no-null-keyword
    var doc = document.implementation.createDocument(null, null, null);
    var parser = new DOMParser();
    function parseXML(str, opts) {
        var _a, _b, _c;
        if (opts === void 0) { opts = {}; }
        try {
            var updatedOptions = {
                rootName: (_a = opts.rootName) !== null && _a !== void 0 ? _a : "",
                includeRoot: (_b = opts.includeRoot) !== null && _b !== void 0 ? _b : false,
                xmlCharKey: (_c = opts.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY
            };
            var dom = parser.parseFromString(str, "application/xml");
            throwIfError(dom);
            var obj = void 0;
            if (updatedOptions.includeRoot) {
                obj = domToObject(dom, updatedOptions);
            }
            else {
                obj = domToObject(dom.childNodes[0], updatedOptions);
            }
            return Promise.resolve(obj);
        }
        catch (err) {
            return Promise.reject(err);
        }
    }
    var errorNS;
    function getErrorNamespace() {
        var _a;
        if (errorNS === undefined) {
            try {
                errorNS = (_a = parser.parseFromString("INVALID", "text/xml").getElementsByTagName("parsererror")[0]
                    .namespaceURI) !== null && _a !== void 0 ? _a : "";
            }
            catch (ignored) {
                // Most browsers will return a document containing <parsererror>, but IE will throw.
                errorNS = "";
            }
        }
        return errorNS;
    }
    function throwIfError(dom) {
        var parserErrors = dom.getElementsByTagName("parsererror");
        if (parserErrors.length > 0 && getErrorNamespace()) {
            for (var i = 0; i < parserErrors.length; i++) {
                if (parserErrors[i].namespaceURI === errorNS) {
                    throw new Error(parserErrors[i].innerHTML);
                }
            }
        }
    }
    function isElement(node) {
        return !!node.attributes;
    }
    /**
     * Get the Element-typed version of the provided Node if the provided node is an element with
     * attributes. If it isn't, then undefined is returned.
     */
    function asElementWithAttributes(node) {
        return isElement(node) && node.hasAttributes() ? node : undefined;
    }
    function domToObject(node, options) {
        var result = {};
        var childNodeCount = node.childNodes.length;
        var firstChildNode = node.childNodes[0];
        var onlyChildTextValue = (firstChildNode &&
            childNodeCount === 1 &&
            firstChildNode.nodeType === Node.TEXT_NODE &&
            firstChildNode.nodeValue) ||
            undefined;
        var elementWithAttributes = asElementWithAttributes(node);
        if (elementWithAttributes) {
            result[XML_ATTRKEY] = {};
            for (var i = 0; i < elementWithAttributes.attributes.length; i++) {
                var attr = elementWithAttributes.attributes[i];
                result[XML_ATTRKEY][attr.nodeName] = attr.nodeValue;
            }
            if (onlyChildTextValue) {
                result[options.xmlCharKey] = onlyChildTextValue;
            }
        }
        else if (childNodeCount === 0) {
            result = "";
        }
        else if (onlyChildTextValue) {
            result = onlyChildTextValue;
        }
        if (!onlyChildTextValue) {
            for (var i = 0; i < childNodeCount; i++) {
                var child = node.childNodes[i];
                // Ignore leading/trailing whitespace nodes
                if (child.nodeType !== Node.TEXT_NODE) {
                    var childObject = domToObject(child, options);
                    if (!result[child.nodeName]) {
                        result[child.nodeName] = childObject;
                    }
                    else if (Array.isArray(result[child.nodeName])) {
                        result[child.nodeName].push(childObject);
                    }
                    else {
                        result[child.nodeName] = [result[child.nodeName], childObject];
                    }
                }
            }
        }
        return result;
    }
    var serializer = new XMLSerializer();
    function stringifyXML(content, opts) {
        var _a, _b, _c;
        if (opts === void 0) { opts = {}; }
        var updatedOptions = {
            rootName: (_a = opts.rootName) !== null && _a !== void 0 ? _a : "root",
            includeRoot: (_b = opts.includeRoot) !== null && _b !== void 0 ? _b : false,
            xmlCharKey: (_c = opts.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY
        };
        var dom = buildNode(content, updatedOptions.rootName, updatedOptions)[0];
        return ('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + serializer.serializeToString(dom));
    }
    function buildAttributes(attrs) {
        var result = [];
        for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {
            var key = _a[_i];
            var attr = doc.createAttribute(key);
            attr.value = attrs[key].toString();
            result.push(attr);
        }
        return result;
    }
    function buildNode(obj, elementName, options) {
        if (obj === undefined ||
            obj === null ||
            typeof obj === "string" ||
            typeof obj === "number" ||
            typeof obj === "boolean") {
            var elem = doc.createElement(elementName);
            elem.textContent = obj === undefined || obj === null ? "" : obj.toString();
            return [elem];
        }
        else if (Array.isArray(obj)) {
            var result = [];
            for (var _i = 0, obj_1 = obj; _i < obj_1.length; _i++) {
                var arrayElem = obj_1[_i];
                for (var _a = 0, _b = buildNode(arrayElem, elementName, options); _a < _b.length; _a++) {
                    var child = _b[_a];
                    result.push(child);
                }
            }
            return result;
        }
        else if (typeof obj === "object") {
            var elem = doc.createElement(elementName);
            for (var _c = 0, _d = Object.keys(obj); _c < _d.length; _c++) {
                var key = _d[_c];
                if (key === XML_ATTRKEY) {
                    for (var _e = 0, _f = buildAttributes(obj[key]); _e < _f.length; _e++) {
                        var attr = _f[_e];
                        elem.attributes.setNamedItem(attr);
                    }
                }
                else if (key === options.xmlCharKey) {
                    elem.textContent = obj[key].toString();
                }
                else {
                    for (var _g = 0, _h = buildNode(obj[key], key, options); _g < _h.length; _g++) {
                        var child = _h[_g];
                        elem.appendChild(child);
                    }
                }
            }
            return [elem];
        }
        else {
            throw new Error("Illegal value passed to buildObject: " + obj);
        }
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they
     * pass through the HTTP pipeline.
     */
    function deserializationPolicy(deserializationContentTypes, parsingOptions) {
        return {
            create: function (nextPolicy, options) {
                return new DeserializationPolicy(nextPolicy, options, deserializationContentTypes, parsingOptions);
            }
        };
    }
    var defaultJsonContentTypes = ["application/json", "text/json"];
    var defaultXmlContentTypes = ["application/xml", "application/atom+xml"];
    var DefaultDeserializationOptions = {
        expectedContentTypes: {
            json: defaultJsonContentTypes,
            xml: defaultXmlContentTypes
        }
    };
    /**
     * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the
     * HTTP pipeline.
     */
    var DeserializationPolicy = /** @class */ (function (_super) {
        __extends(DeserializationPolicy, _super);
        function DeserializationPolicy(nextPolicy, requestPolicyOptions, deserializationContentTypes, parsingOptions) {
            if (parsingOptions === void 0) { parsingOptions = {}; }
            var _a;
            var _this = _super.call(this, nextPolicy, requestPolicyOptions) || this;
            _this.jsonContentTypes =
                (deserializationContentTypes && deserializationContentTypes.json) || defaultJsonContentTypes;
            _this.xmlContentTypes =
                (deserializationContentTypes && deserializationContentTypes.xml) || defaultXmlContentTypes;
            _this.xmlCharKey = (_a = parsingOptions.xmlCharKey) !== null && _a !== void 0 ? _a : XML_CHARKEY;
            return _this;
        }
        DeserializationPolicy.prototype.sendRequest = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, this._nextPolicy.sendRequest(request).then(function (response) {
                            return deserializeResponseBody(_this.jsonContentTypes, _this.xmlContentTypes, response, {
                                xmlCharKey: _this.xmlCharKey
                            });
                        })];
                });
            });
        };
        return DeserializationPolicy;
    }(BaseRequestPolicy));
    function getOperationResponse(parsedResponse) {
        var result;
        var request = parsedResponse.request;
        var operationSpec = request.operationSpec;
        if (operationSpec) {
            var operationResponseGetter = request.operationResponseGetter;
            if (!operationResponseGetter) {
                result = operationSpec.responses[parsedResponse.status];
            }
            else {
                result = operationResponseGetter(operationSpec, parsedResponse);
            }
        }
        return result;
    }
    function shouldDeserializeResponse(parsedResponse) {
        var shouldDeserialize = parsedResponse.request.shouldDeserialize;
        var result;
        if (shouldDeserialize === undefined) {
            result = true;
        }
        else if (typeof shouldDeserialize === "boolean") {
            result = shouldDeserialize;
        }
        else {
            result = shouldDeserialize(parsedResponse);
        }
        return result;
    }
    function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options) {
        var _a, _b, _c;
        if (options === void 0) { options = {}; }
        var updatedOptions = {
            rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : "",
            includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,
            xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY
        };
        return parse$1(jsonContentTypes, xmlContentTypes, response, updatedOptions).then(function (parsedResponse) {
            if (!shouldDeserializeResponse(parsedResponse)) {
                return parsedResponse;
            }
            var operationSpec = parsedResponse.request.operationSpec;
            if (!operationSpec || !operationSpec.responses) {
                return parsedResponse;
            }
            var responseSpec = getOperationResponse(parsedResponse);
            var _a = handleErrorResponse(parsedResponse, operationSpec, responseSpec), error = _a.error, shouldReturnResponse = _a.shouldReturnResponse;
            if (error) {
                throw error;
            }
            else if (shouldReturnResponse) {
                return parsedResponse;
            }
            // An operation response spec does exist for current status code, so
            // use it to deserialize the response.
            if (responseSpec) {
                if (responseSpec.bodyMapper) {
                    var valueToDeserialize = parsedResponse.parsedBody;
                    if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {
                        valueToDeserialize =
                            typeof valueToDeserialize === "object"
                                ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName]
                                : [];
                    }
                    try {
                        parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, "operationRes.parsedBody", options);
                    }
                    catch (innerError) {
                        var restError = new RestError("Error " + innerError + " occurred in deserializing the responseBody - " + parsedResponse.bodyAsText, undefined, parsedResponse.status, parsedResponse.request, parsedResponse);
                        throw restError;
                    }
                }
                else if (operationSpec.httpMethod === "HEAD") {
                    // head methods never have a body, but we return a boolean to indicate presence/absence of the resource
                    parsedResponse.parsedBody = response.status >= 200 && response.status < 300;
                }
                if (responseSpec.headersMapper) {
                    parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.rawHeaders(), "operationRes.parsedHeaders", options);
                }
            }
            return parsedResponse;
        });
    }
    function isOperationSpecEmpty(operationSpec) {
        var expectedStatusCodes = Object.keys(operationSpec.responses);
        return (expectedStatusCodes.length === 0 ||
            (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === "default"));
    }
    function handleErrorResponse(parsedResponse, operationSpec, responseSpec) {
        var _a;
        var isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;
        var isExpectedStatusCode = isOperationSpecEmpty(operationSpec)
            ? isSuccessByStatus
            : !!responseSpec;
        if (isExpectedStatusCode) {
            if (responseSpec) {
                if (!responseSpec.isError) {
                    return { error: null, shouldReturnResponse: false };
                }
            }
            else {
                return { error: null, shouldReturnResponse: false };
            }
        }
        var errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;
        var streaming = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status)) ||
            parsedResponse.request.streamResponseBody;
        var initialErrorMessage = streaming
            ? "Unexpected status code: " + parsedResponse.status
            : parsedResponse.bodyAsText;
        var error = new RestError(initialErrorMessage, undefined, parsedResponse.status, parsedResponse.request, parsedResponse);
        // If the item failed but there's no error spec or default spec to deserialize the error,
        // we should fail so we just throw the parsed response
        if (!errorResponseSpec) {
            throw error;
        }
        var defaultBodyMapper = errorResponseSpec.bodyMapper;
        var defaultHeadersMapper = errorResponseSpec.headersMapper;
        try {
            // If error response has a body, try to deserialize it using default body mapper.
            // Then try to extract error code & message from it
            if (parsedResponse.parsedBody) {
                var parsedBody = parsedResponse.parsedBody;
                var parsedError = void 0;
                if (defaultBodyMapper) {
                    var valueToDeserialize = parsedBody;
                    if (operationSpec.isXML && defaultBodyMapper.type.name === MapperType.Sequence) {
                        valueToDeserialize =
                            typeof parsedBody === "object" ? parsedBody[defaultBodyMapper.xmlElementName] : [];
                    }
                    parsedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, "error.response.parsedBody");
                }
                var internalError = parsedBody.error || parsedError || parsedBody;
                error.code = internalError.code;
                if (internalError.message) {
                    error.message = internalError.message;
                }
                if (defaultBodyMapper) {
                    error.response.parsedBody = parsedError;
                }
            }
            // If error response has headers, try to deserialize it using default header mapper
            if (parsedResponse.headers && defaultHeadersMapper) {
                error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.rawHeaders(), "operationRes.parsedHeaders");
            }
        }
        catch (defaultError) {
            error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody - \"" + parsedResponse.bodyAsText + "\" for the default response.";
        }
        return { error: error, shouldReturnResponse: false };
    }
    function parse$1(jsonContentTypes, xmlContentTypes, operationResponse, opts) {
        var _a;
        var errorHandler = function (err) {
            var msg = "Error \"" + err + "\" occurred while parsing the response body - " + operationResponse.bodyAsText + ".";
            var errCode = err.code || RestError.PARSE_ERROR;
            var e = new RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse);
            return Promise.reject(e);
        };
        var streaming = ((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) ||
            operationResponse.request.streamResponseBody;
        if (!streaming && operationResponse.bodyAsText) {
            var text_1 = operationResponse.bodyAsText;
            var contentType = operationResponse.headers.get("Content-Type") || "";
            var contentComponents = !contentType
                ? []
                : contentType.split(";").map(function (component) { return component.toLowerCase(); });
            if (contentComponents.length === 0 ||
                contentComponents.some(function (component) { return jsonContentTypes.indexOf(component) !== -1; })) {
                return new Promise(function (resolve) {
                    operationResponse.parsedBody = JSON.parse(text_1);
                    resolve(operationResponse);
                }).catch(errorHandler);
            }
            else if (contentComponents.some(function (component) { return xmlContentTypes.indexOf(component) !== -1; })) {
                return parseXML(text_1, opts)
                    .then(function (body) {
                    operationResponse.parsedBody = body;
                    return operationResponse;
                })
                    .catch(errorHandler);
            }
        }
        return Promise.resolve(operationResponse);
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    var DEFAULT_CLIENT_RETRY_COUNT = 3;
    // intervals are in ms
    var DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;
    var DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;
    var DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;
    function isNumber(n) {
        return typeof n === "number";
    }
    /**
     * @internal
     * Determines if the operation should be retried.
     *
     * @param retryLimit - Specifies the max number of retries.
     * @param predicate - Initial chekck on whether to retry based on given responses or errors
     * @param retryData -  The retry data.
     * @returns True if the operation qualifies for a retry; false otherwise.
     */
    function shouldRetry(retryLimit, predicate, retryData, response, error) {
        if (!predicate(response, error)) {
            return false;
        }
        return retryData.retryCount < retryLimit;
    }
    /**
     * @internal
     * Updates the retry data for the next attempt.
     *
     * @param retryOptions - specifies retry interval, and its lower bound and upper bound.
     * @param retryData -  The retry data.
     * @param err - The operation"s error, if any.
     */
    function updateRetryData(retryOptions, retryData, err) {
        if (retryData === void 0) { retryData = { retryCount: 0, retryInterval: 0 }; }
        if (err) {
            if (retryData.error) {
                err.innerError = retryData.error;
            }
            retryData.error = err;
        }
        // Adjust retry count
        retryData.retryCount++;
        // Adjust retry interval
        var incrementDelta = Math.pow(2, retryData.retryCount - 1) - 1;
        var boundedRandDelta = retryOptions.retryInterval * 0.8 +
            Math.floor(Math.random() * (retryOptions.retryInterval * 0.4));
        incrementDelta *= boundedRandDelta;
        retryData.retryInterval = Math.min(retryOptions.minRetryInterval + incrementDelta, retryOptions.maxRetryInterval);
        return retryData;
    }

    // Copyright (c) Microsoft Corporation.
    function exponentialRetryPolicy(retryCount, retryInterval, maxRetryInterval) {
        return {
            create: function (nextPolicy, options) {
                return new ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval);
            }
        };
    }
    /**
     * Describes the Retry Mode type. Currently supporting only Exponential.
     */
    var RetryMode;
    (function (RetryMode) {
        RetryMode[RetryMode["Exponential"] = 0] = "Exponential";
    })(RetryMode || (RetryMode = {}));
    var DefaultRetryOptions = {
        maxRetries: DEFAULT_CLIENT_RETRY_COUNT,
        retryDelayInMs: DEFAULT_CLIENT_RETRY_INTERVAL,
        maxRetryDelayInMs: DEFAULT_CLIENT_MAX_RETRY_INTERVAL
    };
    /**
     * Instantiates a new "ExponentialRetryPolicyFilter" instance.
     */
    var ExponentialRetryPolicy = /** @class */ (function (_super) {
        __extends(ExponentialRetryPolicy, _super);
        /**
         * @param nextPolicy - The next RequestPolicy in the pipeline chain.
         * @param options - The options for this RequestPolicy.
         * @param retryCount - The client retry count.
         * @param retryInterval - The client retry interval, in milliseconds.
         * @param minRetryInterval - The minimum retry interval, in milliseconds.
         * @param maxRetryInterval - The maximum retry interval, in milliseconds.
         */
        function ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval) {
            var _this = _super.call(this, nextPolicy, options) || this;
            _this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;
            _this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;
            _this.maxRetryInterval = isNumber(maxRetryInterval)
                ? maxRetryInterval
                : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
            return _this;
        }
        ExponentialRetryPolicy.prototype.sendRequest = function (request) {
            var _this = this;
            return this._nextPolicy
                .sendRequest(request.clone())
                .then(function (response) { return retry(_this, request, response); })
                .catch(function (error) { return retry(_this, request, error.response, undefined, error); });
        };
        return ExponentialRetryPolicy;
    }(BaseRequestPolicy));
    function retry(policy, request, response, retryData, requestError) {
        return __awaiter(this, void 0, void 0, function () {
            function shouldPolicyRetry(responseParam) {
                var statusCode = responseParam === null || responseParam === void 0 ? void 0 : responseParam.status;
                if (statusCode === undefined ||
                    (statusCode < 500 && statusCode !== 408) ||
                    statusCode === 501 ||
                    statusCode === 505) {
                    return false;
                }
                return true;
            }
            var isAborted, res, err_1, err;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        retryData = updateRetryData({
                            retryInterval: policy.retryInterval,
                            minRetryInterval: 0,
                            maxRetryInterval: policy.maxRetryInterval
                        }, retryData, requestError);
                        isAborted = request.abortSignal && request.abortSignal.aborted;
                        if (!(!isAborted && shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, response))) return [3 /*break*/, 6];
                        logger$4.info("Retrying request in " + retryData.retryInterval);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, delay(retryData.retryInterval)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, policy._nextPolicy.sendRequest(request.clone())];
                    case 3:
                        res = _a.sent();
                        return [2 /*return*/, retry(policy, request, res, retryData)];
                    case 4:
                        err_1 = _a.sent();
                        return [2 /*return*/, retry(policy, request, response, retryData, err_1)];
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        if (isAborted || requestError || !response) {
                            err = retryData.error ||
                                new RestError("Failed to send the request.", RestError.REQUEST_SEND_ERROR, response && response.status, response && response.request, response);
                            throw err;
                        }
                        else {
                            return [2 /*return*/, response];
                        }
                    case 7: return [2 /*return*/];
                }
            });
        });
    }

    // Copyright (c) Microsoft Corporation.
    function generateClientRequestIdPolicy(requestIdHeaderName) {
        if (requestIdHeaderName === void 0) { requestIdHeaderName = "x-ms-client-request-id"; }
        return {
            create: function (nextPolicy, options) {
                return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);
            }
        };
    }
    var GenerateClientRequestIdPolicy = /** @class */ (function (_super) {
        __extends(GenerateClientRequestIdPolicy, _super);
        function GenerateClientRequestIdPolicy(nextPolicy, options, _requestIdHeaderName) {
            var _this = _super.call(this, nextPolicy, options) || this;
            _this._requestIdHeaderName = _requestIdHeaderName;
            return _this;
        }
        GenerateClientRequestIdPolicy.prototype.sendRequest = function (request) {
            if (!request.headers.contains(this._requestIdHeaderName)) {
                request.headers.set(this._requestIdHeaderName, request.requestId);
            }
            return this._nextPolicy.sendRequest(request);
        };
        return GenerateClientRequestIdPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    function getDefaultUserAgentKey() {
        return "x-ms-useragent";
    }
    function getPlatformSpecificData() {
        var navigator = self.navigator;
        var osInfo = {
            key: "OS",
            value: (navigator.oscpu || navigator.platform).replace(" ", "")
        };
        return [osInfo];
    }

    // Copyright (c) Microsoft Corporation.
    function getRuntimeInfo() {
        var msRestRuntime = {
            key: "core-http",
            value: Constants.coreHttpVersion
        };
        return [msRestRuntime];
    }
    function getUserAgentString(telemetryInfo, keySeparator, valueSeparator) {
        if (keySeparator === void 0) { keySeparator = " "; }
        if (valueSeparator === void 0) { valueSeparator = "/"; }
        return telemetryInfo
            .map(function (info) {
            var value = info.value ? "" + valueSeparator + info.value : "";
            return "" + info.key + value;
        })
            .join(keySeparator);
    }
    var getDefaultUserAgentHeaderName = getDefaultUserAgentKey;
    function getDefaultUserAgentValue() {
        var runtimeInfo = getRuntimeInfo();
        var platformSpecificData = getPlatformSpecificData();
        var userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));
        return userAgent;
    }
    function userAgentPolicy(userAgentData) {
        var key = !userAgentData || userAgentData.key === undefined || userAgentData.key === null
            ? getDefaultUserAgentKey()
            : userAgentData.key;
        var value = !userAgentData || userAgentData.value === undefined || userAgentData.value === null
            ? getDefaultUserAgentValue()
            : userAgentData.value;
        return {
            create: function (nextPolicy, options) {
                return new UserAgentPolicy(nextPolicy, options, key, value);
            }
        };
    }
    var UserAgentPolicy = /** @class */ (function (_super) {
        __extends(UserAgentPolicy, _super);
        function UserAgentPolicy(_nextPolicy, _options, headerKey, headerValue) {
            var _this = _super.call(this, _nextPolicy, _options) || this;
            _this._nextPolicy = _nextPolicy;
            _this._options = _options;
            _this.headerKey = headerKey;
            _this.headerValue = headerValue;
            return _this;
        }
        UserAgentPolicy.prototype.sendRequest = function (request) {
            this.addUserAgentHeader(request);
            return this._nextPolicy.sendRequest(request);
        };
        UserAgentPolicy.prototype.addUserAgentHeader = function (request) {
            if (!request.headers) {
                request.headers = new HttpHeaders();
            }
            if (!request.headers.get(this.headerKey) && this.headerValue) {
                request.headers.set(this.headerKey, this.headerValue);
            }
        };
        return UserAgentPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    /**
     * Methods that are allowed to follow redirects 301 and 302
     */
    var allowedRedirect = ["GET", "HEAD"];
    var DefaultRedirectOptions = {
        handleRedirects: true,
        maxRetries: 20
    };
    function redirectPolicy(maximumRetries) {
        if (maximumRetries === void 0) { maximumRetries = 20; }
        return {
            create: function (nextPolicy, options) {
                return new RedirectPolicy(nextPolicy, options, maximumRetries);
            }
        };
    }
    var RedirectPolicy = /** @class */ (function (_super) {
        __extends(RedirectPolicy, _super);
        function RedirectPolicy(nextPolicy, options, maxRetries) {
            if (maxRetries === void 0) { maxRetries = 20; }
            var _this = _super.call(this, nextPolicy, options) || this;
            _this.maxRetries = maxRetries;
            return _this;
        }
        RedirectPolicy.prototype.sendRequest = function (request) {
            var _this = this;
            return this._nextPolicy
                .sendRequest(request)
                .then(function (response) { return handleRedirect(_this, response, 0); });
        };
        return RedirectPolicy;
    }(BaseRequestPolicy));
    function handleRedirect(policy, response, currentRetries) {
        var request = response.request, status = response.status;
        var locationHeader = response.headers.get("location");
        if (locationHeader &&
            (status === 300 ||
                (status === 301 && allowedRedirect.includes(request.method)) ||
                (status === 302 && allowedRedirect.includes(request.method)) ||
                (status === 303 && request.method === "POST") ||
                status === 307) &&
            (!policy.maxRetries || currentRetries < policy.maxRetries)) {
            var builder = URLBuilder.parse(request.url);
            builder.setPath(locationHeader);
            request.url = builder.toString();
            // POST request with Status code 303 should be converted into a
            // redirected GET request if the redirect url is present in the location header
            if (status === 303) {
                request.method = "GET";
                delete request.body;
            }
            return policy._nextPolicy
                .sendRequest(request)
                .then(function (res) { return handleRedirect(policy, res, currentRetries + 1); });
        }
        return Promise.resolve(response);
    }

    // Copyright (c) Microsoft Corporation.
    function rpRegistrationPolicy(retryTimeout) {
        if (retryTimeout === void 0) { retryTimeout = 30; }
        return {
            create: function (nextPolicy, options) {
                return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);
            }
        };
    }
    var RPRegistrationPolicy = /** @class */ (function (_super) {
        __extends(RPRegistrationPolicy, _super);
        function RPRegistrationPolicy(nextPolicy, options, _retryTimeout) {
            if (_retryTimeout === void 0) { _retryTimeout = 30; }
            var _this = _super.call(this, nextPolicy, options) || this;
            _this._retryTimeout = _retryTimeout;
            return _this;
        }
        RPRegistrationPolicy.prototype.sendRequest = function (request) {
            var _this = this;
            return this._nextPolicy
                .sendRequest(request.clone())
                .then(function (response) { return registerIfNeeded(_this, request, response); });
        };
        return RPRegistrationPolicy;
    }(BaseRequestPolicy));
    function registerIfNeeded(policy, request, response) {
        if (response.status === 409) {
            var rpName = checkRPNotRegisteredError(response.bodyAsText);
            if (rpName) {
                var urlPrefix = extractSubscriptionUrl(request.url);
                return (registerRP(policy, urlPrefix, rpName, request)
                    // Autoregistration of ${provider} failed for some reason. We will not return this error
                    // instead will return the initial response with 409 status code back to the user.
                    // do nothing here as we are returning the original response at the end of this method.
                    .catch(function () { return false; })
                    .then(function (registrationStatus) {
                    if (registrationStatus) {
                        // Retry the original request. We have to change the x-ms-client-request-id
                        // otherwise Azure endpoint will return the initial 409 (cached) response.
                        request.headers.set("x-ms-client-request-id", generateUuid());
                        return policy._nextPolicy.sendRequest(request.clone());
                    }
                    return response;
                }));
            }
        }
        return Promise.resolve(response);
    }
    /**
     * Reuses the headers of the original request and url (if specified).
     * @param originalRequest - The original request
     * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.
     * @returns A new request object with desired headers.
     */
    function getRequestEssentials(originalRequest, reuseUrlToo) {
        if (reuseUrlToo === void 0) { reuseUrlToo = false; }
        var reqOptions = originalRequest.clone();
        if (reuseUrlToo) {
            reqOptions.url = originalRequest.url;
        }
        // We have to change the x-ms-client-request-id otherwise Azure endpoint
        // will return the initial 409 (cached) response.
        reqOptions.headers.set("x-ms-client-request-id", generateUuid());
        // Set content-type to application/json
        reqOptions.headers.set("Content-Type", "application/json; charset=utf-8");
        return reqOptions;
    }
    /**
     * Validates the error code and message associated with 409 response status code. If it matches to that of
     * RP not registered then it returns the name of the RP else returns undefined.
     * @param body - The response body received after making the original request.
     * @returns The name of the RP if condition is satisfied else undefined.
     */
    function checkRPNotRegisteredError(body) {
        var result, responseBody;
        if (body) {
            try {
                responseBody = JSON.parse(body);
            }
            catch (err) {
                // do nothing;
            }
            if (responseBody &&
                responseBody.error &&
                responseBody.error.message &&
                responseBody.error.code &&
                responseBody.error.code === "MissingSubscriptionRegistration") {
                var matchRes = responseBody.error.message.match(/.*'(.*)'/i);
                if (matchRes) {
                    result = matchRes.pop();
                }
            }
        }
        return result;
    }
    /**
     * Extracts the first part of the URL, just after subscription:
     * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/
     * @param url - The original request url
     * @returns The url prefix as explained above.
     */
    function extractSubscriptionUrl(url) {
        var result;
        var matchRes = url.match(/.*\/subscriptions\/[a-f0-9-]+\//gi);
        if (matchRes && matchRes[0]) {
            result = matchRes[0];
        }
        else {
            throw new Error("Unable to extract subscriptionId from the given url - " + url + ".");
        }
        return result;
    }
    /**
     * Registers the given provider.
     * @param policy - The RPRegistrationPolicy this function is being called against.
     * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/
     * @param provider - The provider name to be registered.
     * @param originalRequest - The original request sent by the user that returned a 409 response
     * with a message that the provider is not registered.
     * @param callback - The callback that handles the RP registration
     */
    function registerRP(policy, urlPrefix, provider, originalRequest) {
        var postUrl = urlPrefix + "providers/" + provider + "/register?api-version=2016-02-01";
        var getUrl = urlPrefix + "providers/" + provider + "?api-version=2016-02-01";
        var reqOptions = getRequestEssentials(originalRequest);
        reqOptions.method = "POST";
        reqOptions.url = postUrl;
        return policy._nextPolicy.sendRequest(reqOptions).then(function (response) {
            if (response.status !== 200) {
                throw new Error("Autoregistration of " + provider + " failed. Please try registering manually.");
            }
            return getRegistrationStatus(policy, getUrl, originalRequest);
        });
    }
    /**
     * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.
     * Polling will happen till the registrationState property of the response body is "Registered".
     * @param policy - The RPRegistrationPolicy this function is being called against.
     * @param url - The request url for polling
     * @param originalRequest - The original request sent by the user that returned a 409 response
     * with a message that the provider is not registered.
     * @returns True if RP Registration is successful.
     */
    function getRegistrationStatus(policy, url, originalRequest) {
        var reqOptions = getRequestEssentials(originalRequest);
        reqOptions.url = url;
        reqOptions.method = "GET";
        return policy._nextPolicy.sendRequest(reqOptions).then(function (res) {
            var obj = res.parsedBody;
            if (res.parsedBody && obj.registrationState && obj.registrationState === "Registered") {
                return true;
            }
            else {
                return delay(policy._retryTimeout * 1000)
                    .then(function () { return getRegistrationStatus(policy, url, originalRequest); });
            }
        });
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    /**
     * Defines the default token refresh buffer duration.
     */
    var TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes
    /**
     * Provides an {@link AccessTokenCache} implementation which clears
     * the cached {@link AccessToken}'s after the expiresOnTimestamp has
     * passed.
     */
    var ExpiringAccessTokenCache = /** @class */ (function () {
        /**
         * Constructs an instance of {@link ExpiringAccessTokenCache} with
         * an optional expiration buffer time.
         */
        function ExpiringAccessTokenCache(tokenRefreshBufferMs) {
            if (tokenRefreshBufferMs === void 0) { tokenRefreshBufferMs = TokenRefreshBufferMs; }
            this.cachedToken = undefined;
            this.tokenRefreshBufferMs = tokenRefreshBufferMs;
        }
        ExpiringAccessTokenCache.prototype.setCachedToken = function (accessToken) {
            this.cachedToken = accessToken;
        };
        ExpiringAccessTokenCache.prototype.getCachedToken = function () {
            if (this.cachedToken &&
                Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp) {
                this.cachedToken = undefined;
            }
            return this.cachedToken;
        };
        return ExpiringAccessTokenCache;
    }());

    // Copyright (c) Microsoft Corporation.
    /**
     * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.
     */
    var AccessTokenRefresher = /** @class */ (function () {
        function AccessTokenRefresher(credential, scopes, requiredMillisecondsBeforeNewRefresh) {
            if (requiredMillisecondsBeforeNewRefresh === void 0) { requiredMillisecondsBeforeNewRefresh = 30000; }
            this.credential = credential;
            this.scopes = scopes;
            this.requiredMillisecondsBeforeNewRefresh = requiredMillisecondsBeforeNewRefresh;
            this.lastCalled = 0;
        }
        /**
         * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying
         * that we are ready for a new refresh.
         */
        AccessTokenRefresher.prototype.isReady = function () {
            // We're only ready for a new refresh if the required milliseconds have passed.
            return (!this.lastCalled || Date.now() - this.lastCalled >= this.requiredMillisecondsBeforeNewRefresh);
        };
        /**
         * Stores the time in which it is called,
         * then requests a new token,
         * then sets this.promise to undefined,
         * then returns the token.
         */
        AccessTokenRefresher.prototype.getToken = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var token;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.lastCalled = Date.now();
                            return [4 /*yield*/, this.credential.getToken(this.scopes, options)];
                        case 1:
                            token = _a.sent();
                            this.promise = undefined;
                            return [2 /*return*/, token || undefined];
                    }
                });
            });
        };
        /**
         * Requests a new token if we're not currently waiting for a new token.
         * Returns null if the required time between each call hasn't been reached.
         */
        AccessTokenRefresher.prototype.refresh = function (options) {
            if (!this.promise) {
                this.promise = this.getToken(options);
            }
            return this.promise;
        };
        return AccessTokenRefresher;
    }());

    // Copyright (c) Microsoft Corporation.
    /**
     * The automated token refresh will only start to happen at the
     * expiration date minus the value of timeBetweenRefreshAttemptsInMs,
     * which is by default 30 seconds.
     */
    var timeBetweenRefreshAttemptsInMs = 30000;
    /**
     * Creates a new BearerTokenAuthenticationPolicy factory.
     *
     * @param credential - The TokenCredential implementation that can supply the bearer token.
     * @param scopes - The scopes for which the bearer token applies.
     */
    function bearerTokenAuthenticationPolicy(credential, scopes) {
        var tokenCache = new ExpiringAccessTokenCache();
        var tokenRefresher = new AccessTokenRefresher(credential, scopes, timeBetweenRefreshAttemptsInMs);
        return {
            create: function (nextPolicy, options) {
                return new BearerTokenAuthenticationPolicy(nextPolicy, options, tokenCache, tokenRefresher);
            }
        };
    }
    /**
     *
     * Provides a RequestPolicy that can request a token from a TokenCredential
     * implementation and then apply it to the Authorization header of a request
     * as a Bearer token.
     *
     */
    var BearerTokenAuthenticationPolicy = /** @class */ (function (_super) {
        __extends(BearerTokenAuthenticationPolicy, _super);
        /**
         * Creates a new BearerTokenAuthenticationPolicy object.
         *
         * @param nextPolicy - The next RequestPolicy in the request pipeline.
         * @param options - Options for this RequestPolicy.
         * @param credential - The TokenCredential implementation that can supply the bearer token.
         * @param scopes - The scopes for which the bearer token applies.
         * @param tokenCache - The cache for the most recent AccessToken returned from the TokenCredential.
         */
        function BearerTokenAuthenticationPolicy(nextPolicy, options, tokenCache, tokenRefresher) {
            var _this = _super.call(this, nextPolicy, options) || this;
            _this.tokenCache = tokenCache;
            _this.tokenRefresher = tokenRefresher;
            return _this;
        }
        /**
         * Applies the Bearer token to the request through the Authorization header.
         */
        BearerTokenAuthenticationPolicy.prototype.sendRequest = function (webResource) {
            return __awaiter(this, void 0, void 0, function () {
                var token;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!webResource.headers)
                                webResource.headers = new HttpHeaders();
                            return [4 /*yield*/, this.getToken({
                                    abortSignal: webResource.abortSignal,
                                    tracingOptions: {
                                        spanOptions: webResource.spanOptions
                                    }
                                })];
                        case 1:
                            token = _a.sent();
                            webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, "Bearer " + token);
                            return [2 /*return*/, this._nextPolicy.sendRequest(webResource)];
                    }
                });
            });
        };
        BearerTokenAuthenticationPolicy.prototype.getToken = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var token;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            token = this.tokenCache.getCachedToken();
                            if (!(!token && this.tokenRefresher.isReady())) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.tokenRefresher.refresh(options)];
                        case 1:
                            token = _a.sent();
                            this.tokenCache.setCachedToken(token);
                            _a.label = 2;
                        case 2: return [2 /*return*/, token ? token.token : undefined];
                    }
                });
            });
        };
        return BearerTokenAuthenticationPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    function systemErrorRetryPolicy(retryCount, retryInterval, minRetryInterval, maxRetryInterval) {
        return {
            create: function (nextPolicy, options) {
                return new SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);
            }
        };
    }
    /**
     * @param retryCount - The client retry count.
     * @param retryInterval - The client retry interval, in milliseconds.
     * @param minRetryInterval - The minimum retry interval, in milliseconds.
     * @param maxRetryInterval - The maximum retry interval, in milliseconds.
     */
    var SystemErrorRetryPolicy = /** @class */ (function (_super) {
        __extends(SystemErrorRetryPolicy, _super);
        function SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval) {
            var _this = _super.call(this, nextPolicy, options) || this;
            _this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;
            _this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;
            _this.minRetryInterval = isNumber(minRetryInterval)
                ? minRetryInterval
                : DEFAULT_CLIENT_MIN_RETRY_INTERVAL;
            _this.maxRetryInterval = isNumber(maxRetryInterval)
                ? maxRetryInterval
                : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
            return _this;
        }
        SystemErrorRetryPolicy.prototype.sendRequest = function (request) {
            var _this = this;
            return this._nextPolicy
                .sendRequest(request.clone())
                .catch(function (error) { return retry$1(_this, request, error.response, error); });
        };
        return SystemErrorRetryPolicy;
    }(BaseRequestPolicy));
    function retry$1(policy, request, operationResponse, err, retryData) {
        return __awaiter(this, void 0, void 0, function () {
            function shouldPolicyRetry(_response, error) {
                if (error &&
                    error.code &&
                    (error.code === "ETIMEDOUT" ||
                        error.code === "ESOCKETTIMEDOUT" ||
                        error.code === "ECONNREFUSED" ||
                        error.code === "ECONNRESET" ||
                        error.code === "ENOENT")) {
                    return true;
                }
                return false;
            }
            var nestedErr_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        retryData = updateRetryData(policy, retryData, err);
                        if (!shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, operationResponse, err)) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, delay(retryData.retryInterval)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, policy._nextPolicy.sendRequest(request.clone())];
                    case 3:
                        nestedErr_1 = _a.sent();
                        return [2 /*return*/, retry$1(policy, request, operationResponse, nestedErr_1, retryData)];
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        if (err) {
                            // If the operation failed in the end, return all errors instead of just the last one
                            return [2 /*return*/, Promise.reject(retryData.error)];
                        }
                        return [2 /*return*/, operationResponse];
                    case 6: return [2 /*return*/];
                }
            });
        });
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    /**
     * The format that will be used to join an array of values together for a query parameter value.
     */
    var QueryCollectionFormat;
    (function (QueryCollectionFormat) {
        QueryCollectionFormat["Csv"] = ",";
        QueryCollectionFormat["Ssv"] = " ";
        QueryCollectionFormat["Tsv"] = "\t";
        QueryCollectionFormat["Pipes"] = "|";
        QueryCollectionFormat["Multi"] = "Multi";
    })(QueryCollectionFormat || (QueryCollectionFormat = {}));

    // Copyright (c) Microsoft Corporation.
    var StatusCodes = Constants.HttpConstants.StatusCodes;
    function throttlingRetryPolicy() {
        return {
            create: function (nextPolicy, options) {
                return new ThrottlingRetryPolicy(nextPolicy, options);
            }
        };
    }
    /**
     * To learn more, please refer to
     * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,
     * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and
     * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors
     */
    var ThrottlingRetryPolicy = /** @class */ (function (_super) {
        __extends(ThrottlingRetryPolicy, _super);
        function ThrottlingRetryPolicy(nextPolicy, options, _handleResponse) {
            var _this = _super.call(this, nextPolicy, options) || this;
            _this._handleResponse = _handleResponse || _this._defaultResponseHandler;
            return _this;
        }
        ThrottlingRetryPolicy.prototype.sendRequest = function (httpRequest) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, this._nextPolicy.sendRequest(httpRequest.clone()).then(function (response) {
                            if (response.status !== StatusCodes.TooManyRequests) {
                                return response;
                            }
                            else {
                                return _this._handleResponse(httpRequest, response);
                            }
                        })];
                });
            });
        };
        ThrottlingRetryPolicy.prototype._defaultResponseHandler = function (httpRequest, httpResponse) {
            return __awaiter(this, void 0, void 0, function () {
                var retryAfterHeader, delayInMs;
                var _this = this;
                return __generator(this, function (_a) {
                    retryAfterHeader = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);
                    if (retryAfterHeader) {
                        delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);
                        if (delayInMs) {
                            return [2 /*return*/, delay(delayInMs).then(function (_) { return _this._nextPolicy.sendRequest(httpRequest); })];
                        }
                    }
                    return [2 /*return*/, httpResponse];
                });
            });
        };
        ThrottlingRetryPolicy.parseRetryAfterHeader = function (headerValue) {
            var retryAfterInSeconds = Number(headerValue);
            if (Number.isNaN(retryAfterInSeconds)) {
                return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);
            }
            else {
                return retryAfterInSeconds * 1000;
            }
        };
        ThrottlingRetryPolicy.parseDateRetryAfterHeader = function (headerValue) {
            try {
                var now = Date.now();
                var date = Date.parse(headerValue);
                var diff = date - now;
                return Number.isNaN(diff) ? undefined : diff;
            }
            catch (error) {
                return undefined;
            }
        };
        return ThrottlingRetryPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    function signingPolicy(authenticationProvider) {
        return {
            create: function (nextPolicy, options) {
                return new SigningPolicy(nextPolicy, options, authenticationProvider);
            }
        };
    }
    var SigningPolicy = /** @class */ (function (_super) {
        __extends(SigningPolicy, _super);
        function SigningPolicy(nextPolicy, options, authenticationProvider) {
            var _this = _super.call(this, nextPolicy, options) || this;
            _this.authenticationProvider = authenticationProvider;
            return _this;
        }
        SigningPolicy.prototype.signRequest = function (request) {
            return this.authenticationProvider.signRequest(request);
        };
        SigningPolicy.prototype.sendRequest = function (request) {
            var _this = this;
            return this.signRequest(request).then(function (nextRequest) {
                return _this._nextPolicy.sendRequest(nextRequest);
            });
        };
        return SigningPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    var DefaultKeepAliveOptions = {
        enable: true
    };
    function keepAlivePolicy(keepAliveOptions) {
        return {
            create: function (nextPolicy, options) {
                return new KeepAlivePolicy(nextPolicy, options, keepAliveOptions || DefaultKeepAliveOptions);
            }
        };
    }
    /**
     * KeepAlivePolicy is a policy used to control keep alive settings for every request.
     */
    var KeepAlivePolicy = /** @class */ (function (_super) {
        __extends(KeepAlivePolicy, _super);
        /**
         * Creates an instance of KeepAlivePolicy.
         *
         * @param nextPolicy -
         * @param options -
         * @param keepAliveOptions -
         */
        function KeepAlivePolicy(nextPolicy, options, keepAliveOptions) {
            var _this = _super.call(this, nextPolicy, options) || this;
            _this.keepAliveOptions = keepAliveOptions;
            return _this;
        }
        /**
         * Sends out request.
         *
         * @param request -
         * @returns
         */
        KeepAlivePolicy.prototype.sendRequest = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    request.keepAlive = this.keepAliveOptions.enable;
                    return [2 /*return*/, this._nextPolicy.sendRequest(request)];
                });
            });
        };
        return KeepAlivePolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    function tracingPolicy(tracingOptions) {
        if (tracingOptions === void 0) { tracingOptions = {}; }
        return {
            create: function (nextPolicy, options) {
                return new TracingPolicy(nextPolicy, options, tracingOptions);
            }
        };
    }
    var TracingPolicy = /** @class */ (function (_super) {
        __extends(TracingPolicy, _super);
        function TracingPolicy(nextPolicy, options, tracingOptions) {
            var _this = _super.call(this, nextPolicy, options) || this;
            _this.userAgent = tracingOptions.userAgent;
            return _this;
        }
        TracingPolicy.prototype.sendRequest = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var tracer, spanOptions, path, span, spanContext, traceParentHeader, traceState, response, serviceRequestId, err_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!request.spanOptions || !request.spanOptions.parent) {
                                return [2 /*return*/, this._nextPolicy.sendRequest(request)];
                            }
                            tracer = getTracer();
                            spanOptions = __assign(__assign({}, request.spanOptions), { kind: src_2.CLIENT });
                            path = URLBuilder.parse(request.url).getPath() || "/";
                            span = tracer.startSpan(path, spanOptions);
                            span.setAttributes({
                                "http.method": request.method,
                                "http.url": request.url,
                                requestId: request.requestId
                            });
                            if (this.userAgent) {
                                span.setAttribute("http.user_agent", this.userAgent);
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            spanContext = span.context();
                            traceParentHeader = getTraceParentHeader(spanContext);
                            if (traceParentHeader) {
                                request.headers.set("traceparent", traceParentHeader);
                                traceState = spanContext.traceState && spanContext.traceState.serialize();
                                // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent
                                if (traceState) {
                                    request.headers.set("tracestate", traceState);
                                }
                            }
                            return [4 /*yield*/, this._nextPolicy.sendRequest(request)];
                        case 2:
                            response = _a.sent();
                            span.setAttribute("http.status_code", response.status);
                            serviceRequestId = response.headers.get("x-ms-request-id");
                            if (serviceRequestId) {
                                span.setAttribute("serviceRequestId", serviceRequestId);
                            }
                            span.end();
                            return [2 /*return*/, response];
                        case 3:
                            err_1 = _a.sent();
                            span.end();
                            throw err_1;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        return TracingPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    var DisbleResponseDecompressionNotSupportedInBrowser = new Error("DisableResponseDecompressionPolicy is not supported in browser environment");
    /**
     * {@link DisableResponseDecompressionPolicy} is not supported in browser and attempting
     * to use it will results in error being thrown.
     */
    function disableResponseDecompressionPolicy() {
        return {
            create: function (_nextPolicy, _options) {
                throw DisbleResponseDecompressionNotSupportedInBrowser;
            }
        };
    }
    var DisableResponseDecompressionPolicy = /** @class */ (function (_super) {
        __extends(DisableResponseDecompressionPolicy, _super);
        function DisableResponseDecompressionPolicy(nextPolicy, options) {
            var _this = _super.call(this, nextPolicy, options) || this;
            throw DisbleResponseDecompressionNotSupportedInBrowser;
        }
        DisableResponseDecompressionPolicy.prototype.sendRequest = function (_request) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    throw DisbleResponseDecompressionNotSupportedInBrowser;
                });
            });
        };
        return DisableResponseDecompressionPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    function ndJsonPolicy() {
        return {
            create: function (nextPolicy, options) {
                return new NdJsonPolicy(nextPolicy, options);
            }
        };
    }
    /**
     * NdJsonPolicy that formats a JSON array as newline-delimited JSON
     */
    var NdJsonPolicy = /** @class */ (function (_super) {
        __extends(NdJsonPolicy, _super);
        /**
         * Creates an instance of KeepAlivePolicy.
         */
        function NdJsonPolicy(nextPolicy, options) {
            return _super.call(this, nextPolicy, options) || this;
        }
        /**
         * Sends a request.
         */
        NdJsonPolicy.prototype.sendRequest = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var body;
                return __generator(this, function (_a) {
                    // There currently isn't a good way to bypass the serializer
                    if (typeof request.body === "string" && request.body.startsWith("[")) {
                        body = JSON.parse(request.body);
                        if (Array.isArray(body)) {
                            request.body = body.map(function (item) { return JSON.stringify(item) + "\n"; }).join("");
                        }
                    }
                    return [2 /*return*/, this._nextPolicy.sendRequest(request)];
                });
            });
        };
        return NdJsonPolicy;
    }(BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.
    var cachedHttpClient;
    function getCachedDefaultHttpClient() {
        if (!cachedHttpClient) {
            cachedHttpClient = new XhrHttpClient();
        }
        return cachedHttpClient;
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * ServiceClient sends service requests and receives responses.
     */
    var ServiceClient = /** @class */ (function () {
        /**
         * The ServiceClient constructor
         * @param credentials - The credentials used for authentication with the service.
         * @param options - The service client options that govern the behavior of the client.
         */
        function ServiceClient(credentials, 
        /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */
        options) {
            var _this = this;
            if (!options) {
                options = {};
            }
            this._withCredentials = options.withCredentials || false;
            this._httpClient = options.httpClient || getCachedDefaultHttpClient();
            this._requestPolicyOptions = new RequestPolicyOptions(options.httpPipelineLogger);
            var requestPolicyFactories;
            if (Array.isArray(options.requestPolicyFactories)) {
                logger$4.info("ServiceClient: using custom request policies");
                requestPolicyFactories = options.requestPolicyFactories;
            }
            else {
                var authPolicyFactory = undefined;
                if (isTokenCredential(credentials)) {
                    logger$4.info("ServiceClient: creating bearer token authentication policy from provided credentials");
                    // Create a wrapped RequestPolicyFactory here so that we can provide the
                    // correct scope to the BearerTokenAuthenticationPolicy at the first time
                    // one is requested.  This is needed because generated ServiceClient
                    // implementations do not set baseUri until after ServiceClient's constructor
                    // is finished, leaving baseUri empty at the time when it is needed to
                    // build the correct scope name.
                    var wrappedPolicyFactory = function () {
                        var bearerTokenPolicyFactory = undefined;
                        // eslint-disable-next-line @typescript-eslint/no-this-alias
                        var serviceClient = _this;
                        var serviceClientOptions = options;
                        return {
                            create: function (nextPolicy, createOptions) {
                                var credentialScopes = getCredentialScopes(serviceClientOptions, serviceClient.baseUri);
                                if (!credentialScopes) {
                                    throw new Error("When using credential, the ServiceClient must contain a baseUri or a credentialScopes in ServiceClientOptions. Unable to create a bearerTokenAuthenticationPolicy");
                                }
                                if (bearerTokenPolicyFactory === undefined || bearerTokenPolicyFactory === null) {
                                    bearerTokenPolicyFactory = bearerTokenAuthenticationPolicy(credentials, credentialScopes);
                                }
                                return bearerTokenPolicyFactory.create(nextPolicy, createOptions);
                            }
                        };
                    };
                    authPolicyFactory = wrappedPolicyFactory();
                }
                else if (credentials && typeof credentials.signRequest === "function") {
                    logger$4.info("ServiceClient: creating signing policy from provided credentials");
                    authPolicyFactory = signingPolicy(credentials);
                }
                else if (credentials !== undefined && credentials !== null) {
                    throw new Error("The credentials argument must implement the TokenCredential interface");
                }
                logger$4.info("ServiceClient: using default request policies");
                requestPolicyFactories = createDefaultRequestPolicyFactories(authPolicyFactory, options);
                if (options.requestPolicyFactories) {
                    // options.requestPolicyFactories can also be a function that manipulates
                    // the default requestPolicyFactories array
                    var newRequestPolicyFactories = options.requestPolicyFactories(requestPolicyFactories);
                    if (newRequestPolicyFactories) {
                        requestPolicyFactories = newRequestPolicyFactories;
                    }
                }
            }
            this._requestPolicyFactories = requestPolicyFactories;
        }
        /**
         * Send the provided httpRequest.
         */
        ServiceClient.prototype.sendRequest = function (options) {
            if (options === null || options === undefined || typeof options !== "object") {
                throw new Error("options cannot be null or undefined and it must be of type object.");
            }
            var httpRequest;
            try {
                if (isWebResourceLike(options)) {
                    options.validateRequestProperties();
                    httpRequest = options;
                }
                else {
                    httpRequest = new WebResource();
                    httpRequest = httpRequest.prepare(options);
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            var httpPipeline = this._httpClient;
            if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {
                for (var i = this._requestPolicyFactories.length - 1; i >= 0; --i) {
                    httpPipeline = this._requestPolicyFactories[i].create(httpPipeline, this._requestPolicyOptions);
                }
            }
            return httpPipeline.sendRequest(httpRequest);
        };
        /**
         * Send an HTTP request that is populated using the provided OperationSpec.
         * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.
         * @param operationSpec - The OperationSpec to use to populate the httpRequest.
         * @param callback - The callback to call when the response is received.
         */
        ServiceClient.prototype.sendOperationRequest = function (operationArguments, operationSpec, callback) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var serializerOptions, httpRequest, result, baseUri, requestUrl, _i, _b, urlParameter, urlParameterValue, _c, _d, queryParameter, queryParameterValue, index, item, index, contentType, _e, _f, headerParameter, headerValue, headerCollectionPrefix, _g, _h, key, options, customHeaderName, rawResponse, sendRequestError, error_1, error_2, cb;
                return __generator(this, function (_j) {
                    switch (_j.label) {
                        case 0:
                            if (typeof operationArguments.options === "function") {
                                callback = operationArguments.options;
                                operationArguments.options = undefined;
                            }
                            serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;
                            httpRequest = new WebResource();
                            _j.label = 1;
                        case 1:
                            _j.trys.push([1, 6, , 7]);
                            baseUri = operationSpec.baseUrl || this.baseUri;
                            if (!baseUri) {
                                throw new Error("If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.");
                            }
                            httpRequest.method = operationSpec.httpMethod;
                            httpRequest.operationSpec = operationSpec;
                            requestUrl = URLBuilder.parse(baseUri);
                            if (operationSpec.path) {
                                requestUrl.appendPath(operationSpec.path);
                            }
                            if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {
                                for (_i = 0, _b = operationSpec.urlParameters; _i < _b.length; _i++) {
                                    urlParameter = _b[_i];
                                    urlParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, urlParameter, operationSpec.serializer);
                                    urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, getPathStringFromParameter(urlParameter), serializerOptions);
                                    if (!urlParameter.skipEncoding) {
                                        urlParameterValue = encodeURIComponent(urlParameterValue);
                                    }
                                    requestUrl.replaceAll("{" + (urlParameter.mapper.serializedName || getPathStringFromParameter(urlParameter)) + "}", urlParameterValue);
                                }
                            }
                            if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {
                                for (_c = 0, _d = operationSpec.queryParameters; _c < _d.length; _c++) {
                                    queryParameter = _d[_c];
                                    queryParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, queryParameter, operationSpec.serializer);
                                    if (queryParameterValue !== undefined && queryParameterValue !== null) {
                                        queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter), serializerOptions);
                                        if (queryParameter.collectionFormat !== undefined &&
                                            queryParameter.collectionFormat !== null) {
                                            if (queryParameter.collectionFormat === QueryCollectionFormat.Multi) {
                                                if (queryParameterValue.length === 0) {
                                                    // The collection is empty, no need to try serializing the current queryParam
                                                    continue;
                                                }
                                                else {
                                                    for (index in queryParameterValue) {
                                                        item = queryParameterValue[index];
                                                        queryParameterValue[index] =
                                                            item === undefined || item === null ? "" : item.toString();
                                                    }
                                                }
                                            }
                                            else if (queryParameter.collectionFormat === QueryCollectionFormat.Ssv ||
                                                queryParameter.collectionFormat === QueryCollectionFormat.Tsv) {
                                                queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);
                                            }
                                        }
                                        if (!queryParameter.skipEncoding) {
                                            if (Array.isArray(queryParameterValue)) {
                                                for (index in queryParameterValue) {
                                                    if (queryParameterValue[index] !== undefined &&
                                                        queryParameterValue[index] !== null) {
                                                        queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);
                                                    }
                                                }
                                            }
                                            else {
                                                queryParameterValue = encodeURIComponent(queryParameterValue);
                                            }
                                        }
                                        if (queryParameter.collectionFormat !== undefined &&
                                            queryParameter.collectionFormat !== null &&
                                            queryParameter.collectionFormat !== QueryCollectionFormat.Multi &&
                                            queryParameter.collectionFormat !== QueryCollectionFormat.Ssv &&
                                            queryParameter.collectionFormat !== QueryCollectionFormat.Tsv) {
                                            queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);
                                        }
                                        requestUrl.setQueryParameter(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);
                                    }
                                }
                            }
                            httpRequest.url = requestUrl.toString();
                            contentType = operationSpec.contentType || this.requestContentType;
                            if (contentType && operationSpec.requestBody) {
                                httpRequest.headers.set("Content-Type", contentType);
                            }
                            if (operationSpec.headerParameters) {
                                for (_e = 0, _f = operationSpec.headerParameters; _e < _f.length; _e++) {
                                    headerParameter = _f[_e];
                                    headerValue = getOperationArgumentValueFromParameter(this, operationArguments, headerParameter, operationSpec.serializer);
                                    if (headerValue !== undefined && headerValue !== null) {
                                        headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter), serializerOptions);
                                        headerCollectionPrefix = headerParameter.mapper
                                            .headerCollectionPrefix;
                                        if (headerCollectionPrefix) {
                                            for (_g = 0, _h = Object.keys(headerValue); _g < _h.length; _g++) {
                                                key = _h[_g];
                                                httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);
                                            }
                                        }
                                        else {
                                            httpRequest.headers.set(headerParameter.mapper.serializedName ||
                                                getPathStringFromParameter(headerParameter), headerValue);
                                        }
                                    }
                                }
                            }
                            options = operationArguments.options;
                            if (options) {
                                if (options.customHeaders) {
                                    for (customHeaderName in options.customHeaders) {
                                        httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);
                                    }
                                }
                                if (options.abortSignal) {
                                    httpRequest.abortSignal = options.abortSignal;
                                }
                                if (options.timeout) {
                                    httpRequest.timeout = options.timeout;
                                }
                                if (options.onUploadProgress) {
                                    httpRequest.onUploadProgress = options.onUploadProgress;
                                }
                                if (options.onDownloadProgress) {
                                    httpRequest.onDownloadProgress = options.onDownloadProgress;
                                }
                                if (options.spanOptions) {
                                    httpRequest.spanOptions = options.spanOptions;
                                }
                                if (options.shouldDeserialize !== undefined && options.shouldDeserialize !== null) {
                                    httpRequest.shouldDeserialize = options.shouldDeserialize;
                                }
                            }
                            httpRequest.withCredentials = this._withCredentials;
                            serializeRequestBody(this, httpRequest, operationArguments, operationSpec);
                            if (httpRequest.streamResponseStatusCodes === undefined) {
                                httpRequest.streamResponseStatusCodes = getStreamResponseStatusCodes(operationSpec);
                            }
                            rawResponse = void 0;
                            sendRequestError = void 0;
                            _j.label = 2;
                        case 2:
                            _j.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, this.sendRequest(httpRequest)];
                        case 3:
                            rawResponse = _j.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            error_1 = _j.sent();
                            sendRequestError = error_1;
                            return [3 /*break*/, 5];
                        case 5:
                            if (sendRequestError) {
                                if (sendRequestError.response) {
                                    sendRequestError.details = flattenResponse(sendRequestError.response, operationSpec.responses[sendRequestError.statusCode] ||
                                        operationSpec.responses["default"]);
                                }
                                result = Promise.reject(sendRequestError);
                            }
                            else {
                                result = Promise.resolve(flattenResponse(rawResponse, operationSpec.responses[rawResponse.status]));
                            }
                            return [3 /*break*/, 7];
                        case 6:
                            error_2 = _j.sent();
                            result = Promise.reject(error_2);
                            return [3 /*break*/, 7];
                        case 7:
                            cb = callback;
                            if (cb) {
                                result
                                    .then(function (res) { return cb(null, res._response.parsedBody, res._response.request, res._response); })
                                    .catch(function (err) { return cb(err); });
                            }
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        return ServiceClient;
    }());
    function serializeRequestBody(serviceClient, httpRequest, operationArguments, operationSpec) {
        var _a, _b, _c, _d, _e, _f;
        var serializerOptions = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions) !== null && _b !== void 0 ? _b : {};
        var updatedOptions = {
            rootName: (_c = serializerOptions.rootName) !== null && _c !== void 0 ? _c : "",
            includeRoot: (_d = serializerOptions.includeRoot) !== null && _d !== void 0 ? _d : false,
            xmlCharKey: (_e = serializerOptions.xmlCharKey) !== null && _e !== void 0 ? _e : XML_CHARKEY
        };
        var xmlCharKey = serializerOptions.xmlCharKey;
        if (operationSpec.requestBody && operationSpec.requestBody.mapper) {
            httpRequest.body = getOperationArgumentValueFromParameter(serviceClient, operationArguments, operationSpec.requestBody, operationSpec.serializer);
            var bodyMapper = operationSpec.requestBody.mapper;
            var required = bodyMapper.required, xmlName = bodyMapper.xmlName, xmlElementName = bodyMapper.xmlElementName, serializedName = bodyMapper.serializedName, xmlNamespace = bodyMapper.xmlNamespace, xmlNamespacePrefix = bodyMapper.xmlNamespacePrefix;
            var typeName = bodyMapper.type.name;
            try {
                if ((httpRequest.body !== undefined && httpRequest.body !== null) || required) {
                    var requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);
                    httpRequest.body = operationSpec.serializer.serialize(bodyMapper, httpRequest.body, requestBodyParameterPathString, updatedOptions);
                    var isStream = typeName === MapperType.Stream;
                    if (operationSpec.isXML) {
                        var xmlnsKey = xmlNamespacePrefix ? "xmlns:" + xmlNamespacePrefix : "xmlns";
                        var value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, httpRequest.body, updatedOptions);
                        if (typeName === MapperType.Sequence) {
                            httpRequest.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), {
                                rootName: xmlName || serializedName,
                                xmlCharKey: xmlCharKey
                            });
                        }
                        else if (!isStream) {
                            httpRequest.body = stringifyXML(value, {
                                rootName: xmlName || serializedName,
                                xmlCharKey: xmlCharKey
                            });
                        }
                    }
                    else if (typeName === MapperType.String &&
                        (((_f = operationSpec.contentType) === null || _f === void 0 ? void 0 : _f.match("text/plain")) || operationSpec.mediaType === "text")) {
                        // the String serializer has validated that request body is a string
                        // so just send the string.
                        return;
                    }
                    else if (!isStream) {
                        httpRequest.body = JSON.stringify(httpRequest.body);
                    }
                }
            }
            catch (error) {
                throw new Error("Error \"" + error.message + "\" occurred in serializing the payload - " + JSON.stringify(serializedName, undefined, "  ") + ".");
            }
        }
        else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {
            httpRequest.formData = {};
            for (var _i = 0, _g = operationSpec.formDataParameters; _i < _g.length; _i++) {
                var formDataParameter = _g[_i];
                var formDataParameterValue = getOperationArgumentValueFromParameter(serviceClient, operationArguments, formDataParameter, operationSpec.serializer);
                if (formDataParameterValue !== undefined && formDataParameterValue !== null) {
                    var formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);
                    httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter), updatedOptions);
                }
            }
        }
    }
    /**
     * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself
     */
    function getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {
        var _a;
        // Composite and Sequence schemas already got their root namespace set during serialization
        // We just need to add xmlns to the other schema types
        if (xmlNamespace && !["Composite", "Sequence", "Dictionary"].includes(typeName)) {
            var result = {};
            result[options.xmlCharKey] = serializedValue;
            result[XML_ATTRKEY] = (_a = {}, _a[xmlnsKey] = xmlNamespace, _a);
            return result;
        }
        return serializedValue;
    }
    function getValueOrFunctionResult(value, defaultValueCreator) {
        var result;
        if (typeof value === "string") {
            result = value;
        }
        else {
            result = defaultValueCreator();
            if (typeof value === "function") {
                result = value(result);
            }
        }
        return result;
    }
    function createDefaultRequestPolicyFactories(authPolicyFactory, options) {
        var factories = [];
        if (options.generateClientRequestIdHeader) {
            factories.push(generateClientRequestIdPolicy(options.clientRequestIdHeaderName));
        }
        if (authPolicyFactory) {
            factories.push(authPolicyFactory);
        }
        var userAgentHeaderName = getValueOrFunctionResult(options.userAgentHeaderName, getDefaultUserAgentHeaderName);
        var userAgentHeaderValue = getValueOrFunctionResult(options.userAgent, getDefaultUserAgentValue);
        if (userAgentHeaderName && userAgentHeaderValue) {
            factories.push(userAgentPolicy({ key: userAgentHeaderName, value: userAgentHeaderValue }));
        }
        factories.push(redirectPolicy());
        factories.push(rpRegistrationPolicy(options.rpRegistrationRetryTimeout));
        if (!options.noRetryPolicy) {
            factories.push(exponentialRetryPolicy());
            factories.push(systemErrorRetryPolicy());
            factories.push(throttlingRetryPolicy());
        }
        factories.push(deserializationPolicy(options.deserializationContentTypes));
        factories.push(logPolicy({ logger: logger$4.info }));
        return factories;
    }
    function createPipelineFromOptions(pipelineOptions, authPolicyFactory) {
        var requestPolicyFactories = [];
        if (pipelineOptions.sendStreamingJson) {
            requestPolicyFactories.push(ndJsonPolicy());
        }
        var userAgentValue = undefined;
        if (pipelineOptions.userAgentOptions && pipelineOptions.userAgentOptions.userAgentPrefix) {
            var userAgentInfo = [];
            userAgentInfo.push(pipelineOptions.userAgentOptions.userAgentPrefix);
            // Add the default user agent value if it isn't already specified
            // by the userAgentPrefix option.
            var defaultUserAgentInfo = getDefaultUserAgentValue();
            if (userAgentInfo.indexOf(defaultUserAgentInfo) === -1) {
                userAgentInfo.push(defaultUserAgentInfo);
            }
            userAgentValue = userAgentInfo.join(" ");
        }
        var keepAliveOptions = __assign(__assign({}, DefaultKeepAliveOptions), pipelineOptions.keepAliveOptions);
        var retryOptions = __assign(__assign({}, DefaultRetryOptions), pipelineOptions.retryOptions);
        var redirectOptions = __assign(__assign({}, DefaultRedirectOptions), pipelineOptions.redirectOptions);
        var deserializationOptions = __assign(__assign({}, DefaultDeserializationOptions), pipelineOptions.deserializationOptions);
        var loggingOptions = __assign({}, pipelineOptions.loggingOptions);
        requestPolicyFactories.push(tracingPolicy({ userAgent: userAgentValue }), keepAlivePolicy(keepAliveOptions), userAgentPolicy({ value: userAgentValue }), generateClientRequestIdPolicy(), deserializationPolicy(deserializationOptions.expectedContentTypes), throttlingRetryPolicy(), systemErrorRetryPolicy(), exponentialRetryPolicy(retryOptions.maxRetries, retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs));
        if (redirectOptions.handleRedirects) {
            requestPolicyFactories.push(redirectPolicy(redirectOptions.maxRetries));
        }
        if (authPolicyFactory) {
            requestPolicyFactories.push(authPolicyFactory);
        }
        requestPolicyFactories.push(logPolicy(loggingOptions));
        if (isNode && pipelineOptions.decompressResponse === false) {
            requestPolicyFactories.push(disableResponseDecompressionPolicy());
        }
        return {
            httpClient: pipelineOptions.httpClient,
            requestPolicyFactories: requestPolicyFactories
        };
    }
    function getOperationArgumentValueFromParameter(serviceClient, operationArguments, parameter, serializer) {
        return getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameter.parameterPath, parameter.mapper, serializer);
    }
    function getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameterPath, parameterMapper, serializer) {
        var _a;
        var value;
        if (typeof parameterPath === "string") {
            parameterPath = [parameterPath];
        }
        var serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;
        if (Array.isArray(parameterPath)) {
            if (parameterPath.length > 0) {
                if (parameterMapper.isConstant) {
                    value = parameterMapper.defaultValue;
                }
                else {
                    var propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);
                    if (!propertySearchResult.propertyFound) {
                        propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);
                    }
                    var useDefaultValue = false;
                    if (!propertySearchResult.propertyFound) {
                        useDefaultValue =
                            parameterMapper.required ||
                                (parameterPath[0] === "options" && parameterPath.length === 2);
                    }
                    value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;
                }
                // Serialize just for validation purposes.
                var parameterPathString = getPathStringFromParameterPath(parameterPath, parameterMapper);
                serializer.serialize(parameterMapper, value, parameterPathString, serializerOptions);
            }
        }
        else {
            if (parameterMapper.required) {
                value = {};
            }
            for (var propertyName in parameterPath) {
                var propertyMapper = parameterMapper.type.modelProperties[propertyName];
                var propertyPath = parameterPath[propertyName];
                var propertyValue = getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, propertyPath, propertyMapper, serializer);
                // Serialize just for validation purposes.
                var propertyPathString = getPathStringFromParameterPath(propertyPath, propertyMapper);
                serializer.serialize(propertyMapper, propertyValue, propertyPathString, serializerOptions);
                if (propertyValue !== undefined && propertyValue !== null) {
                    if (!value) {
                        value = {};
                    }
                    value[propertyName] = propertyValue;
                }
            }
        }
        return value;
    }
    function getPropertyFromParameterPath(parent, parameterPath) {
        var result = { propertyFound: false };
        var i = 0;
        for (; i < parameterPath.length; ++i) {
            var parameterPathPart = parameterPath[i];
            // Make sure to check inherited properties too, so don't use hasOwnProperty().
            if (parent !== undefined && parent !== null && parameterPathPart in parent) {
                parent = parent[parameterPathPart];
            }
            else {
                break;
            }
        }
        if (i === parameterPath.length) {
            result.propertyValue = parent;
            result.propertyFound = true;
        }
        return result;
    }
    function flattenResponse(_response, responseSpec) {
        var parsedHeaders = _response.parsedHeaders;
        var bodyMapper = responseSpec && responseSpec.bodyMapper;
        var addOperationResponse = function (obj) {
            return Object.defineProperty(obj, "_response", {
                value: _response
            });
        };
        if (bodyMapper) {
            var typeName = bodyMapper.type.name;
            if (typeName === "Stream") {
                return addOperationResponse(__assign(__assign({}, parsedHeaders), { blobBody: _response.blobBody, readableStreamBody: _response.readableStreamBody }));
            }
            var modelProperties_1 = (typeName === "Composite" && bodyMapper.type.modelProperties) || {};
            var isPageableResponse = Object.keys(modelProperties_1).some(function (k) { return modelProperties_1[k].serializedName === ""; });
            if (typeName === "Sequence" || isPageableResponse) {
                var arrayResponse = __spreadArrays((_response.parsedBody || []));
                for (var _i = 0, _a = Object.keys(modelProperties_1); _i < _a.length; _i++) {
                    var key = _a[_i];
                    if (modelProperties_1[key].serializedName) {
                        arrayResponse[key] = _response.parsedBody[key];
                    }
                }
                if (parsedHeaders) {
                    for (var _b = 0, _c = Object.keys(parsedHeaders); _b < _c.length; _b++) {
                        var key = _c[_b];
                        arrayResponse[key] = parsedHeaders[key];
                    }
                }
                addOperationResponse(arrayResponse);
                return arrayResponse;
            }
            if (typeName === "Composite" || typeName === "Dictionary") {
                return addOperationResponse(__assign(__assign({}, parsedHeaders), _response.parsedBody));
            }
        }
        if (bodyMapper ||
            _response.request.method === "HEAD" ||
            isPrimitiveType(_response.parsedBody)) {
            // primitive body types and HEAD booleans
            return addOperationResponse(__assign(__assign({}, parsedHeaders), { body: _response.parsedBody }));
        }
        return addOperationResponse(__assign(__assign({}, parsedHeaders), _response.parsedBody));
    }
    function getCredentialScopes(options, baseUri) {
        if (options === null || options === void 0 ? void 0 : options.credentialScopes) {
            var scopes = options.credentialScopes;
            return Array.isArray(scopes)
                ? scopes.map(function (scope) { return new url(scope).toString(); })
                : new url(scopes).toString();
        }
        if (baseUri) {
            return baseUri + "/.default";
        }
        return undefined;
    }

    // Copyright (c) Microsoft Corporation.
    // Licensed under the MIT license.
    function getIdentityTokenEndpointSuffix(tenantId) {
        if (tenantId === "adfs") {
            return "oauth2/token";
        }
        else {
            return "oauth2/v2.0/token";
        }
    }

    // Copyright (c) Microsoft Corporation.
    const DefaultAuthorityHost = "https://login.microsoftonline.com";
    class IdentityClient extends ServiceClient {
        constructor(options) {
            options = options || IdentityClient.getDefaultOptions();
            super(undefined, createPipelineFromOptions(Object.assign(Object.assign({}, options), { deserializationOptions: {
                    expectedContentTypes: {
                        json: ["application/json", "text/json", "text/plain"]
                    }
                } })));
            this.baseUri = this.authorityHost = options.authorityHost || DefaultAuthorityHost;
            if (!this.baseUri.startsWith("https:")) {
                throw new Error("The authorityHost address must use the 'https' protocol.");
            }
        }
        createWebResource(requestOptions) {
            const webResource = new WebResource();
            webResource.prepare(requestOptions);
            return webResource;
        }
        sendTokenRequest(webResource, expiresOnParser) {
            return __awaiter(this, void 0, void 0, function* () {
                logger.info(`IdentityClient: sending token request to [${webResource.url}]`);
                const response = yield this.sendRequest(webResource);
                expiresOnParser =
                    expiresOnParser ||
                        ((responseBody) => {
                            return Date.now() + responseBody.expires_in * 1000;
                        });
                if (response.status === 200 || response.status === 201) {
                    const token = {
                        accessToken: {
                            token: response.parsedBody.access_token,
                            expiresOnTimestamp: expiresOnParser(response.parsedBody)
                        },
                        refreshToken: response.parsedBody.refresh_token
                    };
                    logger.info(`IdentityClient: [${webResource.url}] token acquired, expires on ${token.accessToken.expiresOnTimestamp}`);
                    return token;
                }
                else {
                    const error = new AuthenticationError(response.status, response.parsedBody || response.bodyAsText);
                    logger.warning(`IdentityClient: authentication error. HTTP status: ${response.status}, ${error.errorResponse.errorDescription}`);
                    throw error;
                }
            });
        }
        refreshAccessToken(tenantId, clientId, scopes, refreshToken, clientSecret, expiresOnParser, options) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                if (refreshToken === undefined) {
                    return null;
                }
                logger.info(`IdentityClient: refreshing access token with client ID: ${clientId}, scopes: ${scopes} started`);
                const { span, updatedOptions } = createSpan("IdentityClient-refreshAccessToken", options);
                const refreshParams = {
                    grant_type: "refresh_token",
                    client_id: clientId,
                    refresh_token: refreshToken,
                    scope: scopes
                };
                if (clientSecret !== undefined) {
                    refreshParams.client_secret = clientSecret;
                }
                try {
                    const urlSuffix = getIdentityTokenEndpointSuffix(tenantId);
                    const webResource = this.createWebResource({
                        url: `${this.authorityHost}/${tenantId}/${urlSuffix}`,
                        method: "POST",
                        disableJsonStringifyOnBody: true,
                        deserializationMapper: undefined,
                        body: lib.stringify(refreshParams),
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        spanOptions: (_a = updatedOptions === null || updatedOptions === void 0 ? void 0 : updatedOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.spanOptions,
                        abortSignal: options && options.abortSignal
                    });
                    const response = yield this.sendTokenRequest(webResource, expiresOnParser);
                    logger.info(`IdentityClient: refreshed token for client ID: ${clientId}`);
                    return response;
                }
                catch (err) {
                    if (err.name === AuthenticationErrorName &&
                        err.errorResponse.error === "interaction_required") {
                        // It's likely that the refresh token has expired, so
                        // return null so that the credential implementation will
                        // initiate the authentication flow again.
                        logger.info(`IdentityClient: interaction required for client ID: ${clientId}`);
                        span.setStatus({
                            code: src_1.UNAUTHENTICATED,
                            message: err.message
                        });
                        return null;
                    }
                    else {
                        logger.warning(`IdentityClient: failed refreshing token for client ID: ${clientId}: ${err}`);
                        span.setStatus({
                            code: src_1.UNKNOWN,
                            message: err.message
                        });
                        throw err;
                    }
                }
                finally {
                    span.end();
                }
            });
        }
        sendGetRequestAsync(url, options) {
            const webResource = new WebResource(url, "GET", options === null || options === void 0 ? void 0 : options.body, {}, options === null || options === void 0 ? void 0 : options.headers);
            return this.sendRequest(webResource).then((response) => {
                return {
                    body: response.parsedBody,
                    headers: response.headers.rawHeaders(),
                    status: response.status
                };
            });
        }
        sendPostRequestAsync(url, options) {
            const webResource = new WebResource(url, "POST", options === null || options === void 0 ? void 0 : options.body, {}, options === null || options === void 0 ? void 0 : options.headers);
            return this.sendRequest(webResource).then((response) => {
                return {
                    body: response.parsedBody,
                    headers: response.headers.rawHeaders(),
                    status: response.status
                };
            });
        }
        static getDefaultOptions() {
            return {
                authorityHost: DefaultAuthorityHost
            };
        }
    }

    // Copyright (c) Microsoft Corporation.
    const logger$5 = credentialLogger("ClientSecretCredential");
    /**
     * Enables authentication to Azure Active Directory using a client secret
     * that was generated for an App Registration.  More information on how
     * to configure a client secret can be found here:
     *
     * https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application
     *
     */
    class ClientSecretCredential {
        /**
         * Creates an instance of the ClientSecretCredential with the details
         * needed to authenticate against Azure Active Directory with a client
         * secret.
         *
         * @param tenantId - The Azure Active Directory tenant (directory) ID.
         * @param clientId - The client (application) ID of an App Registration in the tenant.
         * @param clientSecret - A client secret that was generated for the App Registration.
         * @param options - Options for configuring the client which makes the authentication request.
         */
        constructor(tenantId, clientId, clientSecret, options) {
            this.identityClient = new IdentityClient(options);
            this.tenantId = tenantId;
            this.clientId = clientId;
            this.clientSecret = clientSecret;
        }
        /**
         * Authenticates with Azure Active Directory and returns an access token if
         * successful.  If authentication cannot be performed at this time, this method may
         * return null.  If an error occurs during authentication, an {@link AuthenticationError}
         * containing failure details will be thrown.
         *
         * @param scopes - The list of scopes for which the token will have access.
         * @param options - The options used to configure any requests this
         *                TokenCredential implementation might make.
         */
        getToken(scopes, options) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const { span, updatedOptions } = createSpan("ClientSecretCredential-getToken", options);
                try {
                    const urlSuffix = getIdentityTokenEndpointSuffix(this.tenantId);
                    const webResource = this.identityClient.createWebResource({
                        url: `${this.identityClient.authorityHost}/${this.tenantId}/${urlSuffix}`,
                        method: "POST",
                        disableJsonStringifyOnBody: true,
                        deserializationMapper: undefined,
                        body: lib.stringify({
                            response_type: "token",
                            grant_type: "client_credentials",
                            client_id: this.clientId,
                            client_secret: this.clientSecret,
                            scope: typeof scopes === "string" ? scopes : scopes.join(" ")
                        }),
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        abortSignal: options && options.abortSignal,
                        spanOptions: (_a = updatedOptions === null || updatedOptions === void 0 ? void 0 : updatedOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.spanOptions
                    });
                    const tokenResponse = yield this.identityClient.sendTokenRequest(webResource);
                    logger$5.getToken.info(formatSuccess(scopes));
                    return (tokenResponse && tokenResponse.accessToken) || null;
                }
                catch (err) {
                    const code = err.name === AuthenticationErrorName
                        ? src_1.UNAUTHENTICATED
                        : src_1.UNKNOWN;
                    span.setStatus({
                        code,
                        message: err.message
                    });
                    logger$5.getToken.info(formatError(scopes, err));
                    throw err;
                }
                finally {
                    span.end();
                }
            });
        }
    }

    // Copyright (c) Microsoft Corporation.
    const BrowserNotSupportedError$2 = new Error("ClientCertificateCredential is not supported in the browser.");
    const logger$6 = credentialLogger("ClientCertificateCredential");
    class ClientCertificateCredential {
        constructor() {
            logger$6.info(formatError("", BrowserNotSupportedError$2));
            throw BrowserNotSupportedError$2;
        }
        getToken() {
            logger$6.getToken.info(formatError("", BrowserNotSupportedError$2));
            throw BrowserNotSupportedError$2;
        }
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * The default tenant for authentication
     * @internal
     */
    const DefaultTenantId = "common";
    (function (AzureAuthorityHosts) {
        /**
         * China-based Azure Authority Host
         */
        AzureAuthorityHosts["AzureChina"] = "https://login.chinacloudapi.cn";
        /**
         * Germany-based Azure Authority Host
         */
        AzureAuthorityHosts["AzureGermany"] = "https://login.microsoftonline.de";
        /**
         * US Government Azure Authority Host
         */
        AzureAuthorityHosts["AzureGovernment"] = "https://login.microsoftonline.us";
        /**
         * Public Cloud Azure Authority Host
         */
        AzureAuthorityHosts["AzurePublicCloud"] = "https://login.microsoftonline.com";
    })(exports.AzureAuthorityHosts || (exports.AzureAuthorityHosts = {}));

    /*! @azure/msal-browser v2.9.0 2021-01-12 */
    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$1(d, b) {
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$1 = function() {
        __assign$1 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$1.apply(this, arguments);
    };

    function __awaiter$1(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$1(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __read$1(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread$1() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read$1(arguments[i]));
        return ar;
    }

    /*! @azure/msal-common v2.1.0 2021-01-12 */
    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1$1 = function(d, b) {
        extendStatics$1$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics$1$1(d, b);
    };

    function __extends$1$1(d, b) {
        extendStatics$1$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$1$1 = function() {
        __assign$1$1 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$1$1.apply(this, arguments);
    };

    function __awaiter$1$1(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$1$1(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __spreadArrays$1() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var Constants$1 = {
        LIBRARY_NAME: "MSAL.JS",
        SKU: "msal.js.common",
        // Prefix for all library cache entries
        CACHE_PREFIX: "msal",
        // default authority
        DEFAULT_AUTHORITY: "https://login.microsoftonline.com/common/",
        DEFAULT_AUTHORITY_HOST: "login.microsoftonline.com",
        // ADFS String
        ADFS: "adfs",
        // Default AAD Instance Discovery Endpoint
        AAD_INSTANCE_DISCOVERY_ENDPT: "https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=",
        // Resource delimiter - used for certain cache entries
        RESOURCE_DELIM: "|",
        // Placeholder for non-existent account ids/objects
        NO_ACCOUNT: "NO_ACCOUNT",
        // Claims
        CLAIMS: "claims",
        // Consumer UTID
        CONSUMER_UTID: "9188040d-6c67-4c5b-b112-36a304b66dad",
        // Default scopes
        OPENID_SCOPE: "openid",
        PROFILE_SCOPE: "profile",
        OFFLINE_ACCESS_SCOPE: "offline_access",
        // Default response type for authorization code flow
        CODE_RESPONSE_TYPE: "code",
        CODE_GRANT_TYPE: "authorization_code",
        RT_GRANT_TYPE: "refresh_token",
        FRAGMENT_RESPONSE_MODE: "fragment",
        S256_CODE_CHALLENGE_METHOD: "S256",
        URL_FORM_CONTENT_TYPE: "application/x-www-form-urlencoded;charset=utf-8",
        AUTHORIZATION_PENDING: "authorization_pending",
        NOT_DEFINED: "not_defined",
        EMPTY_STRING: "",
        FORWARD_SLASH: "/"
    };
    /**
     * Request header names
     */
    var HeaderNames;
    (function (HeaderNames) {
        HeaderNames["CONTENT_TYPE"] = "Content-Type";
        HeaderNames["X_CLIENT_CURR_TELEM"] = "x-client-current-telemetry";
        HeaderNames["X_CLIENT_LAST_TELEM"] = "x-client-last-telemetry";
        HeaderNames["RETRY_AFTER"] = "Retry-After";
        HeaderNames["X_MS_LIB_CAPABILITY"] = "x-ms-lib-capability";
        HeaderNames["X_MS_LIB_CAPABILITY_VALUE"] = "retry-after, h429";
    })(HeaderNames || (HeaderNames = {}));
    /**
     * Persistent cache keys MSAL which stay while user is logged in.
     */
    var PersistentCacheKeys;
    (function (PersistentCacheKeys) {
        PersistentCacheKeys["ID_TOKEN"] = "idtoken";
        PersistentCacheKeys["CLIENT_INFO"] = "client.info";
        PersistentCacheKeys["ADAL_ID_TOKEN"] = "adal.idtoken";
        PersistentCacheKeys["ERROR"] = "error";
        PersistentCacheKeys["ERROR_DESC"] = "error.description";
    })(PersistentCacheKeys || (PersistentCacheKeys = {}));
    /**
     * String constants related to AAD Authority
     */
    var AADAuthorityConstants;
    (function (AADAuthorityConstants) {
        AADAuthorityConstants["COMMON"] = "common";
        AADAuthorityConstants["ORGANIZATIONS"] = "organizations";
        AADAuthorityConstants["CONSUMERS"] = "consumers";
    })(AADAuthorityConstants || (AADAuthorityConstants = {}));
    /**
     * Keys in the hashParams sent by AAD Server
     */
    var AADServerParamKeys;
    (function (AADServerParamKeys) {
        AADServerParamKeys["CLIENT_ID"] = "client_id";
        AADServerParamKeys["REDIRECT_URI"] = "redirect_uri";
        AADServerParamKeys["RESPONSE_TYPE"] = "response_type";
        AADServerParamKeys["RESPONSE_MODE"] = "response_mode";
        AADServerParamKeys["GRANT_TYPE"] = "grant_type";
        AADServerParamKeys["CLAIMS"] = "claims";
        AADServerParamKeys["SCOPE"] = "scope";
        AADServerParamKeys["ERROR"] = "error";
        AADServerParamKeys["ERROR_DESCRIPTION"] = "error_description";
        AADServerParamKeys["ACCESS_TOKEN"] = "access_token";
        AADServerParamKeys["ID_TOKEN"] = "id_token";
        AADServerParamKeys["REFRESH_TOKEN"] = "refresh_token";
        AADServerParamKeys["EXPIRES_IN"] = "expires_in";
        AADServerParamKeys["STATE"] = "state";
        AADServerParamKeys["NONCE"] = "nonce";
        AADServerParamKeys["PROMPT"] = "prompt";
        AADServerParamKeys["SESSION_STATE"] = "session_state";
        AADServerParamKeys["CLIENT_INFO"] = "client_info";
        AADServerParamKeys["CODE"] = "code";
        AADServerParamKeys["CODE_CHALLENGE"] = "code_challenge";
        AADServerParamKeys["CODE_CHALLENGE_METHOD"] = "code_challenge_method";
        AADServerParamKeys["CODE_VERIFIER"] = "code_verifier";
        AADServerParamKeys["CLIENT_REQUEST_ID"] = "client-request-id";
        AADServerParamKeys["X_CLIENT_SKU"] = "x-client-SKU";
        AADServerParamKeys["X_CLIENT_VER"] = "x-client-VER";
        AADServerParamKeys["X_CLIENT_OS"] = "x-client-OS";
        AADServerParamKeys["X_CLIENT_CPU"] = "x-client-CPU";
        AADServerParamKeys["POST_LOGOUT_URI"] = "post_logout_redirect_uri";
        AADServerParamKeys["ID_TOKEN_HINT"] = "id_token_hint";
        AADServerParamKeys["DEVICE_CODE"] = "device_code";
        AADServerParamKeys["CLIENT_SECRET"] = "client_secret";
        AADServerParamKeys["CLIENT_ASSERTION"] = "client_assertion";
        AADServerParamKeys["CLIENT_ASSERTION_TYPE"] = "client_assertion_type";
        AADServerParamKeys["TOKEN_TYPE"] = "token_type";
        AADServerParamKeys["REQ_CNF"] = "req_cnf";
        AADServerParamKeys["OBO_ASSERTION"] = "assertion";
        AADServerParamKeys["REQUESTED_TOKEN_USE"] = "requested_token_use";
        AADServerParamKeys["ON_BEHALF_OF"] = "on_behalf_of";
        AADServerParamKeys["FOCI"] = "foci";
    })(AADServerParamKeys || (AADServerParamKeys = {}));
    /**
     * Claims request keys
     */
    var ClaimsRequestKeys;
    (function (ClaimsRequestKeys) {
        ClaimsRequestKeys["ACCESS_TOKEN"] = "access_token";
        ClaimsRequestKeys["XMS_CC"] = "xms_cc";
    })(ClaimsRequestKeys || (ClaimsRequestKeys = {}));
    /**
     * we considered making this "enum" in the request instead of string, however it looks like the allowed list of
     * prompt values kept changing over past couple of years. There are some undocumented prompt values for some
     * internal partners too, hence the choice of generic "string" type instead of the "enum"
     */
    var PromptValue = {
        LOGIN: "login",
        SELECT_ACCOUNT: "select_account",
        CONSENT: "consent",
        NONE: "none",
    };
    /**
     * SSO Types - generated to populate hints
     */
    var SSOTypes;
    (function (SSOTypes) {
        SSOTypes["ACCOUNT"] = "account";
        SSOTypes["SID"] = "sid";
        SSOTypes["LOGIN_HINT"] = "login_hint";
        SSOTypes["ID_TOKEN"] = "id_token";
        SSOTypes["DOMAIN_HINT"] = "domain_hint";
        SSOTypes["ORGANIZATIONS"] = "organizations";
        SSOTypes["CONSUMERS"] = "consumers";
        SSOTypes["ACCOUNT_ID"] = "accountIdentifier";
        SSOTypes["HOMEACCOUNT_ID"] = "homeAccountIdentifier";
    })(SSOTypes || (SSOTypes = {}));
    /**
     * Disallowed extra query parameters.
     */
    var BlacklistedEQParams = [
        SSOTypes.SID,
        SSOTypes.LOGIN_HINT
    ];
    /**
     * allowed values for codeVerifier
     */
    var CodeChallengeMethodValues = {
        PLAIN: "plain",
        S256: "S256"
    };
    /**
     * allowed values for response_mode
     */
    var ResponseMode;
    (function (ResponseMode) {
        ResponseMode["QUERY"] = "query";
        ResponseMode["FRAGMENT"] = "fragment";
        ResponseMode["FORM_POST"] = "form_post";
    })(ResponseMode || (ResponseMode = {}));
    /**
     * allowed grant_type
     */
    var GrantType;
    (function (GrantType) {
        GrantType["IMPLICIT_GRANT"] = "implicit";
        GrantType["AUTHORIZATION_CODE_GRANT"] = "authorization_code";
        GrantType["CLIENT_CREDENTIALS_GRANT"] = "client_credentials";
        GrantType["RESOURCE_OWNER_PASSWORD_GRANT"] = "password";
        GrantType["REFRESH_TOKEN_GRANT"] = "refresh_token";
        GrantType["DEVICE_CODE_GRANT"] = "device_code";
        GrantType["JWT_BEARER"] = "urn:ietf:params:oauth:grant-type:jwt-bearer";
    })(GrantType || (GrantType = {}));
    /**
     * Account types in Cache
     */
    var CacheAccountType;
    (function (CacheAccountType) {
        CacheAccountType["MSSTS_ACCOUNT_TYPE"] = "MSSTS";
        CacheAccountType["ADFS_ACCOUNT_TYPE"] = "ADFS";
        CacheAccountType["MSAV1_ACCOUNT_TYPE"] = "MSA";
        CacheAccountType["GENERIC_ACCOUNT_TYPE"] = "Generic"; // NTLM, Kerberos, FBA, Basic etc
    })(CacheAccountType || (CacheAccountType = {}));
    /**
     * Separators used in cache
     */
    var Separators;
    (function (Separators) {
        Separators["CACHE_KEY_SEPARATOR"] = "-";
        Separators["CLIENT_INFO_SEPARATOR"] = ".";
    })(Separators || (Separators = {}));
    /**
     * Credential Type stored in the cache
     */
    var CredentialType;
    (function (CredentialType) {
        CredentialType["ID_TOKEN"] = "IdToken";
        CredentialType["ACCESS_TOKEN"] = "AccessToken";
        CredentialType["REFRESH_TOKEN"] = "RefreshToken";
    })(CredentialType || (CredentialType = {}));
    /**
     * Credential Type stored in the cache
     */
    var CacheSchemaType;
    (function (CacheSchemaType) {
        CacheSchemaType["ACCOUNT"] = "Account";
        CacheSchemaType["CREDENTIAL"] = "Credential";
        CacheSchemaType["ID_TOKEN"] = "IdToken";
        CacheSchemaType["ACCESS_TOKEN"] = "AccessToken";
        CacheSchemaType["REFRESH_TOKEN"] = "RefreshToken";
        CacheSchemaType["APP_METADATA"] = "AppMetadata";
        CacheSchemaType["TEMPORARY"] = "TempCache";
        CacheSchemaType["TELEMETRY"] = "Telemetry";
        CacheSchemaType["UNDEFINED"] = "Undefined";
        CacheSchemaType["THROTTLING"] = "Throttling";
    })(CacheSchemaType || (CacheSchemaType = {}));
    /**
     * Combine all cache types
     */
    var CacheType;
    (function (CacheType) {
        CacheType[CacheType["ADFS"] = 1001] = "ADFS";
        CacheType[CacheType["MSA"] = 1002] = "MSA";
        CacheType[CacheType["MSSTS"] = 1003] = "MSSTS";
        CacheType[CacheType["GENERIC"] = 1004] = "GENERIC";
        CacheType[CacheType["ACCESS_TOKEN"] = 2001] = "ACCESS_TOKEN";
        CacheType[CacheType["REFRESH_TOKEN"] = 2002] = "REFRESH_TOKEN";
        CacheType[CacheType["ID_TOKEN"] = 2003] = "ID_TOKEN";
        CacheType[CacheType["APP_METADATA"] = 3001] = "APP_METADATA";
        CacheType[CacheType["UNDEFINED"] = 9999] = "UNDEFINED";
    })(CacheType || (CacheType = {}));
    /**
     * More Cache related constants
     */
    var APP_METADATA = "appmetadata";
    var ClientInfo = "client_info";
    var THE_FAMILY_ID = "1";
    var SERVER_TELEM_CONSTANTS = {
        SCHEMA_VERSION: 2,
        MAX_HEADER_BYTES: 4000,
        CACHE_KEY: "server-telemetry",
        CATEGORY_SEPARATOR: "|",
        VALUE_SEPARATOR: ",",
        OVERFLOW_TRUE: "1",
        OVERFLOW_FALSE: "0",
        UNKNOWN_ERROR: "unknown_error"
    };
    /**
     * Type of the authentication request
     */
    var AuthenticationScheme;
    (function (AuthenticationScheme) {
        AuthenticationScheme["POP"] = "pop";
        AuthenticationScheme["BEARER"] = "Bearer";
    })(AuthenticationScheme || (AuthenticationScheme = {}));
    /**
     * Constants related to throttling
     */
    var ThrottlingConstants = {
        // Default time to throttle RequestThumbprint in seconds
        DEFAULT_THROTTLE_TIME_SECONDS: 60,
        // Default maximum time to throttle in seconds, overrides what the server sends back
        DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,
        // Prefix for storing throttling entries
        THROTTLING_PREFIX: "throttling"
    };
    var Errors = {
        INVALID_GRANT_ERROR: "invalid_grant",
        CLIENT_MISMATCH_ERROR: "client_mismatch",
    };
    /**
     * Password grant parameters
     */
    var PasswordGrantConstants;
    (function (PasswordGrantConstants) {
        PasswordGrantConstants["username"] = "username";
        PasswordGrantConstants["password"] = "password";
    })(PasswordGrantConstants || (PasswordGrantConstants = {}));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * AuthErrorMessage class containing string constants used by error codes and messages.
     */
    var AuthErrorMessage = {
        unexpectedError: {
            code: "unexpected_error",
            desc: "Unexpected error in authentication."
        }
    };
    /**
     * General error class thrown by the MSAL.js library.
     */
    var AuthError = /** @class */ (function (_super) {
        __extends$1$1(AuthError, _super);
        function AuthError(errorCode, errorMessage, suberror) {
            var _this = this;
            var errorString = errorMessage ? errorCode + ": " + errorMessage : errorCode;
            _this = _super.call(this, errorString) || this;
            Object.setPrototypeOf(_this, AuthError.prototype);
            _this.errorCode = errorCode || Constants$1.EMPTY_STRING;
            _this.errorMessage = errorMessage || "";
            _this.subError = suberror || "";
            _this.name = "AuthError";
            return _this;
        }
        /**
         * Creates an error that is thrown when something unexpected happens in the library.
         * @param errDesc
         */
        AuthError.createUnexpectedError = function (errDesc) {
            return new AuthError(AuthErrorMessage.unexpectedError.code, AuthErrorMessage.unexpectedError.desc + ": " + errDesc);
        };
        return AuthError;
    }(Error));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var DEFAULT_CRYPTO_IMPLEMENTATION = {
        createNewGuid: function () {
            var notImplErr = "Crypto interface - createNewGuid() has not been implemented";
            throw AuthError.createUnexpectedError(notImplErr);
        },
        base64Decode: function () {
            var notImplErr = "Crypto interface - base64Decode() has not been implemented";
            throw AuthError.createUnexpectedError(notImplErr);
        },
        base64Encode: function () {
            var notImplErr = "Crypto interface - base64Encode() has not been implemented";
            throw AuthError.createUnexpectedError(notImplErr);
        },
        generatePkceCodes: function () {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var notImplErr;
                return __generator$1$1(this, function (_a) {
                    notImplErr = "Crypto interface - generatePkceCodes() has not been implemented";
                    throw AuthError.createUnexpectedError(notImplErr);
                });
            });
        },
        getPublicKeyThumbprint: function () {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var notImplErr;
                return __generator$1$1(this, function (_a) {
                    notImplErr = "Crypto interface - getPublicKeyThumbprint() has not been implemented";
                    throw AuthError.createUnexpectedError(notImplErr);
                });
            });
        },
        signJwt: function () {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var notImplErr;
                return __generator$1$1(this, function (_a) {
                    notImplErr = "Crypto interface - signJwt() has not been implemented";
                    throw AuthError.createUnexpectedError(notImplErr);
                });
            });
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * ClientAuthErrorMessage class containing string constants used by error codes and messages.
     */
    var ClientAuthErrorMessage = {
        clientInfoDecodingError: {
            code: "client_info_decoding_error",
            desc: "The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause."
        },
        clientInfoEmptyError: {
            code: "client_info_empty_error",
            desc: "The client info was empty. Please review the trace to determine the root cause."
        },
        tokenParsingError: {
            code: "token_parsing_error",
            desc: "Token cannot be parsed. Please review stack trace to determine root cause."
        },
        nullOrEmptyToken: {
            code: "null_or_empty_token",
            desc: "The token is null or empty. Please review the trace to determine the root cause."
        },
        endpointResolutionError: {
            code: "endpoints_resolution_error",
            desc: "Error: could not resolve endpoints. Please check network and try again."
        },
        hashNotDeserialized: {
            code: "hash_not_deserialized",
            desc: "The hash parameters could not be deserialized. Please review the trace to determine the root cause."
        },
        blankGuidGenerated: {
            code: "blank_guid_generated",
            desc: "The guid generated was blank. Please review the trace to determine the root cause."
        },
        invalidStateError: {
            code: "invalid_state",
            desc: "State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState()."
        },
        stateMismatchError: {
            code: "state_mismatch",
            desc: "State mismatch error. Please check your network. Continued requests may cause cache overflow."
        },
        stateNotFoundError: {
            code: "state_not_found",
            desc: "State not found"
        },
        nonceMismatchError: {
            code: "nonce_mismatch",
            desc: "Nonce mismatch error. This may be caused by a race condition in concurrent requests."
        },
        nonceNotFoundError: {
            code: "nonce_not_found",
            desc: "nonce not found"
        },
        noTokensFoundError: {
            code: "no_tokens_found",
            desc: "No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken()."
        },
        multipleMatchingTokens: {
            code: "multiple_matching_tokens",
            desc: "The cache contains multiple tokens satisfying the requirements. " +
                "Call AcquireToken again providing more requirements such as authority or account."
        },
        multipleMatchingAccounts: {
            code: "multiple_matching_accounts",
            desc: "The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account"
        },
        multipleMatchingAppMetadata: {
            code: "multiple_matching_appMetadata",
            desc: "The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata"
        },
        tokenRequestCannotBeMade: {
            code: "request_cannot_be_made",
            desc: "Token request cannot be made without authorization code or refresh token."
        },
        appendEmptyScopeError: {
            code: "cannot_append_empty_scope",
            desc: "Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info."
        },
        removeEmptyScopeError: {
            code: "cannot_remove_empty_scope",
            desc: "Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info."
        },
        appendScopeSetError: {
            code: "cannot_append_scopeset",
            desc: "Cannot append ScopeSet due to error."
        },
        emptyInputScopeSetError: {
            code: "empty_input_scopeset",
            desc: "Empty input ScopeSet cannot be processed."
        },
        DeviceCodePollingCancelled: {
            code: "device_code_polling_cancelled",
            desc: "Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true."
        },
        DeviceCodeExpired: {
            code: "device_code_expired",
            desc: "Device code is expired."
        },
        NoAccountInSilentRequest: {
            code: "no_account_in_silent_request",
            desc: "Please pass an account object, silent flow is not supported without account information"
        },
        invalidCacheRecord: {
            code: "invalid_cache_record",
            desc: "Cache record object was null or undefined."
        },
        invalidCacheEnvironment: {
            code: "invalid_cache_environment",
            desc: "Invalid environment when attempting to create cache entry"
        },
        noAccountFound: {
            code: "no_account_found",
            desc: "No account found in cache for given key."
        },
        CachePluginError: {
            code: "no cache plugin set on CacheManager",
            desc: "ICachePlugin needs to be set before using readFromStorage or writeFromStorage"
        },
        noCryptoObj: {
            code: "no_crypto_object",
            desc: "No crypto object detected. This is required for the following operation: "
        },
        invalidCacheType: {
            code: "invalid_cache_type",
            desc: "Invalid cache type"
        },
        unexpectedAccountType: {
            code: "unexpected_account_type",
            desc: "Unexpected account type."
        },
        unexpectedCredentialType: {
            code: "unexpected_credential_type",
            desc: "Unexpected credential type."
        },
        invalidAssertion: {
            code: "invalid_assertion",
            desc: "Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515"
        },
        invalidClientCredential: {
            code: "invalid_client_credential",
            desc: "Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential"
        },
        tokenRefreshRequired: {
            code: "token_refresh_required",
            desc: "Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired."
        },
        userTimeoutReached: {
            code: "user_timeout_reached",
            desc: "User defined timeout for device code polling reached",
        },
        tokenClaimsRequired: {
            code: "token_claims_cnf_required_for_signedjwt",
            desc: "Cannot generate a POP jwt if the token_claims are not populated"
        },
        noAuthorizationCodeFromServer: {
            code: "authorization_code_missing_from_server_response",
            desc: "Srver response does not contain an authorization code to proceed"
        }
    };
    /**
     * Error thrown when there is an error in the client code running on the browser.
     */
    var ClientAuthError = /** @class */ (function (_super) {
        __extends$1$1(ClientAuthError, _super);
        function ClientAuthError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            _this.name = "ClientAuthError";
            Object.setPrototypeOf(_this, ClientAuthError.prototype);
            return _this;
        }
        /**
         * Creates an error thrown when client info object doesn't decode correctly.
         * @param caughtError
         */
        ClientAuthError.createClientInfoDecodingError = function (caughtError) {
            return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + " Failed with error: " + caughtError);
        };
        /**
         * Creates an error thrown if the client info is empty.
         * @param rawClientInfo
         */
        ClientAuthError.createClientInfoEmptyError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, "" + ClientAuthErrorMessage.clientInfoEmptyError.desc);
        };
        /**
         * Creates an error thrown when the id token extraction errors out.
         * @param err
         */
        ClientAuthError.createTokenParsingError = function (caughtExtractionError) {
            return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + " Failed with error: " + caughtExtractionError);
        };
        /**
         * Creates an error thrown when the id token string is null or empty.
         * @param invalidRawTokenString
         */
        ClientAuthError.createTokenNullOrEmptyError = function (invalidRawTokenString) {
            return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + " Raw Token Value: " + invalidRawTokenString);
        };
        /**
         * Creates an error thrown when the endpoint discovery doesn't complete correctly.
         */
        ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {
            return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + " Detail: " + errDetail);
        };
        /**
         * Creates an error thrown when the hash cannot be deserialized.
         * @param hashParamObj
         */
        ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {
            return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + " Given Object: " + hashParamObj);
        };
        /**
         * Creates an error thrown when the state cannot be parsed.
         * @param invalidState
         */
        ClientAuthError.createInvalidStateError = function (invalidState, errorString) {
            return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + " Invalid State: " + invalidState + ", Root Err: " + errorString);
        };
        /**
         * Creates an error thrown when two states do not match.
         */
        ClientAuthError.createStateMismatchError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);
        };
        /**
         * Creates an error thrown when the state is not present
         * @param missingState
         */
        ClientAuthError.createStateNotFoundError = function (missingState) {
            return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, ClientAuthErrorMessage.stateNotFoundError.desc + ":  " + missingState);
        };
        /**
         * Creates an error thrown when the nonce does not match.
         */
        ClientAuthError.createNonceMismatchError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);
        };
        /**
         * Creates an error thrown when the mnonce is not present
         * @param missingNonce
         */
        ClientAuthError.createNonceNotFoundError = function (missingNonce) {
            return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, ClientAuthErrorMessage.nonceNotFoundError.desc + ":  " + missingNonce);
        };
        /**
         * Creates an error thrown when the authorization code required for a token request is null or empty.
         */
        ClientAuthError.createNoTokensFoundError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.noTokensFoundError.code, ClientAuthErrorMessage.noTokensFoundError.desc);
        };
        /**
         * Throws error when multiple tokens are in cache.
         */
        ClientAuthError.createMultipleMatchingTokensInCacheError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + ".");
        };
        /**
         * Throws error when multiple accounts are in cache for the given params
         */
        ClientAuthError.createMultipleMatchingAccountsInCacheError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);
        };
        /**
         * Throws error when multiple appMetada are in cache for the given clientId.
         */
        ClientAuthError.createMultipleMatchingAppMetadataInCacheError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);
        };
        /**
         * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.
         */
        ClientAuthError.createTokenRequestCannotBeMadeError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);
        };
        /**
         * Throws error when attempting to append a null, undefined or empty scope to a set
         * @param givenScope
         */
        ClientAuthError.createAppendEmptyScopeToSetError = function (givenScope) {
            return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + " Given Scope: " + givenScope);
        };
        /**
         * Throws error when attempting to append a null, undefined or empty scope to a set
         * @param givenScope
         */
        ClientAuthError.createRemoveEmptyScopeFromSetError = function (givenScope) {
            return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + " Given Scope: " + givenScope);
        };
        /**
         * Throws error when attempting to append null or empty ScopeSet.
         * @param appendError
         */
        ClientAuthError.createAppendScopeSetError = function (appendError) {
            return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + " Detail Error: " + appendError);
        };
        /**
         * Throws error if ScopeSet is null or undefined.
         * @param givenScopeSet
         */
        ClientAuthError.createEmptyInputScopeSetError = function (givenScopeSet) {
            return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, ClientAuthErrorMessage.emptyInputScopeSetError.desc + " Given ScopeSet: " + givenScopeSet);
        };
        /**
         * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow
         */
        ClientAuthError.createDeviceCodeCancelledError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, "" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);
        };
        /**
         * Throws error if device code is expired
         */
        ClientAuthError.createDeviceCodeExpiredError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, "" + ClientAuthErrorMessage.DeviceCodeExpired.desc);
        };
        /**
         * Throws error when silent requests are made without an account object
         */
        ClientAuthError.createNoAccountInSilentRequestError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, "" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);
        };
        /**
         * Throws error when cache record is null or undefined.
         */
        ClientAuthError.createNullOrUndefinedCacheRecord = function () {
            return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);
        };
        /**
         * Throws error when provided environment is not part of the CloudDiscoveryMetadata object
         */
        ClientAuthError.createInvalidCacheEnvironmentError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);
        };
        /**
         * Throws error when account is not found in cache.
         */
        ClientAuthError.createNoAccountFoundError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);
        };
        /**
         * Throws error if ICachePlugin not set on CacheManager.
         */
        ClientAuthError.createCachePluginError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, "" + ClientAuthErrorMessage.CachePluginError.desc);
        };
        /**
         * Throws error if crypto object not found.
         * @param operationName
         */
        ClientAuthError.createNoCryptoObjectError = function (operationName) {
            return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, "" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);
        };
        /**
         * Throws error if cache type is invalid.
         */
        ClientAuthError.createInvalidCacheTypeError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, "" + ClientAuthErrorMessage.invalidCacheType.desc);
        };
        /**
         * Throws error if unexpected account type.
         */
        ClientAuthError.createUnexpectedAccountTypeError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, "" + ClientAuthErrorMessage.unexpectedAccountType.desc);
        };
        /**
         * Throws error if unexpected credential type.
         */
        ClientAuthError.createUnexpectedCredentialTypeError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, "" + ClientAuthErrorMessage.unexpectedCredentialType.desc);
        };
        /**
         * Throws error if client assertion is not valid.
         */
        ClientAuthError.createInvalidAssertionError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, "" + ClientAuthErrorMessage.invalidAssertion.desc);
        };
        /**
         * Throws error if client assertion is not valid.
         */
        ClientAuthError.createInvalidCredentialError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, "" + ClientAuthErrorMessage.invalidClientCredential.desc);
        };
        /**
         * Throws error if token cannot be retrieved from cache due to refresh being required.
         */
        ClientAuthError.createRefreshRequiredError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);
        };
        /**
         * Throws error if the user defined timeout is reached.
         */
        ClientAuthError.createUserTimeoutReachedError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);
        };
        /*
         * Throws error if token claims are not populated for a signed jwt generation
         */
        ClientAuthError.createTokenClaimsRequiredError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);
        };
        /**
         * Throws error when the authorization code is missing from the server response
         */
        ClientAuthError.createNoAuthCodeInServerResponseError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);
        };
        return ClientAuthError;
    }(AuthError));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var StringUtils = /** @class */ (function () {
        function StringUtils() {
        }
        /**
         * decode a JWT
         *
         * @param authToken
         */
        StringUtils.decodeAuthToken = function (authToken) {
            if (StringUtils.isEmpty(authToken)) {
                throw ClientAuthError.createTokenNullOrEmptyError(authToken);
            }
            var tokenPartsRegex = /^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/;
            var matches = tokenPartsRegex.exec(authToken);
            if (!matches || matches.length < 4) {
                throw ClientAuthError.createTokenParsingError("Given token is malformed: " + JSON.stringify(authToken));
            }
            var crackedToken = {
                header: matches[1],
                JWSPayload: matches[2],
                JWSSig: matches[3]
            };
            return crackedToken;
        };
        /**
         * Check if a string is empty.
         *
         * @param str
         */
        StringUtils.isEmpty = function (str) {
            return (typeof str === "undefined" || !str || 0 === str.length);
        };
        StringUtils.startsWith = function (str, search) {
            return str.indexOf(search) === 0;
        };
        StringUtils.endsWith = function (str, search) {
            return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));
        };
        /**
         * Parses string into an object.
         *
         * @param query
         */
        StringUtils.queryStringToObject = function (query) {
            var match; // Regex for replacing addition symbol with a space
            var pl = /\+/g;
            var search = /([^&=]+)=([^&]*)/g;
            var decode = function (s) { return decodeURIComponent(decodeURIComponent(s.replace(pl, " "))); };
            var obj = {};
            match = search.exec(query);
            while (match) {
                obj[decode(match[1])] = decode(match[2]);
                match = search.exec(query);
            }
            return obj;
        };
        /**
         * Trims entries in an array.
         *
         * @param arr
         */
        StringUtils.trimArrayEntries = function (arr) {
            return arr.map(function (entry) { return entry.trim(); });
        };
        /**
         * Removes empty strings from array
         * @param arr
         */
        StringUtils.removeEmptyStringsFromArray = function (arr) {
            return arr.filter(function (entry) {
                return !StringUtils.isEmpty(entry);
            });
        };
        /**
         * Attempts to parse a string into JSON
         * @param str
         */
        StringUtils.jsonParseHelper = function (str) {
            try {
                return JSON.parse(str);
            }
            catch (e) {
                return null;
            }
        };
        /**
         * Tests if a given string matches a given pattern, with support for wildcards.
         * @param pattern Wildcard pattern to string match. Supports "*" for wildcards
         * @param input String to match against
         */
        StringUtils.matchPattern = function (pattern, input) {
            // https://stackoverflow.com/a/3117248/4888559
            var regex = new RegExp(pattern.replace(/\*/g, "[^ ]*"));
            return regex.test(input);
        };
        return StringUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Log message level.
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["Error"] = 0] = "Error";
        LogLevel[LogLevel["Warning"] = 1] = "Warning";
        LogLevel[LogLevel["Info"] = 2] = "Info";
        LogLevel[LogLevel["Verbose"] = 3] = "Verbose";
    })(LogLevel || (LogLevel = {}));
    /**
     * Class which facilitates logging of messages to a specific place.
     */
    var Logger$1 = /** @class */ (function () {
        function Logger(loggerOptions, packageName, packageVersion) {
            // Current log level, defaults to info.
            this.level = LogLevel.Info;
            var defaultLoggerCallback = function () { };
            this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;
            this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;
            this.level = loggerOptions.logLevel || LogLevel.Info;
            this.packageName = packageName || Constants$1.EMPTY_STRING;
            this.packageVersion = packageVersion || Constants$1.EMPTY_STRING;
        }
        /**
         * Create new Logger with existing configurations.
         */
        Logger.prototype.clone = function (packageName, packageVersion) {
            return new Logger({ loggerCallback: this.localCallback, piiLoggingEnabled: this.piiLoggingEnabled, logLevel: this.level }, packageName, packageVersion);
        };
        /**
         * Log message with required options.
         */
        Logger.prototype.logMessage = function (logMessage, options) {
            if ((options.logLevel > this.level) || (!this.piiLoggingEnabled && options.containsPii)) {
                return;
            }
            var timestamp = new Date().toUTCString();
            var logHeader = StringUtils.isEmpty(this.correlationId) ? "[" + timestamp + "] : " : "[" + timestamp + "] : [" + this.correlationId + "]";
            var log = logHeader + " : " + this.packageName + "@" + this.packageVersion + " : " + LogLevel[options.logLevel] + " - " + logMessage;
            // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? "-Pii": ""}${options.context ? `:${options.context}` : ""}`)(logMessage);
            this.executeCallback(options.logLevel, log, options.containsPii || false);
        };
        /**
         * Execute callback with message.
         */
        Logger.prototype.executeCallback = function (level, message, containsPii) {
            if (this.localCallback) {
                this.localCallback(level, message, containsPii);
            }
        };
        /**
         * Logs error messages.
         */
        Logger.prototype.error = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: LogLevel.Error,
                containsPii: false,
                correlationId: correlationId || ""
            });
        };
        /**
         * Logs error messages with PII.
         */
        Logger.prototype.errorPii = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: LogLevel.Error,
                containsPii: true,
                correlationId: correlationId || ""
            });
        };
        /**
         * Logs warning messages.
         */
        Logger.prototype.warning = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: LogLevel.Warning,
                containsPii: false,
                correlationId: correlationId || ""
            });
        };
        /**
         * Logs warning messages with PII.
         */
        Logger.prototype.warningPii = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: LogLevel.Warning,
                containsPii: true,
                correlationId: correlationId || ""
            });
        };
        /**
         * Logs info messages.
         */
        Logger.prototype.info = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: LogLevel.Info,
                containsPii: false,
                correlationId: correlationId || ""
            });
        };
        /**
         * Logs info messages with PII.
         */
        Logger.prototype.infoPii = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: LogLevel.Info,
                containsPii: true,
                correlationId: correlationId || ""
            });
        };
        /**
         * Logs verbose messages.
         */
        Logger.prototype.verbose = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: LogLevel.Verbose,
                containsPii: false,
                correlationId: correlationId || ""
            });
        };
        /**
         * Logs verbose messages with PII.
         */
        Logger.prototype.verbosePii = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: LogLevel.Verbose,
                containsPii: true,
                correlationId: correlationId || ""
            });
        };
        /**
         * Returns whether PII Logging is enabled or not.
         */
        Logger.prototype.isPiiLoggingEnabled = function () {
            return this.piiLoggingEnabled || false;
        };
        return Logger;
    }());

    var name = "@azure/msal-common";
    var version = "2.1.0";

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc
     *
     * Key:Value Schema:
     *
     * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>
     *
     * Value Schema:
     * {
     *      homeAccountId: home account identifier for the auth scheme,
     *      environment: entity that issued the token, represented as a full host
     *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
     *      clientId: client ID of the application
     *      secret: Actual credential as a string
     *      familyId: Family ID identifier, usually only used for refresh tokens
     *      realm: Full tenant or organizational identifier that the account belongs to
     *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
     *      oboAssertion: access token passed in as part of OBO request
     * }
     */
    var CredentialEntity = /** @class */ (function () {
        function CredentialEntity() {
        }
        /**
         * Generate Account Id key component as per the schema: <home_account_id>-<environment>
         */
        CredentialEntity.prototype.generateAccountId = function () {
            return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);
        };
        /**
         * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>
         */
        CredentialEntity.prototype.generateCredentialId = function () {
            return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);
        };
        /**
         * Generate target key component as per schema: <target>
         */
        CredentialEntity.prototype.generateTarget = function () {
            return CredentialEntity.generateTargetForCacheKey(this.target);
        };
        /**
         * generates credential key
         */
        CredentialEntity.prototype.generateCredentialKey = function () {
            return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId);
        };
        /**
         * returns the type of the cache (in this case credential)
         */
        CredentialEntity.prototype.generateType = function () {
            switch (this.credentialType) {
                case CredentialType.ID_TOKEN:
                    return CacheType.ID_TOKEN;
                case CredentialType.ACCESS_TOKEN:
                    return CacheType.ACCESS_TOKEN;
                case CredentialType.REFRESH_TOKEN:
                    return CacheType.REFRESH_TOKEN;
                default: {
                    throw ClientAuthError.createUnexpectedCredentialTypeError();
                }
            }
        };
        /**
         * helper function to return `CredentialType`
         * @param key
         */
        CredentialEntity.getCredentialType = function (key) {
            if (key.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) !== -1) {
                return CredentialType.ACCESS_TOKEN;
            }
            else if (key.indexOf(CredentialType.ID_TOKEN.toLowerCase()) !== -1) {
                return CredentialType.ID_TOKEN;
            }
            else if (key.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) !== -1) {
                return CredentialType.REFRESH_TOKEN;
            }
            return Constants$1.NOT_DEFINED;
        };
        /**
         * generates credential key
         */
        CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId) {
            var credentialKey = [
                this.generateAccountIdForCacheKey(homeAccountId, environment),
                this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),
                this.generateTargetForCacheKey(target),
            ];
            return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
        };
        /**
         * generates Account Id for keys
         * @param homeAccountId
         * @param environment
         */
        CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {
            var accountId = [homeAccountId, environment];
            return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
        };
        /**
         * Generates Credential Id for keys
         * @param credentialType
         * @param realm
         * @param clientId
         * @param familyId
         */
        CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {
            var clientOrFamilyId = credentialType === CredentialType.REFRESH_TOKEN
                ? familyId || clientId
                : clientId;
            var credentialId = [
                credentialType,
                clientOrFamilyId,
                realm || "",
            ];
            return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
        };
        /**
         * Generate target key component as per schema: <target>
         */
        CredentialEntity.generateTargetForCacheKey = function (scopes) {
            return (scopes || "").toLowerCase();
        };
        return CredentialEntity;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.
     */
    var ClientConfigurationErrorMessage = {
        redirectUriNotSet: {
            code: "redirect_uri_empty",
            desc: "A redirect URI is required for all calls, and none has been set."
        },
        postLogoutUriNotSet: {
            code: "post_logout_uri_empty",
            desc: "A post logout redirect has not been set."
        },
        claimsRequestParsingError: {
            code: "claims_request_parsing_error",
            desc: "Could not parse the given claims request object."
        },
        authorityUriInsecure: {
            code: "authority_uri_insecure",
            desc: "Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options"
        },
        urlParseError: {
            code: "url_parse_error",
            desc: "URL could not be parsed into appropriate segments."
        },
        urlEmptyError: {
            code: "empty_url_error",
            desc: "URL was empty or null."
        },
        emptyScopesError: {
            code: "empty_input_scopes_error",
            desc: "Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token."
        },
        nonArrayScopesError: {
            code: "nonarray_input_scopes_error",
            desc: "Scopes cannot be passed as non-array."
        },
        clientIdSingleScopeError: {
            code: "clientid_input_scopes_error",
            desc: "Client ID can only be provided as a single scope."
        },
        invalidPrompt: {
            code: "invalid_prompt_value",
            desc: "Supported prompt values are 'login', 'select_account', 'consent' and 'none'.  Please see here for valid configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options",
        },
        invalidClaimsRequest: {
            code: "invalid_claims",
            desc: "Given claims parameter must be a stringified JSON object."
        },
        tokenRequestEmptyError: {
            code: "token_request_empty",
            desc: "Token request was empty and not found in cache."
        },
        logoutRequestEmptyError: {
            code: "logout_request_empty",
            desc: "The logout request was null or undefined."
        },
        invalidCodeChallengeMethod: {
            code: "invalid_code_challenge_method",
            desc: "code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\"."
        },
        invalidCodeChallengeParams: {
            code: "pkce_params_missing",
            desc: "Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request"
        },
        knownAuthoritiesAndCloudDiscoveryMetadata: {
            code: "invalid_known_authorities",
            desc: "knownAuthorities and cloudDiscoveryMetadata cannot both be provided. Please provide cloudDiscoveryMetadata object for AAD, knownAuthorities otherwise."
        },
        invalidCloudDiscoveryMetadata: {
            code: "invalid_cloud_discovery_metadata",
            desc: "Invalid cloudDiscoveryMetadata provided. Must be a JSON object containing tenant_discovery_endpoint and metadata fields"
        },
        untrustedAuthority: {
            code: "untrusted_authority",
            desc: "The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter."
        },
        resourceRequestParametersRequired: {
            code: "resourceRequest_parameters_required",
            desc: "resourceRequestMethod and resourceRequestUri are required"
        }
    };
    /**
     * Error thrown when there is an error in configuration of the MSAL.js library.
     */
    var ClientConfigurationError = /** @class */ (function (_super) {
        __extends$1$1(ClientConfigurationError, _super);
        function ClientConfigurationError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            _this.name = "ClientConfigurationError";
            Object.setPrototypeOf(_this, ClientConfigurationError.prototype);
            return _this;
        }
        /**
         * Creates an error thrown when the redirect uri is empty (not set by caller)
         */
        ClientConfigurationError.createRedirectUriEmptyError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);
        };
        /**
         * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)
         */
        ClientConfigurationError.createPostLogoutRedirectUriEmptyError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);
        };
        /**
         * Creates an error thrown when the claims request could not be successfully parsed
         */
        ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + " Given value: " + claimsRequestParseError);
        };
        /**
         * Creates an error thrown if authority uri is given an insecure protocol.
         * @param urlString
         */
        ClientConfigurationError.createInsecureAuthorityUriError = function (urlString) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, ClientConfigurationErrorMessage.authorityUriInsecure.desc + " Given URI: " + urlString);
        };
        /**
         * Creates an error thrown if URL string does not parse into separate segments.
         * @param urlString
         */
        ClientConfigurationError.createUrlParseError = function (urlParseError) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, ClientConfigurationErrorMessage.urlParseError.desc + " Given Error: " + urlParseError);
        };
        /**
         * Creates an error thrown if URL string is empty or null.
         * @param urlString
         */
        ClientConfigurationError.createUrlEmptyError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);
        };
        /**
         * Error thrown when scopes are not an array
         * @param inputScopes
         */
        ClientConfigurationError.createScopesNonArrayError = function (inputScopes) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.nonArrayScopesError.code, ClientConfigurationErrorMessage.nonArrayScopesError.desc + " Given Scopes: " + inputScopes);
        };
        /**
         * Error thrown when scopes are empty.
         * @param scopesValue
         */
        ClientConfigurationError.createEmptyScopesArrayError = function (inputScopes) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, ClientConfigurationErrorMessage.emptyScopesError.desc + " Given Scopes: " + inputScopes);
        };
        /**
         * Error thrown when client id scope is not provided as single scope.
         * @param inputScopes
         */
        ClientConfigurationError.createClientIdSingleScopeError = function (inputScopes) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, ClientConfigurationErrorMessage.clientIdSingleScopeError.desc + " Given Scopes: " + inputScopes);
        };
        /**
         * Error thrown when prompt is not an allowed type.
         * @param promptValue
         */
        ClientConfigurationError.createInvalidPromptError = function (promptValue) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + " Given value: " + promptValue);
        };
        /**
         * Creates error thrown when claims parameter is not a stringified JSON object
         */
        ClientConfigurationError.createInvalidClaimsRequestError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);
        };
        /**
         * Throws error when token request is empty and nothing cached in storage.
         */
        ClientConfigurationError.createEmptyLogoutRequestError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);
        };
        /**
         * Throws error when token request is empty and nothing cached in storage.
         */
        ClientConfigurationError.createEmptyTokenRequestError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);
        };
        /**
         * Throws error when an invalid code_challenge_method is passed by the user
         */
        ClientConfigurationError.createInvalidCodeChallengeMethodError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);
        };
        /**
         * Throws error when both params: code_challenge and code_challenge_method are not passed together
         */
        ClientConfigurationError.createInvalidCodeChallengeParamsError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);
        };
        /**
         * Throws an error when the user passes both knownAuthorities and cloudDiscoveryMetadata
         */
        ClientConfigurationError.createKnownAuthoritiesCloudDiscoveryMetadataError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.knownAuthoritiesAndCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.knownAuthoritiesAndCloudDiscoveryMetadata.desc);
        };
        /**
         * Throws an error when the user passes invalid cloudDiscoveryMetadata
         */
        ClientConfigurationError.createInvalidCloudDiscoveryMetadataError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);
        };
        /**
         * Throws error when provided authority is not a member of the trusted host list
         */
        ClientConfigurationError.createUntrustedAuthorityError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);
        };
        /**
         * Throws error when resourceRequestMethod or resourceRequestUri is missing
         */
        ClientConfigurationError.createResourceRequestParametersRequiredError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.resourceRequestParametersRequired.code, ClientConfigurationErrorMessage.resourceRequestParametersRequired.desc);
        };
        return ClientConfigurationError;
    }(ClientAuthError));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes
     * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions
     * to ensure uniqueness of strings.
     */
    var ScopeSet = /** @class */ (function () {
        function ScopeSet(inputScopes) {
            var _this = this;
            // Filter empty string and null/undefined array items
            var scopeArr = inputScopes ? StringUtils.trimArrayEntries(__spreadArrays$1(inputScopes)) : [];
            var filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];
            // Validate and filter scopes (validate function throws if validation fails)
            this.validateInputScopes(filteredInput);
            this.scopes = new Set(); // Iterator in constructor not supported by IE11
            filteredInput.forEach(function (scope) { return _this.scopes.add(scope); });
        }
        /**
         * Factory method to create ScopeSet from space-delimited string
         * @param inputScopeString
         * @param appClientId
         * @param scopesRequired
         */
        ScopeSet.fromString = function (inputScopeString) {
            inputScopeString = inputScopeString || "";
            var inputScopes = inputScopeString.split(" ");
            return new ScopeSet(inputScopes);
        };
        /**
         * Used to validate the scopes input parameter requested  by the developer.
         * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.
         * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not
         */
        ScopeSet.prototype.validateInputScopes = function (inputScopes) {
            // Check if scopes are required but not given or is an empty array
            if (!inputScopes || inputScopes.length < 1) {
                throw ClientConfigurationError.createEmptyScopesArrayError(inputScopes);
            }
        };
        /**
         * Check if a given scope is present in this set of scopes.
         * @param scope
         */
        ScopeSet.prototype.containsScope = function (scope) {
            var lowerCaseScopes = this.printScopesLowerCase().split(" ");
            var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);
            // compare lowercase scopes
            return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;
        };
        /**
         * Check if a set of scopes is present in this set of scopes.
         * @param scopeSet
         */
        ScopeSet.prototype.containsScopeSet = function (scopeSet) {
            var _this = this;
            if (!scopeSet || scopeSet.scopes.size <= 0) {
                return false;
            }
            return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) { return _this.containsScope(scope); }));
        };
        /**
         * Check if set of scopes contains only the defaults
         */
        ScopeSet.prototype.containsOnlyDefaultScopes = function () {
            var defaultScopeCount = 0;
            if (this.containsScope(Constants$1.OPENID_SCOPE)) {
                defaultScopeCount += 1;
            }
            if (this.containsScope(Constants$1.PROFILE_SCOPE)) {
                defaultScopeCount += 1;
            }
            if (this.containsScope(Constants$1.OFFLINE_ACCESS_SCOPE)) {
                defaultScopeCount += 1;
            }
            return this.scopes.size === defaultScopeCount;
        };
        /**
         * Appends single scope if passed
         * @param newScope
         */
        ScopeSet.prototype.appendScope = function (newScope) {
            if (!StringUtils.isEmpty(newScope)) {
                this.scopes.add(newScope.trim());
            }
        };
        /**
         * Appends multiple scopes if passed
         * @param newScopes
         */
        ScopeSet.prototype.appendScopes = function (newScopes) {
            var _this = this;
            try {
                newScopes.forEach(function (newScope) { return _this.appendScope(newScope); });
            }
            catch (e) {
                throw ClientAuthError.createAppendScopeSetError(e);
            }
        };
        /**
         * Removes element from set of scopes.
         * @param scope
         */
        ScopeSet.prototype.removeScope = function (scope) {
            if (StringUtils.isEmpty(scope)) {
                throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);
            }
            this.scopes.delete(scope.trim());
        };
        /**
         * Removes default scopes from set of scopes
         * Primarily used to prevent cache misses if the default scopes are not returned from the server
         */
        ScopeSet.prototype.removeDefaultScopes = function () {
            this.scopes.delete(Constants$1.OFFLINE_ACCESS_SCOPE);
            this.scopes.delete(Constants$1.OPENID_SCOPE);
            this.scopes.delete(Constants$1.PROFILE_SCOPE);
        };
        /**
         * Combines an array of scopes with the current set of scopes.
         * @param otherScopes
         */
        ScopeSet.prototype.unionScopeSets = function (otherScopes) {
            if (!otherScopes) {
                throw ClientAuthError.createEmptyInputScopeSetError(otherScopes);
            }
            var unionScopes = new Set(); // Iterator in constructor not supported in IE11
            otherScopes.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });
            this.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });
            return unionScopes;
        };
        /**
         * Check if scopes intersect between this set and another.
         * @param otherScopes
         */
        ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {
            if (!otherScopes) {
                throw ClientAuthError.createEmptyInputScopeSetError(otherScopes);
            }
            var unionScopes = this.unionScopeSets(otherScopes);
            // Do not allow default scopes to be the only intersecting scopes
            if (!otherScopes.containsOnlyDefaultScopes()) {
                otherScopes.removeDefaultScopes();
            }
            var sizeOtherScopes = otherScopes.getScopeCount();
            var sizeThisScopes = this.getScopeCount();
            var sizeUnionScopes = unionScopes.size;
            return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);
        };
        /**
         * Returns size of set of scopes.
         */
        ScopeSet.prototype.getScopeCount = function () {
            return this.scopes.size;
        };
        /**
         * Returns the scopes as an array of string values
         */
        ScopeSet.prototype.asArray = function () {
            var array = [];
            this.scopes.forEach(function (val) { return array.push(val); });
            return array;
        };
        /**
         * Prints scopes into a space-delimited string
         */
        ScopeSet.prototype.printScopes = function () {
            if (this.scopes) {
                var scopeArr = this.asArray();
                return scopeArr.join(" ");
            }
            return "";
        };
        /**
         * Prints scopes into a space-delimited lower-case string (used for caching)
         */
        ScopeSet.prototype.printScopesLowerCase = function () {
            return this.printScopes().toLowerCase();
        };
        return ScopeSet;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Authority types supported by MSAL.
     */
    var AuthorityType;
    (function (AuthorityType) {
        AuthorityType[AuthorityType["Default"] = 0] = "Default";
        AuthorityType[AuthorityType["Adfs"] = 1] = "Adfs";
    })(AuthorityType || (AuthorityType = {}));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Url object class which can perform various transformations on url strings.
     */
    var UrlString = /** @class */ (function () {
        function UrlString(url) {
            this._urlString = url;
            if (StringUtils.isEmpty(this._urlString)) {
                // Throws error if url is empty
                throw ClientConfigurationError.createUrlEmptyError();
            }
            if (StringUtils.isEmpty(this.getHash())) {
                this._urlString = UrlString.canonicalizeUri(url);
            }
        }
        Object.defineProperty(UrlString.prototype, "urlString", {
            get: function () {
                return this._urlString;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Ensure urls are lower case and end with a / character.
         * @param url
         */
        UrlString.canonicalizeUri = function (url) {
            if (url) {
                url = url.toLowerCase();
                if (StringUtils.endsWith(url, "?")) {
                    url = url.slice(0, -1);
                }
                else if (StringUtils.endsWith(url, "?/")) {
                    url = url.slice(0, -2);
                }
                if (!StringUtils.endsWith(url, "/")) {
                    url += "/";
                }
            }
            return url;
        };
        /**
         * Throws if urlString passed is not a valid authority URI string.
         */
        UrlString.prototype.validateAsUri = function () {
            // Attempts to parse url for uri components
            var components;
            try {
                components = this.getUrlComponents();
            }
            catch (e) {
                throw ClientConfigurationError.createUrlParseError(e);
            }
            // Throw error if URI or path segments are not parseable.
            if (!components.HostNameAndPort || !components.PathSegments) {
                throw ClientConfigurationError.createUrlParseError("Given url string: " + this.urlString);
            }
            // Throw error if uri is insecure.
            if (!components.Protocol || components.Protocol.toLowerCase() !== "https:") {
                throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);
            }
        };
        /**
         * Function to remove query string params from url. Returns the new url.
         * @param url
         * @param name
         */
        UrlString.prototype.urlRemoveQueryStringParameter = function (name) {
            var regex = new RegExp("(\\&" + name + "=)[^\&]+");
            this._urlString = this.urlString.replace(regex, "");
            // name=value&
            regex = new RegExp("(" + name + "=)[^\&]+&");
            this._urlString = this.urlString.replace(regex, "");
            // name=value
            regex = new RegExp("(" + name + "=)[^\&]+");
            this._urlString = this.urlString.replace(regex, "");
            return this.urlString;
        };
        UrlString.removeHashFromUrl = function (url) {
            return UrlString.canonicalizeUri(url.split("#")[0]);
        };
        /**
         * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d
         * @param href The url
         * @param tenantId The tenant id to replace
         */
        UrlString.prototype.replaceTenantPath = function (tenantId) {
            var urlObject = this.getUrlComponents();
            var pathArray = urlObject.PathSegments;
            if (tenantId && (pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS))) {
                pathArray[0] = tenantId;
            }
            return UrlString.constructAuthorityUriFromObject(urlObject);
        };
        /**
         * Returns the anchor part(#) of the URL
         */
        UrlString.prototype.getHash = function () {
            return UrlString.parseHash(this.urlString);
        };
        /**
         * Parses out the components from a url string.
         * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.
         */
        UrlString.prototype.getUrlComponents = function () {
            // https://gist.github.com/curtisz/11139b2cfcaef4a261e0
            var regEx = RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?");
            // If url string does not match regEx, we throw an error
            var match = this.urlString.match(regEx);
            if (!match) {
                throw ClientConfigurationError.createUrlParseError("Given url string: " + this.urlString);
            }
            // Url component object
            var urlComponents = {
                Protocol: match[1],
                HostNameAndPort: match[4],
                AbsolutePath: match[5],
                QueryString: match[7]
            };
            var pathSegments = urlComponents.AbsolutePath.split("/");
            pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements
            urlComponents.PathSegments = pathSegments;
            if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith("/")) {
                urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);
            }
            return urlComponents;
        };
        UrlString.getDomainFromUrl = function (url) {
            var regEx = RegExp("^([^:/?#]+://)?([^/?#]*)");
            var match = url.match(regEx);
            if (!match) {
                throw ClientConfigurationError.createUrlParseError("Given url string: " + url);
            }
            return match[2];
        };
        UrlString.getAbsoluteUrl = function (relativeUrl, baseUrl) {
            if (relativeUrl[0] === Constants$1.FORWARD_SLASH) {
                var url = new UrlString(baseUrl);
                var baseComponents = url.getUrlComponents();
                return baseComponents.Protocol + "//" + baseComponents.HostNameAndPort + relativeUrl;
            }
            return relativeUrl;
        };
        /**
         * Parses hash string from given string. Returns empty string if no hash symbol is found.
         * @param hashString
         */
        UrlString.parseHash = function (hashString) {
            var hashIndex1 = hashString.indexOf("#");
            var hashIndex2 = hashString.indexOf("#/");
            if (hashIndex2 > -1) {
                return hashString.substring(hashIndex2 + 2);
            }
            else if (hashIndex1 > -1) {
                return hashString.substring(hashIndex1 + 1);
            }
            return "";
        };
        UrlString.constructAuthorityUriFromObject = function (urlObject) {
            return new UrlString(urlObject.Protocol + "//" + urlObject.HostNameAndPort + "/" + urlObject.PathSegments.join("/"));
        };
        /**
         * Returns URL hash as server auth code response object.
         */
        UrlString.getDeserializedHash = function (hash) {
            // Check if given hash is empty
            if (StringUtils.isEmpty(hash)) {
                return {};
            }
            // Strip the # symbol if present
            var parsedHash = UrlString.parseHash(hash);
            // If # symbol was not present, above will return empty string, so give original hash value
            var deserializedHash = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);
            // Check if deserialization didn't work
            if (!deserializedHash) {
                throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));
            }
            return deserializedHash;
        };
        /**
         * Check if the hash of the URL string contains known properties
         */
        UrlString.hashContainsKnownProperties = function (hash) {
            if (StringUtils.isEmpty(hash)) {
                return false;
            }
            var parameters = UrlString.getDeserializedHash(hash);
            return !!(parameters.code ||
                parameters.error_description ||
                parameters.error ||
                parameters.state);
        };
        return UrlString;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var TrustedAuthority = /** @class */ (function () {
        function TrustedAuthority() {
        }
        /**
         * Set the CloudDiscoveryMetadata object from knownAuthorities or cloudDiscoveryMetadata passed into the app config
         * @param knownAuthorities
         * @param cloudDiscoveryMetadata
         */
        TrustedAuthority.setTrustedAuthoritiesFromConfig = function (knownAuthorities, cloudDiscoveryMetadata) {
            if (!this.getTrustedHostList().length) {
                if (knownAuthorities.length > 0 && !StringUtils.isEmpty(cloudDiscoveryMetadata)) {
                    throw ClientConfigurationError.createKnownAuthoritiesCloudDiscoveryMetadataError();
                }
                this.createCloudDiscoveryMetadataFromKnownAuthorities(knownAuthorities);
                try {
                    if (cloudDiscoveryMetadata) {
                        var parsedMetadata = JSON.parse(cloudDiscoveryMetadata);
                        this.saveCloudDiscoveryMetadata(parsedMetadata.metadata);
                    }
                }
                catch (e) {
                    throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();
                }
            }
        };
        /**
         * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config
         * @param networkInterface
         */
        TrustedAuthority.setTrustedAuthoritiesFromNetwork = function (authorityToVerify, networkInterface) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var instanceDiscoveryEndpoint, response, metadata, e_1, host;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            instanceDiscoveryEndpoint = "" + Constants$1.AAD_INSTANCE_DISCOVERY_ENDPT + authorityToVerify.urlString + "oauth2/v2.0/authorize";
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint)];
                        case 2:
                            response = _a.sent();
                            metadata = response.body.metadata;
                            this.saveCloudDiscoveryMetadata(metadata);
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            return [2 /*return*/];
                        case 4:
                            host = authorityToVerify.getUrlComponents().HostNameAndPort;
                            if (this.getTrustedHostList().length > 0 && !this.IsInTrustedHostList(host)) {
                                // Custom Domain scenario, host is trusted because Instance Discovery call succeeded 
                                this.createCloudDiscoveryMetadataFromKnownAuthorities([host]);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         *
         * @param metadata
         */
        TrustedAuthority.saveCloudDiscoveryMetadata = function (metadata) {
            metadata.forEach(function (entry) {
                var authorities = entry.aliases;
                authorities.forEach(function (authority) {
                    TrustedAuthority.TrustedHostList[authority.toLowerCase()] = entry;
                });
            });
        };
        /**
         * Create a generic metadata object for each host passed to knownAuthorities.
         * This is mostly useful for B2C or ADFS scenarios
         * @param knownAuthorities
         */
        TrustedAuthority.createCloudDiscoveryMetadataFromKnownAuthorities = function (knownAuthorities) {
            var _this = this;
            knownAuthorities.forEach(function (authority) {
                var authorityDomain = UrlString.getDomainFromUrl(authority).toLowerCase();
                _this.TrustedHostList[authorityDomain] = {
                    preferred_cache: authorityDomain,
                    preferred_network: authorityDomain,
                    aliases: [authorityDomain]
                };
            });
        };
        TrustedAuthority.getTrustedHostList = function () {
            return Object.keys(this.TrustedHostList);
        };
        /**
         * Get metadata for the provided host
         * @param host
         */
        TrustedAuthority.getCloudDiscoveryMetadata = function (host) {
            return this.TrustedHostList[host.toLowerCase()] || null;
        };
        /**
         * Checks to see if the host is in a list of trusted hosts
         * @param host
         */
        TrustedAuthority.IsInTrustedHostList = function (host) {
            return Object.keys(this.TrustedHostList).indexOf(host.toLowerCase()) > -1;
        };
        TrustedAuthority.TrustedHostList = {};
        return TrustedAuthority;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Protocol modes supported by MSAL.
     */
    var ProtocolMode;
    (function (ProtocolMode) {
        ProtocolMode["AAD"] = "AAD";
        ProtocolMode["OIDC"] = "OIDC";
    })(ProtocolMode || (ProtocolMode = {}));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the
     * endpoint. It will store the pertinent config data in this object for use during token calls.
     */
    var Authority = /** @class */ (function () {
        function Authority(authority, networkInterface, protocolMode) {
            this.canonicalAuthority = authority;
            this._canonicalAuthority.validateAsUri();
            this.networkInterface = networkInterface;
            this.authorityProtocolMode = protocolMode;
        }
        Object.defineProperty(Authority.prototype, "authorityType", {
            // See above for AuthorityType
            get: function () {
                var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;
                if (pathSegments.length && pathSegments[0].toLowerCase() === Constants$1.ADFS) {
                    return AuthorityType.Adfs;
                }
                return AuthorityType.Default;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "protocolMode", {
            /**
             * ProtocolMode enum representing the way endpoints are constructed.
             */
            get: function () {
                return this.authorityProtocolMode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "canonicalAuthority", {
            /**
             * A URL that is the authority set by the developer
             */
            get: function () {
                return this._canonicalAuthority.urlString;
            },
            /**
             * Sets canonical authority.
             */
            set: function (url) {
                this._canonicalAuthority = new UrlString(url);
                this._canonicalAuthority.validateAsUri();
                this._canonicalAuthorityUrlComponents = null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "canonicalAuthorityUrlComponents", {
            /**
             * Get authority components.
             */
            get: function () {
                if (!this._canonicalAuthorityUrlComponents) {
                    this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();
                }
                return this._canonicalAuthorityUrlComponents;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "tenant", {
            /**
             * Get tenant for authority.
             */
            get: function () {
                return this.canonicalAuthorityUrlComponents.PathSegments[0];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "authorizationEndpoint", {
            /**
             * OAuth /authorize endpoint for requests
             */
            get: function () {
                if (this.discoveryComplete()) {
                    return this.replaceTenant(this.tenantDiscoveryResponse.authorization_endpoint);
                }
                else {
                    throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "tokenEndpoint", {
            /**
             * OAuth /token endpoint for requests
             */
            get: function () {
                if (this.discoveryComplete()) {
                    return this.replaceTenant(this.tenantDiscoveryResponse.token_endpoint);
                }
                else {
                    throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "deviceCodeEndpoint", {
            get: function () {
                if (this.discoveryComplete()) {
                    return this.tenantDiscoveryResponse.token_endpoint.replace("/token", "/devicecode");
                }
                else {
                    throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "endSessionEndpoint", {
            /**
             * OAuth logout endpoint for requests
             */
            get: function () {
                if (this.discoveryComplete()) {
                    return this.replaceTenant(this.tenantDiscoveryResponse.end_session_endpoint);
                }
                else {
                    throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "selfSignedJwtAudience", {
            /**
             * OAuth issuer for requests
             */
            get: function () {
                if (this.discoveryComplete()) {
                    return this.replaceTenant(this.tenantDiscoveryResponse.issuer);
                }
                else {
                    throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Replaces tenant in url path with current tenant. Defaults to common.
         * @param urlString
         */
        Authority.prototype.replaceTenant = function (urlString) {
            return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);
        };
        Object.defineProperty(Authority.prototype, "defaultOpenIdConfigurationEndpoint", {
            /**
             * The default open id configuration endpoint for any canonical authority.
             */
            get: function () {
                if (this.authorityType === AuthorityType.Adfs || this.protocolMode === ProtocolMode.OIDC) {
                    return this.canonicalAuthority + ".well-known/openid-configuration";
                }
                return this.canonicalAuthority + "v2.0/.well-known/openid-configuration";
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Boolean that returns whethr or not tenant discovery has been completed.
         */
        Authority.prototype.discoveryComplete = function () {
            return !!this.tenantDiscoveryResponse;
        };
        /**
         * Gets OAuth endpoints from the given OpenID configuration endpoint.
         * @param openIdConfigurationEndpoint
         */
        Authority.prototype.discoverEndpoints = function (openIdConfigurationEndpoint) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                return __generator$1$1(this, function (_a) {
                    return [2 /*return*/, this.networkInterface.sendGetRequestAsync(openIdConfigurationEndpoint)];
                });
            });
        };
        /**
         * Set the trusted hosts and validate subsequent calls
         */
        Authority.prototype.validateAndSetPreferredNetwork = function () {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var host, preferredNetwork;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            host = this.canonicalAuthorityUrlComponents.HostNameAndPort;
                            if (!(TrustedAuthority.getTrustedHostList().length === 0)) return [3 /*break*/, 2];
                            return [4 /*yield*/, TrustedAuthority.setTrustedAuthoritiesFromNetwork(this._canonicalAuthority, this.networkInterface)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            if (!TrustedAuthority.IsInTrustedHostList(host)) {
                                throw ClientConfigurationError.createUntrustedAuthorityError();
                            }
                            preferredNetwork = TrustedAuthority.getCloudDiscoveryMetadata(host).preferred_network;
                            if (host !== preferredNetwork) {
                                this.canonicalAuthority = this.canonicalAuthority.replace(host, preferredNetwork);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Perform endpoint discovery to discover the /authorize, /token and logout endpoints.
         */
        Authority.prototype.resolveEndpointsAsync = function () {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var openIdConfigEndpoint, response;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.validateAndSetPreferredNetwork()];
                        case 1:
                            _a.sent();
                            openIdConfigEndpoint = this.defaultOpenIdConfigurationEndpoint;
                            return [4 /*yield*/, this.discoverEndpoints(openIdConfigEndpoint)];
                        case 2:
                            response = _a.sent();
                            this.tenantDiscoveryResponse = response.body;
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Determine if given hostname is alias of this authority
         * @param host
         */
        Authority.prototype.isAuthorityAlias = function (host) {
            if (host === this.canonicalAuthorityUrlComponents.HostNameAndPort) {
                return true;
            }
            var aliases = TrustedAuthority.getCloudDiscoveryMetadata(this.canonicalAuthorityUrlComponents.HostNameAndPort).aliases;
            return aliases.indexOf(host) !== -1;
        };
        /**
         * helper function to generate environment from authority object
         * @param authority
         */
        Authority.generateEnvironmentFromAuthority = function (authority) {
            var reqEnvironment = authority.canonicalAuthorityUrlComponents.HostNameAndPort;
            return TrustedAuthority.getCloudDiscoveryMetadata(reqEnvironment) ? TrustedAuthority.getCloudDiscoveryMetadata(reqEnvironment).preferred_cache : "";
        };
        return Authority;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Function to build a client info object
     * @param rawClientInfo
     * @param crypto
     */
    function buildClientInfo(rawClientInfo, crypto) {
        if (StringUtils.isEmpty(rawClientInfo)) {
            throw ClientAuthError.createClientInfoEmptyError();
        }
        try {
            var decodedClientInfo = crypto.base64Decode(rawClientInfo);
            return JSON.parse(decodedClientInfo);
        }
        catch (e) {
            throw ClientAuthError.createClientInfoDecodingError(e);
        }
    }

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).
     *
     * Key : Value Schema
     *
     * Key: <home_account_id>-<environment>-<realm*>
     *
     * Value Schema:
     * {
     *      homeAccountId: home account identifier for the auth scheme,
     *      environment: entity that issued the token, represented as a full host
     *      realm: Full tenant or organizational identifier that the account belongs to
     *      localAccountId: Original tenant-specific accountID, usually used for legacy cases
     *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt
     *      authorityType: Accounts authority type as a string
     *      name: Full name for the account, including given name and family name,
     *      clientInfo: Full base64 encoded client info received from ESTS
     *      lastModificationTime: last time this entity was modified in the cache
     *      lastModificationApp:
     *      oboAssertion: access token passed in as part of OBO request
     *      idTokenClaims: Object containing claims parsed from ID token
     * }
     */
    var AccountEntity = /** @class */ (function () {
        function AccountEntity() {
        }
        /**
         * Generate Account Id key component as per the schema: <home_account_id>-<environment>
         */
        AccountEntity.prototype.generateAccountId = function () {
            var accountId = [this.homeAccountId, this.environment];
            return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
        };
        /**
         * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>
         */
        AccountEntity.prototype.generateAccountKey = function () {
            return AccountEntity.generateAccountCacheKey({
                homeAccountId: this.homeAccountId,
                environment: this.environment,
                tenantId: this.realm,
                username: this.username,
                localAccountId: this.localAccountId
            });
        };
        /**
         * returns the type of the cache (in this case account)
         */
        AccountEntity.prototype.generateType = function () {
            switch (this.authorityType) {
                case CacheAccountType.ADFS_ACCOUNT_TYPE:
                    return CacheType.ADFS;
                case CacheAccountType.MSAV1_ACCOUNT_TYPE:
                    return CacheType.MSA;
                case CacheAccountType.MSSTS_ACCOUNT_TYPE:
                    return CacheType.MSSTS;
                case CacheAccountType.GENERIC_ACCOUNT_TYPE:
                    return CacheType.GENERIC;
                default: {
                    throw ClientAuthError.createUnexpectedAccountTypeError();
                }
            }
        };
        /**
         * Returns the AccountInfo interface for this account.
         */
        AccountEntity.prototype.getAccountInfo = function () {
            return {
                homeAccountId: this.homeAccountId,
                environment: this.environment,
                tenantId: this.realm,
                username: this.username,
                localAccountId: this.localAccountId,
                name: this.name,
                idTokenClaims: this.idTokenClaims
            };
        };
        /**
         * Generates account key from interface
         * @param accountInterface
         */
        AccountEntity.generateAccountCacheKey = function (accountInterface) {
            var accountKey = [
                accountInterface.homeAccountId,
                accountInterface.environment || "",
                accountInterface.tenantId || "",
            ];
            return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
        };
        /**
         * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.
         * @param clientInfo
         * @param authority
         * @param idToken
         * @param policy
         */
        AccountEntity.createAccount = function (clientInfo, homeAccountId, authority, idToken, oboAssertion, cloudGraphHostName, msGraphHost) {
            var _a, _b, _c, _d, _e, _f;
            var account = new AccountEntity();
            account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;
            account.clientInfo = clientInfo;
            account.homeAccountId = homeAccountId;
            var env = Authority.generateEnvironmentFromAuthority(authority);
            if (StringUtils.isEmpty(env)) {
                throw ClientAuthError.createInvalidCacheEnvironmentError();
            }
            account.environment = env;
            // non AAD scenarios can have empty realm
            account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || "";
            account.oboAssertion = oboAssertion;
            if (idToken) {
                account.idTokenClaims = idToken.claims;
                // How do you account for MSA CID here?
                account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || "";
                /*
                 * In B2C scenarios the emails claim is used instead of preferred_username and it is an array. In most cases it will contain a single email.
                 * This field should not be relied upon if a custom policy is configured to return more than 1 email.
                 */
                account.username = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username) || (((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : "");
                account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;
            }
            account.cloudGraphHostName = cloudGraphHostName;
            account.msGraphHost = msGraphHost;
            return account;
        };
        /**
         * Builds non-AAD/ADFS account.
         * @param authority
         * @param idToken
         */
        AccountEntity.createGenericAccount = function (authority, homeAccountId, idToken, oboAssertion, cloudGraphHostName, msGraphHost) {
            var _a, _b, _c, _d;
            var account = new AccountEntity();
            account.authorityType = (authority.authorityType === AuthorityType.Adfs) ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;
            account.homeAccountId = homeAccountId;
            // non AAD scenarios can have empty realm
            account.realm = "";
            account.oboAssertion = oboAssertion;
            var env = Authority.generateEnvironmentFromAuthority(authority);
            if (StringUtils.isEmpty(env)) {
                throw ClientAuthError.createInvalidCacheEnvironmentError();
            }
            if (idToken) {
                // How do you account for MSA CID here?
                account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || "";
                // upn claim for most ADFS scenarios
                account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || "";
                account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || "";
                account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;
            }
            account.environment = env;
            account.cloudGraphHostName = cloudGraphHostName;
            account.msGraphHost = msGraphHost;
            /*
             * add uniqueName to claims
             * account.name = idToken.claims.uniqueName;
             */
            return account;
        };
        /**
         * Generate HomeAccountId from server response
         * @param serverClientInfo
         * @param authType
         */
        AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idToken) {
            var _a;
            var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : Constants$1.EMPTY_STRING;
            // since ADFS does not have tid and does not set client_info
            if (authType === AuthorityType.Adfs) {
                return accountId;
            }
            // for cases where there is clientInfo
            if (serverClientInfo) {
                var clientInfo = buildClientInfo(serverClientInfo, cryptoObj);
                if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {
                    return "" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;
                }
            }
            // default to "sub" claim
            logger.verbose("No client info in response");
            return accountId;
        };
        /**
         * Validates an entity: checks for all expected params
         * @param entity
         */
        AccountEntity.isAccountEntity = function (entity) {
            if (!entity) {
                return false;
            }
            return (entity.hasOwnProperty("homeAccountId") &&
                entity.hasOwnProperty("environment") &&
                entity.hasOwnProperty("realm") &&
                entity.hasOwnProperty("localAccountId") &&
                entity.hasOwnProperty("username") &&
                entity.hasOwnProperty("authorityType"));
        };
        /**
         * Helper function to determine whether 2 accounts are equal
         * Used to avoid unnecessary state updates
         * @param arrayA
         * @param arrayB
         */
        AccountEntity.accountInfoIsEqual = function (accountA, accountB) {
            if (!accountA || !accountB) {
                return false;
            }
            return (accountA.homeAccountId === accountB.homeAccountId) &&
                (accountA.localAccountId === accountB.localAccountId) &&
                (accountA.username === accountB.username) &&
                (accountA.tenantId === accountB.tenantId) &&
                (accountA.environment === accountB.environment);
        };
        return AccountEntity;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * JWT Token representation class. Parses token string and generates claims object.
     */
    var AuthToken = /** @class */ (function () {
        function AuthToken(rawToken, crypto) {
            if (StringUtils.isEmpty(rawToken)) {
                throw ClientAuthError.createTokenNullOrEmptyError(rawToken);
            }
            this.rawToken = rawToken;
            this.claims = AuthToken.extractTokenClaims(rawToken, crypto);
        }
        /**
         * Extract token by decoding the rawToken
         *
         * @param encodedToken
         */
        AuthToken.extractTokenClaims = function (encodedToken, crypto) {
            var decodedToken = StringUtils.decodeAuthToken(encodedToken);
            // token will be decoded to get the username
            try {
                var base64TokenPayload = decodedToken.JWSPayload;
                // base64Decode() should throw an error if there is an issue
                var base64Decoded = crypto.base64Decode(base64TokenPayload);
                return JSON.parse(base64Decoded);
            }
            catch (err) {
                throw ClientAuthError.createTokenParsingError(err);
            }
        };
        return AuthToken;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.
     */
    var CacheManager = /** @class */ (function () {
        function CacheManager(clientId, cryptoImpl) {
            this.clientId = clientId;
            this.cryptoImpl = cryptoImpl;
        }
        /**
         * Returns all accounts in cache
         */
        CacheManager.prototype.getAllAccounts = function () {
            var _this = this;
            var currentAccounts = this.getAccountsFilteredBy();
            var accountValues = Object.keys(currentAccounts).map(function (accountKey) { return currentAccounts[accountKey]; });
            var numAccounts = accountValues.length;
            if (numAccounts < 1) {
                return [];
            }
            else {
                var allAccounts = accountValues.map(function (value) {
                    var accountEntity = CacheManager.toObject(new AccountEntity(), value);
                    var accountInfo = accountEntity.getAccountInfo();
                    var idToken = _this.readIdTokenFromCache(_this.clientId, accountInfo);
                    if (idToken && !accountInfo.idTokenClaims) {
                        accountInfo.idTokenClaims = new AuthToken(idToken.secret, _this.cryptoImpl).claims;
                    }
                    return accountInfo;
                });
                return allAccounts;
            }
        };
        /**
         * saves a cache record
         * @param cacheRecord
         */
        CacheManager.prototype.saveCacheRecord = function (cacheRecord) {
            if (!cacheRecord) {
                throw ClientAuthError.createNullOrUndefinedCacheRecord();
            }
            if (!!cacheRecord.account) {
                this.setAccount(cacheRecord.account);
            }
            if (!!cacheRecord.idToken) {
                this.setIdTokenCredential(cacheRecord.idToken);
            }
            if (!!cacheRecord.accessToken) {
                this.saveAccessToken(cacheRecord.accessToken);
            }
            if (!!cacheRecord.refreshToken) {
                this.setRefreshTokenCredential(cacheRecord.refreshToken);
            }
            if (!!cacheRecord.appMetadata) {
                this.setAppMetadata(cacheRecord.appMetadata);
            }
        };
        /**
         * saves access token credential
         * @param credential
         */
        CacheManager.prototype.saveAccessToken = function (credential) {
            var _this = this;
            var currentTokenCache = this.getCredentialsFilteredBy({
                clientId: credential.clientId,
                credentialType: CredentialType.ACCESS_TOKEN,
                environment: credential.environment,
                homeAccountId: credential.homeAccountId,
                realm: credential.realm,
            });
            var currentScopes = ScopeSet.fromString(credential.target);
            var currentAccessTokens = Object.keys(currentTokenCache.accessTokens).map(function (key) { return currentTokenCache.accessTokens[key]; });
            if (currentAccessTokens) {
                currentAccessTokens.forEach(function (tokenEntity) {
                    var tokenScopeSet = ScopeSet.fromString(tokenEntity.target);
                    if (tokenScopeSet.intersectingScopeSets(currentScopes)) {
                        _this.removeCredential(tokenEntity);
                    }
                });
            }
            this.setAccessTokenCredential(credential);
        };
        /**
         * retrieve accounts matching all provided filters; if no filter is set, get all accounts
         * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared
         * @param homeAccountId
         * @param environment
         * @param realm
         */
        CacheManager.prototype.getAccountsFilteredBy = function (accountFilter) {
            return this.getAccountsFilteredByInternal(accountFilter ? accountFilter.homeAccountId : "", accountFilter ? accountFilter.environment : "", accountFilter ? accountFilter.realm : "");
        };
        /**
         * retrieve accounts matching all provided filters; if no filter is set, get all accounts
         * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared
         * @param homeAccountId
         * @param environment
         * @param realm
         */
        CacheManager.prototype.getAccountsFilteredByInternal = function (homeAccountId, environment, realm) {
            var _this = this;
            var allCacheKeys = this.getKeys();
            var matchingAccounts = {};
            allCacheKeys.forEach(function (cacheKey) {
                var entity = _this.getAccount(cacheKey);
                if (!entity) {
                    return;
                }
                if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {
                    return;
                }
                if (!!environment && !_this.matchEnvironment(entity, environment)) {
                    return;
                }
                if (!!realm && !_this.matchRealm(entity, realm)) {
                    return;
                }
                matchingAccounts[cacheKey] = entity;
            });
            return matchingAccounts;
        };
        /**
         * retrieve credentails matching all provided filters; if no filter is set, get all credentials
         * @param homeAccountId
         * @param environment
         * @param credentialType
         * @param clientId
         * @param realm
         * @param target
         */
        CacheManager.prototype.getCredentialsFilteredBy = function (filter) {
            return this.getCredentialsFilteredByInternal(filter.homeAccountId, filter.environment, filter.credentialType, filter.clientId, filter.familyId, filter.realm, filter.target, filter.oboAssertion);
        };
        /**
         * Support function to help match credentials
         * @param homeAccountId
         * @param environment
         * @param credentialType
         * @param clientId
         * @param realm
         * @param target
         */
        CacheManager.prototype.getCredentialsFilteredByInternal = function (homeAccountId, environment, credentialType, clientId, familyId, realm, target, oboAssertion) {
            var _this = this;
            var allCacheKeys = this.getKeys();
            var matchingCredentials = {
                idTokens: {},
                accessTokens: {},
                refreshTokens: {},
            };
            allCacheKeys.forEach(function (cacheKey) {
                // don't parse any non-credential type cache entities
                var credType = CredentialEntity.getCredentialType(cacheKey);
                if (credType === Constants$1.NOT_DEFINED) {
                    return;
                }
                // Attempt retrieval
                var entity = _this.getSpecificCredential(cacheKey, credType);
                if (!entity) {
                    return;
                }
                if (!!oboAssertion && !_this.matchOboAssertion(entity, oboAssertion)) {
                    return;
                }
                if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {
                    return;
                }
                if (!!environment && !_this.matchEnvironment(entity, environment)) {
                    return;
                }
                if (!!realm && !_this.matchRealm(entity, realm)) {
                    return;
                }
                if (!!credentialType && !_this.matchCredentialType(entity, credentialType)) {
                    return;
                }
                if (!!clientId && !_this.matchClientId(entity, clientId)) {
                    return;
                }
                if (!!familyId && !_this.matchFamilyId(entity, familyId)) {
                    return;
                }
                /*
                 * idTokens do not have "target", target specific refreshTokens do exist for some types of authentication
                 * Resource specific refresh tokens case will be added when the support is deemed necessary
                 */
                if (!!target && !_this.matchTarget(entity, target)) {
                    return;
                }
                switch (credType) {
                    case CredentialType.ID_TOKEN:
                        matchingCredentials.idTokens[cacheKey] = entity;
                        break;
                    case CredentialType.ACCESS_TOKEN:
                        matchingCredentials.accessTokens[cacheKey] = entity;
                        break;
                    case CredentialType.REFRESH_TOKEN:
                        matchingCredentials.refreshTokens[cacheKey] = entity;
                        break;
                }
            });
            return matchingCredentials;
        };
        /**
         * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata
         * @param filter
         */
        CacheManager.prototype.getAppMetadataFilteredBy = function (filter) {
            return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);
        };
        /**
         * Support function to help match appMetadata
         * @param environment
         * @param clientId
         */
        CacheManager.prototype.getAppMetadataFilteredByInternal = function (environment, clientId) {
            var _this = this;
            var allCacheKeys = this.getKeys();
            var matchingAppMetadata = {};
            allCacheKeys.forEach(function (cacheKey) {
                // don't parse any non-appMetadata type cache entities
                if (!_this.isAppMetadata(cacheKey)) {
                    return;
                }
                // Attempt retrieval
                var entity = _this.getAppMetadata(cacheKey);
                if (!entity) {
                    return;
                }
                if (!!environment && !_this.matchEnvironment(entity, environment)) {
                    return;
                }
                if (!!clientId && !_this.matchClientId(entity, clientId)) {
                    return;
                }
                matchingAppMetadata[cacheKey] = entity;
            });
            return matchingAppMetadata;
        };
        /**
         * Removes all accounts and related tokens from cache.
         */
        CacheManager.prototype.removeAllAccounts = function () {
            var _this = this;
            var allCacheKeys = this.getKeys();
            allCacheKeys.forEach(function (cacheKey) {
                var entity = _this.getAccount(cacheKey);
                if (!entity) {
                    return;
                }
                _this.removeAccount(cacheKey);
            });
            return true;
        };
        /**
         * returns a boolean if the given account is removed
         * @param account
         */
        CacheManager.prototype.removeAccount = function (accountKey) {
            var account = this.getAccount(accountKey);
            if (!account) {
                throw ClientAuthError.createNoAccountFoundError();
            }
            return (this.removeAccountContext(account) && this.removeItem(accountKey, CacheSchemaType.ACCOUNT));
        };
        /**
         * returns a boolean if the given account is removed
         * @param account
         */
        CacheManager.prototype.removeAccountContext = function (account) {
            var _this = this;
            var allCacheKeys = this.getKeys();
            var accountId = account.generateAccountId();
            allCacheKeys.forEach(function (cacheKey) {
                // don't parse any non-credential type cache entities
                var credType = CredentialEntity.getCredentialType(cacheKey);
                if (credType === Constants$1.NOT_DEFINED) {
                    return;
                }
                var cacheEntity = _this.getSpecificCredential(cacheKey, credType);
                if (!!cacheEntity && accountId === cacheEntity.generateAccountId()) {
                    _this.removeCredential(cacheEntity);
                }
            });
            return true;
        };
        /**
         * returns a boolean if the given credential is removed
         * @param credential
         */
        CacheManager.prototype.removeCredential = function (credential) {
            var key = credential.generateCredentialKey();
            return this.removeItem(key, CacheSchemaType.CREDENTIAL);
        };
        /**
         * Removes all app metadata objects from cache.
         */
        CacheManager.prototype.removeAppMetadata = function () {
            var _this = this;
            var allCacheKeys = this.getKeys();
            allCacheKeys.forEach(function (cacheKey) {
                if (_this.isAppMetadata(cacheKey)) {
                    _this.removeItem(cacheKey, CacheSchemaType.APP_METADATA);
                }
            });
            return true;
        };
        /**
         * Retrieve the cached credentials into a cacherecord
         * @param account
         * @param clientId
         * @param scopes
         * @param environment
         */
        CacheManager.prototype.readCacheRecord = function (account, clientId, scopes, environment) {
            var cachedAccount = this.readAccountFromCache(account);
            var cachedIdToken = this.readIdTokenFromCache(clientId, account);
            var cachedAccessToken = this.readAccessTokenFromCache(clientId, account, scopes);
            var cachedRefreshToken = this.readRefreshTokenFromCache(clientId, account, false);
            var cachedAppMetadata = this.readAppMetadataFromCache(environment, clientId);
            if (cachedAccount && cachedIdToken) {
                cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;
            }
            return {
                account: cachedAccount,
                idToken: cachedIdToken,
                accessToken: cachedAccessToken,
                refreshToken: cachedRefreshToken,
                appMetadata: cachedAppMetadata,
            };
        };
        /**
         * Retrieve AccountEntity from cache
         * @param account
         */
        CacheManager.prototype.readAccountFromCache = function (account) {
            var accountKey = AccountEntity.generateAccountCacheKey(account);
            return this.getAccount(accountKey);
        };
        /**
         * Retrieve IdTokenEntity from cache
         * @param clientId
         * @param account
         * @param inputRealm
         */
        CacheManager.prototype.readIdTokenFromCache = function (clientId, account) {
            var idTokenFilter = {
                homeAccountId: account.homeAccountId,
                environment: account.environment,
                credentialType: CredentialType.ID_TOKEN,
                clientId: clientId,
                realm: account.tenantId,
            };
            var credentialCache = this.getCredentialsFilteredBy(idTokenFilter);
            var idTokens = Object.keys(credentialCache.idTokens).map(function (key) { return credentialCache.idTokens[key]; });
            var numIdTokens = idTokens.length;
            if (numIdTokens < 1) {
                return null;
            }
            else if (numIdTokens > 1) {
                throw ClientAuthError.createMultipleMatchingTokensInCacheError();
            }
            return idTokens[0];
        };
        /**
         * Retrieve AccessTokenEntity from cache
         * @param clientId
         * @param account
         * @param scopes
         * @param inputRealm
         */
        CacheManager.prototype.readAccessTokenFromCache = function (clientId, account, scopes) {
            var accessTokenFilter = {
                homeAccountId: account.homeAccountId,
                environment: account.environment,
                credentialType: CredentialType.ACCESS_TOKEN,
                clientId: clientId,
                realm: account.tenantId,
                target: scopes.printScopesLowerCase(),
            };
            var credentialCache = this.getCredentialsFilteredBy(accessTokenFilter);
            var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });
            var numAccessTokens = accessTokens.length;
            if (numAccessTokens < 1) {
                return null;
            }
            else if (numAccessTokens > 1) {
                throw ClientAuthError.createMultipleMatchingTokensInCacheError();
            }
            return accessTokens[0];
        };
        /**
         * Helper to retrieve the appropriate refresh token from cache
         * @param clientId
         * @param account
         * @param familyRT
         */
        CacheManager.prototype.readRefreshTokenFromCache = function (clientId, account, familyRT) {
            var id = familyRT ? THE_FAMILY_ID : undefined;
            var refreshTokenFilter = {
                homeAccountId: account.homeAccountId,
                environment: account.environment,
                credentialType: CredentialType.REFRESH_TOKEN,
                clientId: clientId,
                familyId: id
            };
            var credentialCache = this.getCredentialsFilteredBy(refreshTokenFilter);
            var refreshTokens = Object.keys(credentialCache.refreshTokens).map(function (key) { return credentialCache.refreshTokens[key]; });
            var numRefreshTokens = refreshTokens.length;
            if (numRefreshTokens < 1) {
                return null;
            }
            // address the else case after remove functions address environment aliases
            return refreshTokens[0];
        };
        /**
         * Retrieve AppMetadataEntity from cache
         */
        CacheManager.prototype.readAppMetadataFromCache = function (environment, clientId) {
            var appMetadataFilter = {
                environment: environment,
                clientId: clientId,
            };
            var appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);
            var appMetadataEntries = Object.keys(appMetadata).map(function (key) { return appMetadata[key]; });
            var numAppMetadata = appMetadataEntries.length;
            if (numAppMetadata < 1) {
                return null;
            }
            else if (numAppMetadata > 1) {
                throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();
            }
            return appMetadataEntries[0];
        };
        /**
         * Return the family_id value associated  with FOCI
         * @param environment
         * @param clientId
         */
        CacheManager.prototype.isAppMetadataFOCI = function (environment, clientId) {
            var appMetadata = this.readAppMetadataFromCache(environment, clientId);
            return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);
        };
        /**
         * helper to match account ids
         * @param value
         * @param homeAccountId
         */
        CacheManager.prototype.matchHomeAccountId = function (entity, homeAccountId) {
            return !!(entity.homeAccountId && homeAccountId === entity.homeAccountId);
        };
        /**
         * helper to match assertion
         * @param value
         * @param oboAssertion
         */
        CacheManager.prototype.matchOboAssertion = function (entity, oboAssertion) {
            return !!(entity.oboAssertion && oboAssertion === entity.oboAssertion);
        };
        /**
         * helper to match environment
         * @param value
         * @param environment
         */
        CacheManager.prototype.matchEnvironment = function (entity, environment) {
            var cloudMetadata = TrustedAuthority.getCloudDiscoveryMetadata(environment);
            if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {
                return true;
            }
            return false;
        };
        /**
         * helper to match credential type
         * @param entity
         * @param credentialType
         */
        CacheManager.prototype.matchCredentialType = function (entity, credentialType) {
            return (entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase());
        };
        /**
         * helper to match client ids
         * @param entity
         * @param clientId
         */
        CacheManager.prototype.matchClientId = function (entity, clientId) {
            return !!(entity.clientId && clientId === entity.clientId);
        };
        /**
         * helper to match family ids
         * @param entity
         * @param familyId
         */
        CacheManager.prototype.matchFamilyId = function (entity, familyId) {
            return !!(entity.familyId && familyId === entity.familyId);
        };
        /**
         * helper to match realm
         * @param entity
         * @param realm
         */
        CacheManager.prototype.matchRealm = function (entity, realm) {
            return !!(entity.realm && realm === entity.realm);
        };
        /**
         * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.
         * @param entity
         * @param target
         */
        CacheManager.prototype.matchTarget = function (entity, target) {
            if (entity.credentialType !== CredentialType.ACCESS_TOKEN || !entity.target) {
                return false;
            }
            var entityScopeSet = ScopeSet.fromString(entity.target);
            var requestTargetScopeSet = ScopeSet.fromString(target);
            if (!requestTargetScopeSet.containsOnlyDefaultScopes()) {
                requestTargetScopeSet.removeDefaultScopes(); // ignore default scopes
            }
            return entityScopeSet.containsScopeSet(requestTargetScopeSet);
        };
        /**
         * returns if a given cache entity is of the type appmetadata
         * @param key
         */
        CacheManager.prototype.isAppMetadata = function (key) {
            return key.indexOf(APP_METADATA) !== -1;
        };
        /**
         * Returns the specific credential (IdToken/AccessToken/RefreshToken) from the cache
         * @param key
         * @param credType
         */
        CacheManager.prototype.getSpecificCredential = function (key, credType) {
            switch (credType) {
                case CredentialType.ID_TOKEN: {
                    return this.getIdTokenCredential(key);
                }
                case CredentialType.ACCESS_TOKEN: {
                    return this.getAccessTokenCredential(key);
                }
                case CredentialType.REFRESH_TOKEN: {
                    return this.getRefreshTokenCredential(key);
                }
                default:
                    return null;
            }
        };
        /**
         * Helper to convert serialized data to object
         * @param obj
         * @param json
         */
        CacheManager.toObject = function (obj, json) {
            for (var propertyName in json) {
                obj[propertyName] = json[propertyName];
            }
            return obj;
        };
        return CacheManager;
    }());
    var DefaultStorageClass = /** @class */ (function (_super) {
        __extends$1$1(DefaultStorageClass, _super);
        function DefaultStorageClass() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DefaultStorageClass.prototype.setAccount = function () {
            var notImplErr = "Storage interface - setAccount() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getAccount = function () {
            var notImplErr = "Storage interface - getAccount() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.setIdTokenCredential = function () {
            var notImplErr = "Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getIdTokenCredential = function () {
            var notImplErr = "Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.setAccessTokenCredential = function () {
            var notImplErr = "Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getAccessTokenCredential = function () {
            var notImplErr = "Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.setRefreshTokenCredential = function () {
            var notImplErr = "Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getRefreshTokenCredential = function () {
            var notImplErr = "Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.setAppMetadata = function () {
            var notImplErr = "Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getAppMetadata = function () {
            var notImplErr = "Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.setServerTelemetry = function () {
            var notImplErr = "Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getServerTelemetry = function () {
            var notImplErr = "Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.setThrottlingCache = function () {
            var notImplErr = "Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getThrottlingCache = function () {
            var notImplErr = "Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.removeItem = function () {
            var notImplErr = "Storage interface - removeItem() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.containsKey = function () {
            var notImplErr = "Storage interface - containsKey() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getKeys = function () {
            var notImplErr = "Storage interface - getKeys() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.clear = function () {
            var notImplErr = "Storage interface - clear() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        return DefaultStorageClass;
    }(CacheManager));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    // Token renewal offset default in seconds
    var DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;
    var DEFAULT_SYSTEM_OPTIONS = {
        tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC
    };
    var DEFAULT_LOGGER_IMPLEMENTATION = {
        loggerCallback: function () {
            // allow users to not set loggerCallback
        },
        piiLoggingEnabled: false,
        logLevel: LogLevel.Info
    };
    var DEFAULT_NETWORK_IMPLEMENTATION = {
        sendGetRequestAsync: function () {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var notImplErr;
                return __generator$1$1(this, function (_a) {
                    notImplErr = "Network interface - sendGetRequestAsync() has not been implemented";
                    throw AuthError.createUnexpectedError(notImplErr);
                });
            });
        },
        sendPostRequestAsync: function () {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var notImplErr;
                return __generator$1$1(this, function (_a) {
                    notImplErr = "Network interface - sendPostRequestAsync() has not been implemented";
                    throw AuthError.createUnexpectedError(notImplErr);
                });
            });
        }
    };
    var DEFAULT_LIBRARY_INFO = {
        sku: Constants$1.SKU,
        version: version,
        cpu: "",
        os: ""
    };
    var DEFAULT_CLIENT_CREDENTIALS = {
        clientSecret: "",
        clientAssertion: undefined
    };
    /**
     * Function that sets the default options when not explicitly configured from app developer
     *
     * @param Configuration
     *
     * @returns Configuration
     */
    function buildClientConfiguration(_a) {
        var userAuthOptions = _a.authOptions, userSystemOptions = _a.systemOptions, userLoggerOption = _a.loggerOptions, storageImplementation = _a.storageInterface, networkImplementation = _a.networkInterface, cryptoImplementation = _a.cryptoInterface, clientCredentials = _a.clientCredentials, libraryInfo = _a.libraryInfo, serverTelemetryManager = _a.serverTelemetryManager, persistencePlugin = _a.persistencePlugin, serializableCache = _a.serializableCache;
        return {
            authOptions: buildAuthOptions(userAuthOptions),
            systemOptions: __assign$1$1(__assign$1$1({}, DEFAULT_SYSTEM_OPTIONS), userSystemOptions),
            loggerOptions: __assign$1$1(__assign$1$1({}, DEFAULT_LOGGER_IMPLEMENTATION), userLoggerOption),
            storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION),
            networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,
            cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,
            clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,
            libraryInfo: __assign$1$1(__assign$1$1({}, DEFAULT_LIBRARY_INFO), libraryInfo),
            serverTelemetryManager: serverTelemetryManager || null,
            persistencePlugin: persistencePlugin || null,
            serializableCache: serializableCache || null
        };
    }
    /**
     * Construct authoptions from the client and platform passed values
     * @param authOptions
     */
    function buildAuthOptions(authOptions) {
        return __assign$1$1({ knownAuthorities: [], cloudDiscoveryMetadata: "", clientCapabilities: [], protocolMode: ProtocolMode.AAD }, authOptions);
    }

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Error thrown when there is an error with the server code, for example, unavailability.
     */
    var ServerError = /** @class */ (function (_super) {
        __extends$1$1(ServerError, _super);
        function ServerError(errorCode, errorMessage, subError) {
            var _this = _super.call(this, errorCode, errorMessage, subError) || this;
            _this.name = "ServerError";
            Object.setPrototypeOf(_this, ServerError.prototype);
            return _this;
        }
        return ServerError;
    }(AuthError));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ThrottlingUtils = /** @class */ (function () {
        function ThrottlingUtils() {
        }
        /**
         * Prepares a RequestThumbprint to be stored as a key.
         * @param thumbprint
         */
        ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {
            return ThrottlingConstants.THROTTLING_PREFIX + "." + JSON.stringify(thumbprint);
        };
        /**
         * Performs necessary throttling checks before a network request.
         * @param cacheManager
         * @param thumbprint
         */
        ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {
            var _a;
            var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);
            var value = cacheManager.getThrottlingCache(key);
            if (value) {
                if (value.throttleTime < Date.now()) {
                    cacheManager.removeItem(key, CacheSchemaType.THROTTLING);
                    return;
                }
                throw new ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(" ")) || Constants$1.EMPTY_STRING, value.errorMessage, value.subError);
            }
        };
        /**
         * Performs necessary throttling checks after a network request.
         * @param cacheManager
         * @param thumbprint
         * @param response
         */
        ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {
            if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {
                var thumbprintValue = {
                    throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),
                    error: response.body.error,
                    errorCodes: response.body.error_codes,
                    errorMessage: response.body.error_description,
                    subError: response.body.suberror
                };
                cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);
            }
        };
        /**
         * Checks a NetworkResponse object's status codes against 429 or 5xx
         * @param response
         */
        ThrottlingUtils.checkResponseStatus = function (response) {
            return response.status === 429 || response.status >= 500 && response.status < 600;
        };
        /**
         * Checks a NetworkResponse object's RetryAfter header
         * @param response
         */
        ThrottlingUtils.checkResponseForRetryAfter = function (response) {
            if (response.headers) {
                return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);
            }
            return false;
        };
        /**
         * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.
         * @param throttleTime
         */
        ThrottlingUtils.calculateThrottleTime = function (throttleTime) {
            if (throttleTime <= 0) {
                throttleTime = 0;
            }
            var currentSeconds = Date.now() / 1000;
            return Math.floor(Math.min(currentSeconds + (throttleTime || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);
        };
        ThrottlingUtils.removeThrottle = function (cacheManager, clientId, authority, scopes, homeAccountIdentifier) {
            var thumbprint = {
                clientId: clientId,
                authority: authority,
                scopes: scopes,
                homeAccountIdentifier: homeAccountIdentifier
            };
            var key = this.generateThrottlingStorageKey(thumbprint);
            return cacheManager.removeItem(key, CacheSchemaType.THROTTLING);
        };
        return ThrottlingUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var NetworkManager = /** @class */ (function () {
        function NetworkManager(networkClient, cacheManager) {
            this.networkClient = networkClient;
            this.cacheManager = cacheManager;
        }
        /**
         * Wraps sendPostRequestAsync with necessary preflight and postflight logic
         * @param thumbprint
         * @param tokenEndpoint
         * @param options
         */
        NetworkManager.prototype.sendPostRequest = function (thumbprint, tokenEndpoint, options) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var response;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            ThrottlingUtils.preProcess(this.cacheManager, thumbprint);
                            return [4 /*yield*/, this.networkClient.sendPostRequestAsync(tokenEndpoint, options)];
                        case 1:
                            response = _a.sent();
                            ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);
                            // Placeholder for Telemetry hook
                            return [2 /*return*/, response];
                    }
                });
            });
        };
        return NetworkManager;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.
     */
    var BaseClient = /** @class */ (function () {
        function BaseClient(configuration) {
            // Set the configuration
            this.config = buildClientConfiguration(configuration);
            // Initialize the logger
            this.logger = new Logger$1(this.config.loggerOptions, name, version);
            // Initialize crypto
            this.cryptoUtils = this.config.cryptoInterface;
            // Initialize storage interface
            this.cacheManager = this.config.storageInterface;
            // Set the network interface
            this.networkClient = this.config.networkInterface;
            // Set the NetworkManager
            this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);
            // Set TelemetryManager
            this.serverTelemetryManager = this.config.serverTelemetryManager;
            // Set TrustedAuthorities from config
            TrustedAuthority.setTrustedAuthoritiesFromConfig(this.config.authOptions.knownAuthorities, this.config.authOptions.cloudDiscoveryMetadata);
            // set Authority
            this.authority = this.config.authOptions.authority;
        }
        /**
         * Creates default headers for requests to token endpoint
         */
        BaseClient.prototype.createDefaultTokenRequestHeaders = function () {
            var headers = this.createDefaultLibraryHeaders();
            headers[HeaderNames.CONTENT_TYPE] = Constants$1.URL_FORM_CONTENT_TYPE;
            headers[HeaderNames.X_MS_LIB_CAPABILITY] = HeaderNames.X_MS_LIB_CAPABILITY_VALUE;
            if (this.serverTelemetryManager) {
                headers[HeaderNames.X_CLIENT_CURR_TELEM] = this.serverTelemetryManager.generateCurrentRequestHeaderValue();
                headers[HeaderNames.X_CLIENT_LAST_TELEM] = this.serverTelemetryManager.generateLastRequestHeaderValue();
            }
            return headers;
        };
        /**
         * addLibraryData
         */
        BaseClient.prototype.createDefaultLibraryHeaders = function () {
            var headers = {};
            // client info headers
            headers[AADServerParamKeys.X_CLIENT_SKU] = this.config.libraryInfo.sku;
            headers[AADServerParamKeys.X_CLIENT_VER] = this.config.libraryInfo.version;
            headers[AADServerParamKeys.X_CLIENT_OS] = this.config.libraryInfo.os;
            headers[AADServerParamKeys.X_CLIENT_CPU] = this.config.libraryInfo.cpu;
            return headers;
        };
        /**
         * Http post to token endpoint
         * @param tokenEndpoint
         * @param queryString
         * @param headers
         * @param thumbprint
         */
        BaseClient.prototype.executePostToTokenEndpoint = function (tokenEndpoint, queryString, headers, thumbprint) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var response;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, { body: queryString, headers: headers })];
                        case 1:
                            response = _a.sent();
                            if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {
                                // Telemetry data successfully logged by server, clear Telemetry cache
                                this.config.serverTelemetryManager.clearTelemetryCache();
                            }
                            return [2 /*return*/, response];
                    }
                });
            });
        };
        /**
         * Updates the authority object of the client. Endpoint discovery must be completed.
         * @param updatedAuthority
         */
        BaseClient.prototype.updateAuthority = function (updatedAuthority) {
            if (!updatedAuthority.discoveryComplete()) {
                throw ClientAuthError.createEndpointDiscoveryIncompleteError("Updated authority has not completed endpoint discovery.");
            }
            this.authority = updatedAuthority;
        };
        return BaseClient;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Validates server consumable params from the "request" objects
     */
    var RequestValidator = /** @class */ (function () {
        function RequestValidator() {
        }
        /**
         * Utility to check if the `redirectUri` in the request is a non-null value
         * @param redirectUri
         */
        RequestValidator.validateRedirectUri = function (redirectUri) {
            if (StringUtils.isEmpty(redirectUri)) {
                throw ClientConfigurationError.createRedirectUriEmptyError();
            }
        };
        /**
         * Utility to validate prompt sent by the user in the request
         * @param prompt
         */
        RequestValidator.validatePrompt = function (prompt) {
            if ([
                PromptValue.LOGIN,
                PromptValue.SELECT_ACCOUNT,
                PromptValue.CONSENT,
                PromptValue.NONE
            ].indexOf(prompt) < 0) {
                throw ClientConfigurationError.createInvalidPromptError(prompt);
            }
        };
        RequestValidator.validateClaims = function (claims) {
            try {
                JSON.parse(claims);
            }
            catch (e) {
                throw ClientConfigurationError.createInvalidClaimsRequestError();
            }
        };
        /**
         * Utility to validate code_challenge and code_challenge_method
         * @param codeChallenge
         * @param codeChallengeMethod
         */
        RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {
            if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {
                throw ClientConfigurationError.createInvalidCodeChallengeParamsError();
            }
            else {
                this.validateCodeChallengeMethod(codeChallengeMethod);
            }
        };
        /**
         * Utility to validate code_challenge_method
         * @param codeChallengeMethod
         */
        RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {
            if ([
                CodeChallengeMethodValues.PLAIN,
                CodeChallengeMethodValues.S256
            ].indexOf(codeChallengeMethod) < 0) {
                throw ClientConfigurationError.createInvalidCodeChallengeMethodError();
            }
        };
        /**
         * Removes unnecessary or duplicate query parameters from extraQueryParameters
         * @param request
         */
        RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {
            if (!eQParams) {
                return {};
            }
            // Remove any query parameters already included in SSO params
            queryParams.forEach(function (value, key) {
                if (eQParams[key]) {
                    delete eQParams[key];
                }
            });
            return eQParams;
        };
        return RequestValidator;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var RequestParameterBuilder = /** @class */ (function () {
        function RequestParameterBuilder() {
            this.parameters = new Map();
        }
        /**
         * add response_type = code
         */
        RequestParameterBuilder.prototype.addResponseTypeCode = function () {
            this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants$1.CODE_RESPONSE_TYPE));
        };
        /**
         * add response_mode. defaults to query.
         * @param responseMode
         */
        RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {
            this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent((responseMode) ? responseMode : ResponseMode.QUERY));
        };
        /**
         * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios
         * @param scopeSet
         * @param addOidcScopes
         */
        RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {
            if (addOidcScopes === void 0) { addOidcScopes = true; }
            var requestScopes = addOidcScopes ? __spreadArrays$1(scopes || [], [Constants$1.OPENID_SCOPE, Constants$1.PROFILE_SCOPE]) : scopes || [];
            var scopeSet = new ScopeSet(requestScopes);
            this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));
        };
        /**
         * add clientId
         * @param clientId
         */
        RequestParameterBuilder.prototype.addClientId = function (clientId) {
            this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));
        };
        /**
         * add redirect_uri
         * @param redirectUri
         */
        RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {
            RequestValidator.validateRedirectUri(redirectUri);
            this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));
        };
        /**
         * add post logout redirectUri
         * @param redirectUri
         */
        RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {
            RequestValidator.validateRedirectUri(redirectUri);
            this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));
        };
        /**
         * add id_token_hint to logout request
         * @param idTokenHint
         */
        RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {
            this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));
        };
        /**
         * add domain_hint
         * @param domainHint
         */
        RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {
            this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));
        };
        /**
         * add login_hint
         * @param loginHint
         */
        RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {
            this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));
        };
        /**
         * add sid
         * @param sid
         */
        RequestParameterBuilder.prototype.addSid = function (sid) {
            this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));
        };
        /**
         * add claims
         * @param claims
         */
        RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {
            var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);
            RequestValidator.validateClaims(mergedClaims);
            this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));
        };
        /**
         * add correlationId
         * @param correlationId
         */
        RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {
            this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));
        };
        /**
         * add library info query params
         * @param libraryInfo
         */
        RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {
            // Telemetry Info
            this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);
            this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);
            this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);
            this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);
        };
        /**
         * add prompt
         * @param prompt
         */
        RequestParameterBuilder.prototype.addPrompt = function (prompt) {
            RequestValidator.validatePrompt(prompt);
            this.parameters.set("" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));
        };
        /**
         * add state
         * @param state
         */
        RequestParameterBuilder.prototype.addState = function (state) {
            if (!StringUtils.isEmpty(state)) {
                this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));
            }
        };
        /**
         * add nonce
         * @param nonce
         */
        RequestParameterBuilder.prototype.addNonce = function (nonce) {
            this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));
        };
        /**
         * add code_challenge and code_challenge_method
         * - throw if either of them are not passed
         * @param codeChallenge
         * @param codeChallengeMethod
         */
        RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {
            RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);
            if (codeChallenge && codeChallengeMethod) {
                this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));
                this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));
            }
            else {
                throw ClientConfigurationError.createInvalidCodeChallengeParamsError();
            }
        };
        /**
         * add the `authorization_code` passed by the user to exchange for a token
         * @param code
         */
        RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {
            this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));
        };
        /**
         * add the `authorization_code` passed by the user to exchange for a token
         * @param code
         */
        RequestParameterBuilder.prototype.addDeviceCode = function (code) {
            this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));
        };
        /**
         * add the `refreshToken` passed by the user
         * @param refreshToken
         */
        RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {
            this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));
        };
        /**
         * add the `code_verifier` passed by the user to exchange for a token
         * @param codeVerifier
         */
        RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {
            this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));
        };
        /**
         * add client_secret
         * @param clientSecret
         */
        RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {
            this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));
        };
        /**
         * add clientAssertion for confidential client flows
         * @param clientAssertion
         */
        RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {
            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));
        };
        /**
         * add clientAssertionType for confidential client flows
         * @param clientAssertionType
         */
        RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {
            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));
        };
        /**
         * add OBO assertion for confidential client flows
         * @param clientAssertion
         */
        RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {
            this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));
        };
        /**
         * add grant type
         * @param grantType
         */
        RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {
            this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));
        };
        /**
         * add grant type
         * @param grantType
         */
        RequestParameterBuilder.prototype.addGrantType = function (grantType) {
            this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));
        };
        /**
         * add client info
         *
         */
        RequestParameterBuilder.prototype.addClientInfo = function () {
            this.parameters.set(ClientInfo, "1");
        };
        /**
         * add extraQueryParams
         * @param eQparams
         */
        RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQparams) {
            var _this = this;
            RequestValidator.sanitizeEQParams(eQparams, this.parameters);
            Object.keys(eQparams).forEach(function (key) {
                _this.parameters.set(key, eQparams[key]);
            });
        };
        RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {
            var mergedClaims;
            // Parse provided claims into JSON object or initialize empty object
            if (!claims) {
                mergedClaims = {};
            }
            else {
                try {
                    mergedClaims = JSON.parse(claims);
                }
                catch (e) {
                    throw ClientConfigurationError.createInvalidClaimsRequestError();
                }
            }
            if (clientCapabilities && clientCapabilities.length > 0) {
                if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {
                    // Add access_token key to claims object
                    mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};
                }
                // Add xms_cc claim with provided clientCapabilities to access_token key
                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {
                    values: clientCapabilities
                };
            }
            return JSON.stringify(mergedClaims);
        };
        /**
         * adds `username` for Password Grant flow
         * @param username
         */
        RequestParameterBuilder.prototype.addUsername = function (username) {
            this.parameters.set(PasswordGrantConstants.username, username);
        };
        /**
         * adds `password` for Password Grant flow
         * @param password
         */
        RequestParameterBuilder.prototype.addPassword = function (password) {
            this.parameters.set(PasswordGrantConstants.password, password);
        };
        /**
         * add pop_jwk to query params
         * @param cnfString
         */
        RequestParameterBuilder.prototype.addPopToken = function (cnfString) {
            if (!StringUtils.isEmpty(cnfString)) {
                this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);
                this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));
            }
        };
        /**
         * Utility to create a URL from the params map
         */
        RequestParameterBuilder.prototype.createQueryString = function () {
            var queryParameterArray = new Array();
            this.parameters.forEach(function (value, key) {
                queryParameterArray.push(key + "=" + value);
            });
            return queryParameterArray.join("&");
        };
        return RequestParameterBuilder;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Utility class which exposes functions for managing date and time operations.
     */
    var TimeUtils = /** @class */ (function () {
        function TimeUtils() {
        }
        /**
         * return the current time in Unix time (seconds).
         */
        TimeUtils.nowSeconds = function () {
            // Date.getTime() returns in milliseconds.
            return Math.round(new Date().getTime() / 1000.0);
        };
        /**
         * check if a token is expired based on given UTC time in seconds.
         * @param expiresOn
         */
        TimeUtils.isTokenExpired = function (expiresOn, offset) {
            // check for access token expiry
            var expirationSec = Number(expiresOn) || 0;
            var offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;
            // If current time + offset is greater than token expiration time, then token is expired.
            return (offsetCurrentTimeSec > expirationSec);
        };
        return TimeUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * ID_TOKEN Cache
     *
     * Key:Value Schema:
     *
     * Key Example: uid.utid-login.microsoftonline.com-idtoken-clientId-contoso.com-
     *
     * Value Schema:
     * {
     *      homeAccountId: home account identifier for the auth scheme,
     *      environment: entity that issued the token, represented as a full host
     *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
     *      clientId: client ID of the application
     *      secret: Actual credential as a string
     *      realm: Full tenant or organizational identifier that the account belongs to
     * }
     */
    var IdTokenEntity = /** @class */ (function (_super) {
        __extends$1$1(IdTokenEntity, _super);
        function IdTokenEntity() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Create IdTokenEntity
         * @param homeAccountId
         * @param authenticationResult
         * @param clientId
         * @param authority
         */
        IdTokenEntity.createIdTokenEntity = function (homeAccountId, environment, idToken, clientId, tenantId, oboAssertion) {
            var idTokenEntity = new IdTokenEntity();
            idTokenEntity.credentialType = CredentialType.ID_TOKEN;
            idTokenEntity.homeAccountId = homeAccountId;
            idTokenEntity.environment = environment;
            idTokenEntity.clientId = clientId;
            idTokenEntity.secret = idToken;
            idTokenEntity.realm = tenantId;
            idTokenEntity.oboAssertion = oboAssertion;
            return idTokenEntity;
        };
        /**
         * Validates an entity: checks for all expected params
         * @param entity
         */
        IdTokenEntity.isIdTokenEntity = function (entity) {
            if (!entity) {
                return false;
            }
            return (entity.hasOwnProperty("homeAccountId") &&
                entity.hasOwnProperty("environment") &&
                entity.hasOwnProperty("credentialType") &&
                entity.hasOwnProperty("realm") &&
                entity.hasOwnProperty("clientId") &&
                entity.hasOwnProperty("secret") &&
                entity["credentialType"] === CredentialType.ID_TOKEN);
        };
        return IdTokenEntity;
    }(CredentialEntity));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * ACCESS_TOKEN Credential Type
     *
     * Key:Value Schema:
     *
     * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read
     *
     * Value Schema:
     * {
     *      homeAccountId: home account identifier for the auth scheme,
     *      environment: entity that issued the token, represented as a full host
     *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
     *      clientId: client ID of the application
     *      secret: Actual credential as a string
     *      familyId: Family ID identifier, usually only used for refresh tokens
     *      realm: Full tenant or organizational identifier that the account belongs to
     *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
     *      cachedAt: Absolute device time when entry was created in the cache.
     *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.
     *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.
     *      keyId: used for POP and SSH tokenTypes
     *      tokenType: Type of the token issued. Usually "Bearer"
     * }
     */
    var AccessTokenEntity = /** @class */ (function (_super) {
        __extends$1$1(AccessTokenEntity, _super);
        function AccessTokenEntity() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Create AccessTokenEntity
         * @param homeAccountId
         * @param environment
         * @param accessToken
         * @param clientId
         * @param tenantId
         * @param scopes
         * @param expiresOn
         * @param extExpiresOn
         */
        AccessTokenEntity.createAccessTokenEntity = function (homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, tokenType, oboAssertion) {
            var atEntity = new AccessTokenEntity();
            atEntity.homeAccountId = homeAccountId;
            atEntity.credentialType = CredentialType.ACCESS_TOKEN;
            atEntity.secret = accessToken;
            var currentTime = TimeUtils.nowSeconds();
            atEntity.cachedAt = currentTime.toString();
            /*
             * Token expiry time.
             * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.
             */
            atEntity.expiresOn = expiresOn.toString();
            atEntity.extendedExpiresOn = extExpiresOn.toString();
            atEntity.environment = environment;
            atEntity.clientId = clientId;
            atEntity.realm = tenantId;
            atEntity.target = scopes;
            atEntity.oboAssertion = oboAssertion;
            atEntity.tokenType = StringUtils.isEmpty(tokenType) ? AuthenticationScheme.BEARER : tokenType;
            return atEntity;
        };
        /**
         * Validates an entity: checks for all expected params
         * @param entity
         */
        AccessTokenEntity.isAccessTokenEntity = function (entity) {
            if (!entity) {
                return false;
            }
            return (entity.hasOwnProperty("homeAccountId") &&
                entity.hasOwnProperty("environment") &&
                entity.hasOwnProperty("credentialType") &&
                entity.hasOwnProperty("realm") &&
                entity.hasOwnProperty("clientId") &&
                entity.hasOwnProperty("secret") &&
                entity.hasOwnProperty("target") &&
                entity["credentialType"] === CredentialType.ACCESS_TOKEN);
        };
        return AccessTokenEntity;
    }(CredentialEntity));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * REFRESH_TOKEN Cache
     *
     * Key:Value Schema:
     *
     * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--
     *
     * Value:
     * {
     *      homeAccountId: home account identifier for the auth scheme,
     *      environment: entity that issued the token, represented as a full host
     *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
     *      clientId: client ID of the application
     *      secret: Actual credential as a string
     *      familyId: Family ID identifier, '1' represents Microsoft Family
     *      realm: Full tenant or organizational identifier that the account belongs to
     *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
     * }
     */
    var RefreshTokenEntity = /** @class */ (function (_super) {
        __extends$1$1(RefreshTokenEntity, _super);
        function RefreshTokenEntity() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Create RefreshTokenEntity
         * @param homeAccountId
         * @param authenticationResult
         * @param clientId
         * @param authority
         */
        RefreshTokenEntity.createRefreshTokenEntity = function (homeAccountId, environment, refreshToken, clientId, familyId, oboAssertion) {
            var rtEntity = new RefreshTokenEntity();
            rtEntity.clientId = clientId;
            rtEntity.credentialType = CredentialType.REFRESH_TOKEN;
            rtEntity.environment = environment;
            rtEntity.homeAccountId = homeAccountId;
            rtEntity.secret = refreshToken;
            rtEntity.oboAssertion = oboAssertion;
            if (familyId)
                rtEntity.familyId = familyId;
            return rtEntity;
        };
        /**
         * Validates an entity: checks for all expected params
         * @param entity
         */
        RefreshTokenEntity.isRefreshTokenEntity = function (entity) {
            if (!entity) {
                return false;
            }
            return (entity.hasOwnProperty("homeAccountId") &&
                entity.hasOwnProperty("environment") &&
                entity.hasOwnProperty("credentialType") &&
                entity.hasOwnProperty("clientId") &&
                entity.hasOwnProperty("secret") &&
                entity["credentialType"] === CredentialType.REFRESH_TOKEN);
        };
        return RefreshTokenEntity;
    }(CredentialEntity));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * InteractionRequiredAuthErrorMessage class containing string constants used by error codes and messages.
     */
    var InteractionRequiredAuthErrorMessage = [
        "interaction_required",
        "consent_required",
        "login_required"
    ];
    var InteractionRequiredAuthSubErrorMessage = [
        "message_only",
        "additional_action",
        "basic_action",
        "user_password_expired",
        "consent_required"
    ];
    /**
     * Error thrown when user interaction is required at the auth server.
     */
    var InteractionRequiredAuthError = /** @class */ (function (_super) {
        __extends$1$1(InteractionRequiredAuthError, _super);
        function InteractionRequiredAuthError(errorCode, errorMessage, subError) {
            var _this = _super.call(this, errorCode, errorMessage, subError) || this;
            _this.name = "InteractionRequiredAuthError";
            Object.setPrototypeOf(_this, InteractionRequiredAuthError.prototype);
            return _this;
        }
        InteractionRequiredAuthError.isInteractionRequiredError = function (errorCode, errorString, subError) {
            var isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredAuthErrorMessage.indexOf(errorCode) > -1;
            var isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;
            var isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredAuthErrorMessage.some(function (irErrorCode) {
                return errorString.indexOf(irErrorCode) > -1;
            });
            return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;
        };
        return InteractionRequiredAuthError;
    }(ServerError));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var CacheRecord = /** @class */ (function () {
        function CacheRecord(accountEntity, idTokenEntity, accessTokenEntity, refreshTokenEntity, appMetadataEntity) {
            this.account = accountEntity || null;
            this.idToken = idTokenEntity || null;
            this.accessToken = accessTokenEntity || null;
            this.refreshToken = refreshTokenEntity || null;
            this.appMetadata = appMetadataEntity || null;
        }
        return CacheRecord;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Class which provides helpers for OAuth 2.0 protocol specific values
     */
    var ProtocolUtils = /** @class */ (function () {
        function ProtocolUtils() {
        }
        /**
         * Appends user state with random guid, or returns random guid.
         * @param userState
         * @param randomGuid
         */
        ProtocolUtils.setRequestState = function (cryptoObj, userState, meta) {
            var libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);
            return !StringUtils.isEmpty(userState) ? "" + libraryState + Constants$1.RESOURCE_DELIM + userState : libraryState;
        };
        /**
         * Generates the state value used by the common library.
         * @param randomGuid
         * @param cryptoObj
         */
        ProtocolUtils.generateLibraryState = function (cryptoObj, meta) {
            if (!cryptoObj) {
                throw ClientAuthError.createNoCryptoObjectError("generateLibraryState");
            }
            // Create a state object containing a unique id and the timestamp of the request creation
            var stateObj = {
                id: cryptoObj.createNewGuid(),
                ts: TimeUtils.nowSeconds()
            };
            if (meta) {
                stateObj.meta = meta;
            }
            var stateString = JSON.stringify(stateObj);
            return cryptoObj.base64Encode(stateString);
        };
        /**
         * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.
         * @param state
         * @param cryptoObj
         */
        ProtocolUtils.parseRequestState = function (cryptoObj, state) {
            if (!cryptoObj) {
                throw ClientAuthError.createNoCryptoObjectError("parseRequestState");
            }
            if (StringUtils.isEmpty(state)) {
                throw ClientAuthError.createInvalidStateError(state, "Null, undefined or empty state");
            }
            try {
                // Split the state between library state and user passed state and decode them separately
                var splitState = decodeURIComponent(state).split(Constants$1.RESOURCE_DELIM);
                var libraryState = splitState[0];
                var userState = splitState.length > 1 ? splitState.slice(1).join(Constants$1.RESOURCE_DELIM) : "";
                var libraryStateString = cryptoObj.base64Decode(libraryState);
                var libraryStateObj = JSON.parse(libraryStateString);
                return {
                    userRequestState: !StringUtils.isEmpty(userState) ? userState : "",
                    libraryState: libraryStateObj
                };
            }
            catch (e) {
                throw ClientAuthError.createInvalidStateError(state, e);
            }
        };
        return ProtocolUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var KeyLocation;
    (function (KeyLocation) {
        KeyLocation["SW"] = "sw";
        KeyLocation["UHW"] = "uhw";
    })(KeyLocation || (KeyLocation = {}));
    var PopTokenGenerator = /** @class */ (function () {
        function PopTokenGenerator(cryptoUtils) {
            this.cryptoUtils = cryptoUtils;
        }
        PopTokenGenerator.prototype.generateCnf = function (resourceRequestMethod, resourceRequestUri) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var kidThumbprint, reqCnf;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.cryptoUtils.getPublicKeyThumbprint(resourceRequestMethod, resourceRequestUri)];
                        case 1:
                            kidThumbprint = _a.sent();
                            reqCnf = {
                                kid: kidThumbprint,
                                xms_ksl: KeyLocation.SW
                            };
                            return [2 /*return*/, this.cryptoUtils.base64Encode(JSON.stringify(reqCnf))];
                    }
                });
            });
        };
        PopTokenGenerator.prototype.signPopToken = function (accessToken, resourceRequestMethod, resourceRequestUri) {
            var _a;
            return __awaiter$1$1(this, void 0, void 0, function () {
                var tokenClaims, resourceUrlString, resourceUrlComponents;
                return __generator$1$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            tokenClaims = AuthToken.extractTokenClaims(accessToken, this.cryptoUtils);
                            resourceUrlString = new UrlString(resourceRequestUri);
                            resourceUrlComponents = resourceUrlString.getUrlComponents();
                            if (!((_a = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _a === void 0 ? void 0 : _a.kid)) {
                                throw ClientAuthError.createTokenClaimsRequiredError();
                            }
                            return [4 /*yield*/, this.cryptoUtils.signJwt({
                                    at: accessToken,
                                    ts: "" + TimeUtils.nowSeconds(),
                                    m: resourceRequestMethod.toUpperCase(),
                                    u: resourceUrlComponents.HostNameAndPort || "",
                                    nonce: this.cryptoUtils.createNewGuid(),
                                    p: resourceUrlComponents.AbsolutePath,
                                    q: [[], resourceUrlComponents.QueryString],
                                }, tokenClaims.cnf.kid)];
                        case 1: return [2 /*return*/, _b.sent()];
                    }
                });
            });
        };
        return PopTokenGenerator;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * APP_METADATA Cache
     *
     * Key:Value Schema:
     *
     * Key: appmetadata-<environment>-<client_id>
     *
     * Value:
     * {
     *      clientId: client ID of the application
     *      environment: entity that issued the token, represented as a full host
     *      familyId: Family ID identifier, '1' represents Microsoft Family
     * }
     */
    var AppMetadataEntity = /** @class */ (function () {
        function AppMetadataEntity() {
        }
        /**
         * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>
         */
        AppMetadataEntity.prototype.generateAppMetadataKey = function () {
            return AppMetadataEntity.generateAppMetadataCacheKey(this.environment, this.clientId);
        };
        /**
         * Generate AppMetadata Cache Key
         */
        AppMetadataEntity.generateAppMetadataCacheKey = function (environment, clientId) {
            var appMetaDataKeyArray = [
                APP_METADATA,
                environment,
                clientId,
            ];
            return appMetaDataKeyArray.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
        };
        /**
         * Creates AppMetadataEntity
         * @param clientId
         * @param environment
         * @param familyId
         */
        AppMetadataEntity.createAppMetadataEntity = function (clientId, environment, familyId) {
            var appMetadata = new AppMetadataEntity();
            appMetadata.clientId = clientId;
            appMetadata.environment = environment;
            if (familyId) {
                appMetadata.familyId = familyId;
            }
            return appMetadata;
        };
        /**
         * Validates an entity: checks for all expected params
         * @param entity
         */
        AppMetadataEntity.isAppMetadataEntity = function (key, entity) {
            if (!entity) {
                return false;
            }
            return (key.indexOf(APP_METADATA) === 0 &&
                entity.hasOwnProperty("clientId") &&
                entity.hasOwnProperty("environment"));
        };
        return AppMetadataEntity;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var TokenCacheContext = /** @class */ (function () {
        function TokenCacheContext(tokenCache, hasChanged) {
            this.cache = tokenCache;
            this.hasChanged = hasChanged;
        }
        Object.defineProperty(TokenCacheContext.prototype, "cacheHasChanged", {
            get: function () {
                return this.hasChanged;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TokenCacheContext.prototype, "tokenCache", {
            get: function () {
                return this.cache;
            },
            enumerable: true,
            configurable: true
        });
        return TokenCacheContext;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Class that handles response parsing.
     */
    var ResponseHandler = /** @class */ (function () {
        function ResponseHandler(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin) {
            this.clientId = clientId;
            this.cacheStorage = cacheStorage;
            this.cryptoObj = cryptoObj;
            this.logger = logger;
            this.serializableCache = serializableCache;
            this.persistencePlugin = persistencePlugin;
        }
        /**
         * Function which validates server authorization code response.
         * @param serverResponseHash
         * @param cachedState
         * @param cryptoObj
         */
        ResponseHandler.prototype.validateServerAuthorizationCodeResponse = function (serverResponseHash, cachedState, cryptoObj) {
            if (!serverResponseHash.state || !cachedState) {
                throw !serverResponseHash.state ? ClientAuthError.createStateNotFoundError("Server State") : ClientAuthError.createStateNotFoundError("Cached State");
            }
            if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {
                throw ClientAuthError.createStateMismatchError();
            }
            // Check for error
            if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {
                if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {
                    throw new InteractionRequiredAuthError(serverResponseHash.error || Constants$1.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);
                }
                throw new ServerError(serverResponseHash.error || Constants$1.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);
            }
            if (serverResponseHash.client_info) {
                buildClientInfo(serverResponseHash.client_info, cryptoObj);
            }
        };
        /**
         * Function which validates server authorization token response.
         * @param serverResponse
         */
        ResponseHandler.prototype.validateTokenResponse = function (serverResponse) {
            // Check for error
            if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {
                if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {
                    throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);
                }
                var errString = serverResponse.error_codes + " - [" + serverResponse.timestamp + "]: " + serverResponse.error_description + " - Correlation ID: " + serverResponse.correlation_id + " - Trace ID: " + serverResponse.trace_id;
                throw new ServerError(serverResponse.error, errString);
            }
        };
        /**
         * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.
         * @param serverTokenResponse
         * @param authority
         */
        ResponseHandler.prototype.handleServerTokenResponse = function (serverTokenResponse, authority, resourceRequestMethod, resourceRequestUri, authCodePayload, requestScopes, oboAssertion, handlingRefreshTokenResponse) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var idTokenObj, requestStateObj, cacheRecord, cacheContext, key, account;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (serverTokenResponse.id_token) {
                                idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants$1.EMPTY_STRING, this.cryptoObj);
                                // token nonce check (TODO: Add a warning if no nonce is given?)
                                if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {
                                    if (idTokenObj.claims.nonce !== authCodePayload.nonce) {
                                        throw ClientAuthError.createNonceMismatchError();
                                    }
                                }
                            }
                            // generate homeAccountId
                            this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants$1.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);
                            if (!!authCodePayload && !!authCodePayload.state) {
                                requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);
                            }
                            cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, idTokenObj, requestStateObj && requestStateObj.libraryState, requestScopes, oboAssertion, authCodePayload);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, , 4, 7]);
                            if (!(this.persistencePlugin && this.serializableCache)) return [3 /*break*/, 3];
                            this.logger.verbose("Persistence enabled, calling beforeCacheAccess");
                            cacheContext = new TokenCacheContext(this.serializableCache, true);
                            return [4 /*yield*/, this.persistencePlugin.beforeCacheAccess(cacheContext)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            /*
                             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.
                             * If not present, we should return null, as it's the case that another application called removeAccount in between
                             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.
                             */
                            if (handlingRefreshTokenResponse && cacheRecord.account) {
                                key = cacheRecord.account.generateAccountKey();
                                account = this.cacheStorage.getAccount(key);
                                if (!account) {
                                    this.logger.warning("Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache");
                                    return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, idTokenObj, requestStateObj, resourceRequestMethod, resourceRequestUri)];
                                }
                            }
                            this.cacheStorage.saveCacheRecord(cacheRecord);
                            return [3 /*break*/, 7];
                        case 4:
                            if (!(this.persistencePlugin && this.serializableCache && cacheContext)) return [3 /*break*/, 6];
                            this.logger.verbose("Persistence enabled, calling afterCacheAccess");
                            return [4 /*yield*/, this.persistencePlugin.afterCacheAccess(cacheContext)];
                        case 5:
                            _a.sent();
                            _a.label = 6;
                        case 6: return [7 /*endfinally*/];
                        case 7: return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, idTokenObj, requestStateObj, resourceRequestMethod, resourceRequestUri)];
                    }
                });
            });
        };
        /**
         * Generates CacheRecord
         * @param serverTokenResponse
         * @param idTokenObj
         * @param authority
         */
        ResponseHandler.prototype.generateCacheRecord = function (serverTokenResponse, authority, idTokenObj, libraryState, requestScopes, oboAssertion, authCodePayload) {
            var env = Authority.generateEnvironmentFromAuthority(authority);
            if (StringUtils.isEmpty(env)) {
                throw ClientAuthError.createInvalidCacheEnvironmentError();
            }
            // IdToken: non AAD scenarios can have empty realm
            var cachedIdToken;
            var cachedAccount;
            if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {
                cachedIdToken = IdTokenEntity.createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token || Constants$1.EMPTY_STRING, this.clientId, idTokenObj.claims.tid || Constants$1.EMPTY_STRING, oboAssertion);
                cachedAccount = this.generateAccountEntity(serverTokenResponse, idTokenObj, authority, oboAssertion, authCodePayload);
            }
            // AccessToken
            var cachedAccessToken = null;
            if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {
                // If scopes not returned in server response, use request scopes
                var responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(requestScopes || []);
                // Expiration calculation
                var currentTime = TimeUtils.nowSeconds();
                // If the request timestamp was sent in the library state, use that timestamp to calculate expiration. Otherwise, use current time.
                var timestamp = libraryState ? libraryState.ts : currentTime;
                var tokenExpirationSeconds = timestamp + (serverTokenResponse.expires_in || 0);
                var extendedTokenExpirationSeconds = tokenExpirationSeconds + (serverTokenResponse.ext_expires_in || 0);
                // non AAD scenarios can have empty realm
                cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token || Constants$1.EMPTY_STRING, this.clientId, idTokenObj ? idTokenObj.claims.tid || Constants$1.EMPTY_STRING : authority.tenant, responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, serverTokenResponse.token_type, oboAssertion);
            }
            // refreshToken
            var cachedRefreshToken = null;
            if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {
                cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token || Constants$1.EMPTY_STRING, this.clientId, serverTokenResponse.foci, oboAssertion);
            }
            // appMetadata
            var cachedAppMetadata = null;
            if (!StringUtils.isEmpty(serverTokenResponse.foci)) {
                cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);
            }
            return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);
        };
        /**
         * Generate Account
         * @param serverTokenResponse
         * @param idToken
         * @param authority
         */
        ResponseHandler.prototype.generateAccountEntity = function (serverTokenResponse, idToken, authority, oboAssertion, authCodePayload) {
            var authorityType = authority.authorityType;
            var cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : "";
            var msGraphhost = authCodePayload ? authCodePayload.msgraph_host : "";
            // ADFS does not require client_info in the response
            if (authorityType === AuthorityType.Adfs) {
                this.logger.verbose("Authority type is ADFS, creating ADFS account");
                return AccountEntity.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);
            }
            // This fallback applies to B2C as well as they fall under an AAD account type.
            if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === "AAD") {
                throw ClientAuthError.createClientInfoEmptyError();
            }
            return serverTokenResponse.client_info ?
                AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, authority, idToken, oboAssertion, cloudGraphHostName, msGraphhost) :
                AccountEntity.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);
        };
        /**
         * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.
         *
         * Optionally takes a state string that is set as-is in the response.
         *
         * @param cacheRecord
         * @param idTokenObj
         * @param fromTokenCache
         * @param stateString
         */
        ResponseHandler.generateAuthenticationResult = function (cryptoObj, authority, cacheRecord, fromTokenCache, idTokenObj, requestState, resourceRequestMethod, resourceRequestUri) {
            var _a, _b, _c;
            return __awaiter$1$1(this, void 0, void 0, function () {
                var accessToken, responseScopes, expiresOn, extExpiresOn, familyId, popTokenGenerator, uid, tid;
                return __generator$1$1(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            accessToken = "";
                            responseScopes = [];
                            expiresOn = null;
                            familyId = Constants$1.EMPTY_STRING;
                            if (!cacheRecord.accessToken) return [3 /*break*/, 4];
                            if (!(cacheRecord.accessToken.tokenType === AuthenticationScheme.POP)) return [3 /*break*/, 2];
                            popTokenGenerator = new PopTokenGenerator(cryptoObj);
                            if (!resourceRequestMethod || !resourceRequestUri) {
                                throw ClientConfigurationError.createResourceRequestParametersRequiredError();
                            }
                            return [4 /*yield*/, popTokenGenerator.signPopToken(cacheRecord.accessToken.secret, resourceRequestMethod, resourceRequestUri)];
                        case 1:
                            accessToken = _d.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            accessToken = cacheRecord.accessToken.secret;
                            _d.label = 3;
                        case 3:
                            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();
                            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);
                            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);
                            _d.label = 4;
                        case 4:
                            if (cacheRecord.appMetadata) {
                                familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants$1.EMPTY_STRING;
                            }
                            uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants$1.EMPTY_STRING;
                            tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants$1.EMPTY_STRING;
                            return [2 /*return*/, {
                                    authority: authority.canonicalAuthority,
                                    uniqueId: uid,
                                    tenantId: tid,
                                    scopes: responseScopes,
                                    account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,
                                    idToken: idTokenObj ? idTokenObj.rawToken : Constants$1.EMPTY_STRING,
                                    idTokenClaims: idTokenObj ? idTokenObj.claims : {},
                                    accessToken: accessToken,
                                    fromCache: fromTokenCache,
                                    expiresOn: expiresOn,
                                    extExpiresOn: extExpiresOn,
                                    familyId: familyId,
                                    tokenType: ((_a = cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants$1.EMPTY_STRING,
                                    state: requestState ? requestState.userRequestState : Constants$1.EMPTY_STRING,
                                    cloudGraphHostName: ((_b = cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants$1.EMPTY_STRING,
                                    msGraphHost: ((_c = cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants$1.EMPTY_STRING
                                }];
                    }
                });
            });
        };
        return ResponseHandler;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Oauth2.0 Authorization Code client
     */
    var AuthorizationCodeClient = /** @class */ (function (_super) {
        __extends$1$1(AuthorizationCodeClient, _super);
        function AuthorizationCodeClient(configuration) {
            return _super.call(this, configuration) || this;
        }
        /**
         * Creates the URL of the authorization request letting the user input credentials and consent to the
         * application. The URL target the /authorize endpoint of the authority configured in the
         * application object.
         *
         * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI
         * sent in the request and should contain an authorization code, which can then be used to acquire tokens via
         * acquireToken(AuthorizationCodeRequest)
         * @param request
         */
        AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var queryString;
                return __generator$1$1(this, function (_a) {
                    queryString = this.createAuthCodeUrlQueryString(request);
                    return [2 /*return*/, this.authority.authorizationEndpoint + "?" + queryString];
                });
            });
        };
        /**
         * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the
         * authorization_code_grant
         * @param request
         */
        AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var response, responseHandler;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.info("in acquireToken call");
                            if (!request || StringUtils.isEmpty(request.code)) {
                                throw ClientAuthError.createTokenRequestCannotBeMadeError();
                            }
                            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];
                        case 1:
                            response = _a.sent();
                            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                            // Validate response. This function throws a server error if an error is returned by the server.
                            responseHandler.validateTokenResponse(response.body);
                            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, request.resourceRequestMethod, request.resourceRequestUri, authCodePayload)];
                        case 2: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * Handles the hash fragment response from public client code request. Returns a code response used by
         * the client to exchange for a token in acquireToken.
         * @param hashFragment
         */
        AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {
            // Handle responses.
            var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);
            // Deserialize hash fragment response parameters.
            var hashUrlString = new UrlString(hashFragment);
            // Deserialize hash fragment response parameters.
            var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());
            // Get code response
            responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);
            // throw when there is no auth code in the response
            if (!serverParams.code) {
                throw ClientAuthError.createNoAuthCodeInServerResponseError();
            }
            return __assign$1$1(__assign$1$1({}, serverParams), { 
                // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod
                code: serverParams.code });
        };
        /**
         * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
         * Default behaviour is to redirect the user to `window.location.href`.
         * @param authorityUri
         */
        AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {
            // Throw error if logoutRequest is null/undefined
            if (!logoutRequest) {
                throw ClientConfigurationError.createEmptyLogoutRequestError();
            }
            if (logoutRequest.account) {
                // Clear given account.
                this.cacheManager.removeAccount(AccountEntity.generateAccountCacheKey(logoutRequest.account));
            }
            else {
                // Clear all accounts and tokens
                this.cacheManager.clear();
            }
            var queryString = this.createLogoutUrlQueryString(logoutRequest);
            // Construct logout URI.
            return StringUtils.isEmpty(queryString) ? this.authority.endSessionEndpoint : this.authority.endSessionEndpoint + "?" + queryString;
        };
        /**
         * Executes POST request to token endpoint
         * @param authority
         * @param request
         */
        AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var thumbprint, requestBody, headers;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            thumbprint = {
                                clientId: this.config.authOptions.clientId,
                                authority: authority.canonicalAuthority,
                                scopes: request.scopes
                            };
                            return [4 /*yield*/, this.createTokenRequestBody(request)];
                        case 1:
                            requestBody = _a.sent();
                            headers = this.createDefaultTokenRequestHeaders();
                            return [2 /*return*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];
                    }
                });
            });
        };
        /**
         * Generates a map for all the params to be sent to the service
         * @param request
         */
        AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var parameterBuilder, clientAssertion, popTokenGenerator, cnfString, correlationId;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            parameterBuilder = new RequestParameterBuilder();
                            parameterBuilder.addClientId(this.config.authOptions.clientId);
                            // validate the redirectUri (to be a non null value)
                            parameterBuilder.addRedirectUri(request.redirectUri);
                            // Add scope array, parameter builder will add default scopes and dedupe
                            parameterBuilder.addScopes(request.scopes);
                            // add code: user set, not validated
                            parameterBuilder.addAuthorizationCode(request.code);
                            // add code_verifier if passed
                            if (request.codeVerifier) {
                                parameterBuilder.addCodeVerifier(request.codeVerifier);
                            }
                            if (this.config.clientCredentials.clientSecret) {
                                parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
                            }
                            if (this.config.clientCredentials.clientAssertion) {
                                clientAssertion = this.config.clientCredentials.clientAssertion;
                                parameterBuilder.addClientAssertion(clientAssertion.assertion);
                                parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
                            }
                            parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);
                            parameterBuilder.addClientInfo();
                            if (!(request.authenticationScheme === AuthenticationScheme.POP && !!request.resourceRequestMethod && !!request.resourceRequestUri)) return [3 /*break*/, 2];
                            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);
                            return [4 /*yield*/, popTokenGenerator.generateCnf(request.resourceRequestMethod, request.resourceRequestUri)];
                        case 1:
                            cnfString = _a.sent();
                            parameterBuilder.addPopToken(cnfString);
                            _a.label = 2;
                        case 2:
                            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
                            parameterBuilder.addCorrelationId(correlationId);
                            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                                parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
                            }
                            return [2 /*return*/, parameterBuilder.createQueryString()];
                    }
                });
            });
        };
        /**
         * This API validates the `AuthorizationCodeUrlRequest` and creates a URL
         * @param request
         */
        AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {
            var parameterBuilder = new RequestParameterBuilder();
            parameterBuilder.addClientId(this.config.authOptions.clientId);
            var requestScopes = __spreadArrays$1(request.scopes || [], request.extraScopesToConsent || []);
            parameterBuilder.addScopes(requestScopes);
            // validate the redirectUri (to be a non null value)
            parameterBuilder.addRedirectUri(request.redirectUri);
            // generate the correlationId if not set by the user and add
            var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
            parameterBuilder.addCorrelationId(correlationId);
            // add response_mode. If not passed in it defaults to query.
            parameterBuilder.addResponseMode(request.responseMode);
            // add response_type = code
            parameterBuilder.addResponseTypeCode();
            // add library info parameters
            parameterBuilder.addLibraryInfo(this.config.libraryInfo);
            // add client_info=1
            parameterBuilder.addClientInfo();
            if (request.codeChallenge && request.codeChallengeMethod) {
                parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);
            }
            if (request.prompt) {
                parameterBuilder.addPrompt(request.prompt);
            }
            if (request.domainHint) {
                parameterBuilder.addDomainHint(request.domainHint);
            }
            // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object
            if (request.sid) {
                parameterBuilder.addSid(request.sid);
            }
            else if (request.loginHint) {
                parameterBuilder.addLoginHint(request.loginHint);
            }
            else if (request.account && request.account.username) {
                parameterBuilder.addLoginHint(request.account.username);
            }
            if (request.nonce) {
                parameterBuilder.addNonce(request.nonce);
            }
            if (request.state) {
                parameterBuilder.addState(request.state);
            }
            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
            }
            if (request.extraQueryParameters) {
                parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);
            }
            return parameterBuilder.createQueryString();
        };
        /**
         * This API validates the `EndSessionRequest` and creates a URL
         * @param request
         */
        AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {
            var parameterBuilder = new RequestParameterBuilder();
            if (request.postLogoutRedirectUri) {
                parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);
            }
            if (request.correlationId) {
                parameterBuilder.addCorrelationId(request.correlationId);
            }
            if (request.idTokenHint) {
                parameterBuilder.addIdTokenHint(request.idTokenHint);
            }
            return parameterBuilder.createQueryString();
        };
        return AuthorizationCodeClient;
    }(BaseClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * OAuth2.0 Device code client
     */
    var DeviceCodeClient = /** @class */ (function (_super) {
        __extends$1$1(DeviceCodeClient, _super);
        function DeviceCodeClient(configuration) {
            return _super.call(this, configuration) || this;
        }
        /**
         * Gets device code from device code endpoint, calls back to with device code response, and
         * polls token endpoint to exchange device code for tokens
         * @param request
         */
        DeviceCodeClient.prototype.acquireToken = function (request) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var deviceCodeResponse, response, responseHandler;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getDeviceCode(request)];
                        case 1:
                            deviceCodeResponse = _a.sent();
                            request.deviceCodeCallback(deviceCodeResponse);
                            return [4 /*yield*/, this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];
                        case 2:
                            response = _a.sent();
                            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                            // Validate response. This function throws a server error if an error is returned by the server.
                            responseHandler.validateTokenResponse(response);
                            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response, this.authority, request.resourceRequestMethod, request.resourceRequestUri)];
                        case 3: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * Creates device code request and executes http GET
         * @param request
         */
        DeviceCodeClient.prototype.getDeviceCode = function (request) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var queryString, headers, thumbprint;
                return __generator$1$1(this, function (_a) {
                    queryString = this.createQueryString(request);
                    headers = this.createDefaultTokenRequestHeaders();
                    thumbprint = {
                        clientId: this.config.authOptions.clientId,
                        authority: request.authority,
                        scopes: request.scopes
                    };
                    return [2 /*return*/, this.executePostRequestToDeviceCodeEndpoint(this.authority.deviceCodeEndpoint, queryString, headers, thumbprint)];
                });
            });
        };
        /**
         * Executes POST request to device code endpoint
         * @param deviceCodeEndpoint
         * @param queryString
         * @param headers
         */
        DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;
                return __generator$1$1(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {
                                body: queryString,
                                headers: headers
                            })];
                        case 1:
                            _a = (_b.sent()).body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;
                            return [2 /*return*/, {
                                    userCode: userCode,
                                    deviceCode: deviceCode,
                                    verificationUri: verificationUri,
                                    expiresIn: expiresIn,
                                    interval: interval,
                                    message: message
                                }];
                    }
                });
            });
        };
        /**
         * Create device code endpoint query parameters and returns string
         */
        DeviceCodeClient.prototype.createQueryString = function (request) {
            var parameterBuilder = new RequestParameterBuilder();
            parameterBuilder.addScopes(request.scopes);
            parameterBuilder.addClientId(this.config.authOptions.clientId);
            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
            }
            return parameterBuilder.createQueryString();
        };
        /**
         * Creates token request with device code response and polls token endpoint at interval set by the device code
         * response
         * @param request
         * @param deviceCodeResponse
         */
        DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var requestBody, headers, userSpecifiedTimeout, deviceCodeExpirationTime, pollingIntervalMilli;
                var _this = this;
                return __generator$1$1(this, function (_a) {
                    requestBody = this.createTokenRequestBody(request, deviceCodeResponse);
                    headers = this.createDefaultTokenRequestHeaders();
                    userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;
                    deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;
                    pollingIntervalMilli = deviceCodeResponse.interval * 1000;
                    /*
                     * Poll token endpoint while (device code is not expired AND operation has not been cancelled by
                     * setting CancellationToken.cancel = true). POST request is sent at interval set by pollingIntervalMilli
                     */
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var intervalId = setInterval(function () { return __awaiter$1$1(_this, void 0, void 0, function () {
                                var thumbprint, response, error_1;
                                return __generator$1$1(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            _a.trys.push([0, 6, , 7]);
                                            if (!request.cancel) return [3 /*break*/, 1];
                                            this.logger.error("Token request cancelled by setting DeviceCodeRequest.cancel = true");
                                            clearInterval(intervalId);
                                            reject(ClientAuthError.createDeviceCodeCancelledError());
                                            return [3 /*break*/, 5];
                                        case 1:
                                            if (!(userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout)) return [3 /*break*/, 2];
                                            this.logger.error("User defined timeout for device code polling reached. The timeout was set for " + userSpecifiedTimeout);
                                            clearInterval(intervalId);
                                            reject(ClientAuthError.createUserTimeoutReachedError());
                                            return [3 /*break*/, 5];
                                        case 2:
                                            if (!(TimeUtils.nowSeconds() > deviceCodeExpirationTime)) return [3 /*break*/, 3];
                                            if (userSpecifiedTimeout) {
                                                this.logger.verbose("User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for " + userSpecifiedTimeout);
                                            }
                                            this.logger.error("Device code expired. Expiration time of device code was " + deviceCodeExpirationTime);
                                            clearInterval(intervalId);
                                            reject(ClientAuthError.createDeviceCodeExpiredError());
                                            return [3 /*break*/, 5];
                                        case 3:
                                            thumbprint = {
                                                clientId: this.config.authOptions.clientId,
                                                authority: request.authority,
                                                scopes: request.scopes
                                            };
                                            return [4 /*yield*/, this.executePostToTokenEndpoint(this.authority.tokenEndpoint, requestBody, headers, thumbprint)];
                                        case 4:
                                            response = _a.sent();
                                            if (response.body && response.body.error === Constants$1.AUTHORIZATION_PENDING) {
                                                // user authorization is pending. Sleep for polling interval and try again
                                                this.logger.info(response.body.error_description || "no_error_description");
                                            }
                                            else {
                                                clearInterval(intervalId);
                                                resolve(response.body);
                                            }
                                            _a.label = 5;
                                        case 5: return [3 /*break*/, 7];
                                        case 6:
                                            error_1 = _a.sent();
                                            clearInterval(intervalId);
                                            reject(error_1);
                                            return [3 /*break*/, 7];
                                        case 7: return [2 /*return*/];
                                    }
                                });
                            }); }, pollingIntervalMilli);
                        })];
                });
            });
        };
        /**
         * Creates query parameters and converts to string.
         * @param request
         * @param deviceCodeResponse
         */
        DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {
            var requestParameters = new RequestParameterBuilder();
            requestParameters.addScopes(request.scopes);
            requestParameters.addClientId(this.config.authOptions.clientId);
            requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);
            requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);
            var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
            requestParameters.addCorrelationId(correlationId);
            requestParameters.addClientInfo();
            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);
            }
            return requestParameters.createQueryString();
        };
        return DeviceCodeClient;
    }(BaseClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * OAuth2.0 refresh token client
     */
    var RefreshTokenClient = /** @class */ (function (_super) {
        __extends$1$1(RefreshTokenClient, _super);
        function RefreshTokenClient(configuration) {
            return _super.call(this, configuration) || this;
        }
        RefreshTokenClient.prototype.acquireToken = function (request) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var response, responseHandler;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];
                        case 1:
                            response = _a.sent();
                            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                            responseHandler.validateTokenResponse(response.body);
                            return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, request.resourceRequestMethod, request.resourceRequestUri, undefined, [], undefined, true)];
                    }
                });
            });
        };
        /**
         * Gets cached refresh token and attaches to request, then calls acquireToken API
         * @param request
         */
        RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;
                return __generator$1$1(this, function (_a) {
                    // Cannot renew token if no request object is given.
                    if (!request) {
                        throw ClientConfigurationError.createEmptyTokenRequestError();
                    }
                    // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases
                    if (!request.account) {
                        throw ClientAuthError.createNoAccountInSilentRequestError();
                    }
                    isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);
                    // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest
                    if (isFOCI) {
                        try {
                            return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, true)];
                        }
                        catch (e) {
                            noFamilyRTInCache = e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.noTokensFoundError.code;
                            clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;
                            // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)
                            if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {
                                return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];
                                // throw in all other cases
                            }
                            else {
                                throw e;
                            }
                        }
                    }
                    // fall back to application refresh token acquisition
                    return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];
                });
            });
        };
        /**
         * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached
         * @param request
         */
        RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var refreshToken, refreshTokenRequest;
                return __generator$1$1(this, function (_a) {
                    refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);
                    // no refresh Token
                    if (!refreshToken) {
                        throw ClientAuthError.createNoTokensFoundError();
                    }
                    refreshTokenRequest = __assign$1$1(__assign$1$1({}, request), { refreshToken: refreshToken.secret, authenticationScheme: AuthenticationScheme.BEARER });
                    return [2 /*return*/, this.acquireToken(refreshTokenRequest)];
                });
            });
        };
        /**
         * Constructs the network message and makes a NW call to the underlying secure token service
         * @param request
         * @param authority
         */
        RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var requestBody, headers, thumbprint;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.createTokenRequestBody(request)];
                        case 1:
                            requestBody = _a.sent();
                            headers = this.createDefaultTokenRequestHeaders();
                            thumbprint = {
                                clientId: this.config.authOptions.clientId,
                                authority: authority.canonicalAuthority,
                                scopes: request.scopes
                            };
                            return [2 /*return*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];
                    }
                });
            });
        };
        /**
         * Helper function to create the token request body
         * @param request
         */
        RefreshTokenClient.prototype.createTokenRequestBody = function (request) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var parameterBuilder, correlationId, clientAssertion, popTokenGenerator, _a, _b;
                return __generator$1$1(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            parameterBuilder = new RequestParameterBuilder();
                            parameterBuilder.addClientId(this.config.authOptions.clientId);
                            parameterBuilder.addScopes(request.scopes);
                            parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);
                            parameterBuilder.addClientInfo();
                            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
                            parameterBuilder.addCorrelationId(correlationId);
                            parameterBuilder.addRefreshToken(request.refreshToken);
                            if (this.config.clientCredentials.clientSecret) {
                                parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
                            }
                            if (this.config.clientCredentials.clientAssertion) {
                                clientAssertion = this.config.clientCredentials.clientAssertion;
                                parameterBuilder.addClientAssertion(clientAssertion.assertion);
                                parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
                            }
                            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];
                            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);
                            if (!request.resourceRequestMethod || !request.resourceRequestUri) {
                                throw ClientConfigurationError.createResourceRequestParametersRequiredError();
                            }
                            _b = (_a = parameterBuilder).addPopToken;
                            return [4 /*yield*/, popTokenGenerator.generateCnf(request.resourceRequestMethod, request.resourceRequestUri)];
                        case 1:
                            _b.apply(_a, [_c.sent()]);
                            _c.label = 2;
                        case 2:
                            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                                parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
                            }
                            return [2 /*return*/, parameterBuilder.createQueryString()];
                    }
                });
            });
        };
        return RefreshTokenClient;
    }(BaseClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * OAuth2.0 client credential grant
     */
    var ClientCredentialClient = /** @class */ (function (_super) {
        __extends$1$1(ClientCredentialClient, _super);
        function ClientCredentialClient(configuration) {
            return _super.call(this, configuration) || this;
        }
        /**
         * Public API to acquire a token with ClientCredential Flow for Confidential clients
         * @param request
         */
        ClientCredentialClient.prototype.acquireToken = function (request) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var cachedAuthenticationResult;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.scopeSet = new ScopeSet(request.scopes || []);
                            if (!request.skipCache) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2: return [4 /*yield*/, this.getCachedAuthenticationResult()];
                        case 3:
                            cachedAuthenticationResult = _a.sent();
                            if (!cachedAuthenticationResult) return [3 /*break*/, 4];
                            return [2 /*return*/, cachedAuthenticationResult];
                        case 4: return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];
                        case 5: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * looks up cache if the tokens are cached already
         */
        ClientCredentialClient.prototype.getCachedAuthenticationResult = function () {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var cachedAccessToken;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            cachedAccessToken = this.readAccessTokenFromCache();
                            if (!cachedAccessToken ||
                                TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {
                                return [2 /*return*/, null];
                            }
                            return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {
                                    account: null,
                                    idToken: null,
                                    accessToken: cachedAccessToken,
                                    refreshToken: null,
                                    appMetadata: null
                                }, true)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * Reads access token from the cache
         * TODO: Move this call to cacheManager instead
         */
        ClientCredentialClient.prototype.readAccessTokenFromCache = function () {
            var accessTokenFilter = {
                homeAccountId: "",
                environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,
                credentialType: CredentialType.ACCESS_TOKEN,
                clientId: this.config.authOptions.clientId,
                realm: this.authority.tenant,
                target: this.scopeSet.printScopesLowerCase()
            };
            var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);
            var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });
            if (accessTokens.length < 1) {
                return null;
            }
            else if (accessTokens.length > 1) {
                throw ClientAuthError.createMultipleMatchingTokensInCacheError();
            }
            return accessTokens[0];
        };
        /**
         * Makes a network call to request the token from the service
         * @param request
         * @param authority
         */
        ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var requestBody, headers, thumbprint, response, responseHandler, tokenResponse;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            requestBody = this.createTokenRequestBody(request);
                            headers = this.createDefaultTokenRequestHeaders();
                            thumbprint = {
                                clientId: this.config.authOptions.clientId,
                                authority: request.authority,
                                scopes: request.scopes
                            };
                            return [4 /*yield*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];
                        case 1:
                            response = _a.sent();
                            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                            responseHandler.validateTokenResponse(response.body);
                            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, request.resourceRequestMethod, request.resourceRequestUri, undefined, request.scopes)];
                        case 2:
                            tokenResponse = _a.sent();
                            return [2 /*return*/, tokenResponse];
                    }
                });
            });
        };
        /**
         * generate the request to the server in the acceptable format
         * @param request
         */
        ClientCredentialClient.prototype.createTokenRequestBody = function (request) {
            var parameterBuilder = new RequestParameterBuilder();
            parameterBuilder.addClientId(this.config.authOptions.clientId);
            parameterBuilder.addScopes(request.scopes, false);
            parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);
            var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
            parameterBuilder.addCorrelationId(correlationId);
            if (this.config.clientCredentials.clientSecret) {
                parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
            }
            if (this.config.clientCredentials.clientAssertion) {
                var clientAssertion = this.config.clientCredentials.clientAssertion;
                parameterBuilder.addClientAssertion(clientAssertion.assertion);
                parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
            }
            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
            }
            return parameterBuilder.createQueryString();
        };
        return ClientCredentialClient;
    }(BaseClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * On-Behalf-Of client
     */
    var OnBehalfOfClient = /** @class */ (function (_super) {
        __extends$1$1(OnBehalfOfClient, _super);
        function OnBehalfOfClient(configuration) {
            return _super.call(this, configuration) || this;
        }
        /**
         * Public API to acquire tokens with on behalf of flow
         * @param request
         */
        OnBehalfOfClient.prototype.acquireToken = function (request) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var cachedAuthenticationResult;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.scopeSet = new ScopeSet(request.scopes || []);
                            if (!request.skipCache) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2: return [4 /*yield*/, this.getCachedAuthenticationResult(request)];
                        case 3:
                            cachedAuthenticationResult = _a.sent();
                            if (!cachedAuthenticationResult) return [3 /*break*/, 4];
                            return [2 /*return*/, cachedAuthenticationResult];
                        case 4: return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];
                        case 5: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * look up cache for tokens
         * @param request
         */
        OnBehalfOfClient.prototype.getCachedAuthenticationResult = function (request) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var cachedAccessToken, cachedIdToken, idTokenObject, cachedAccount, localAccountId, accountInfo;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            cachedAccessToken = this.readAccessTokenFromCache(request);
                            if (!cachedAccessToken ||
                                TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {
                                return [2 /*return*/, null];
                            }
                            cachedIdToken = this.readIdTokenFromCache(request);
                            cachedAccount = null;
                            if (cachedIdToken) {
                                idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);
                                localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;
                                accountInfo = {
                                    homeAccountId: cachedIdToken.homeAccountId,
                                    environment: cachedIdToken.environment,
                                    tenantId: cachedIdToken.realm,
                                    username: Constants$1.EMPTY_STRING,
                                    localAccountId: localAccountId || ""
                                };
                                cachedAccount = this.readAccountFromCache(accountInfo);
                            }
                            return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {
                                    account: cachedAccount,
                                    accessToken: cachedAccessToken,
                                    idToken: cachedIdToken,
                                    refreshToken: null,
                                    appMetadata: null
                                }, true, idTokenObject)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * read access token from cache TODO: CacheManager API should be used here
         * @param request
         */
        OnBehalfOfClient.prototype.readAccessTokenFromCache = function (request) {
            var accessTokenFilter = {
                environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,
                credentialType: CredentialType.ACCESS_TOKEN,
                clientId: this.config.authOptions.clientId,
                realm: this.authority.tenant,
                target: this.scopeSet.printScopesLowerCase(),
                oboAssertion: request.oboAssertion
            };
            var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);
            var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });
            var numAccessTokens = accessTokens.length;
            if (numAccessTokens < 1) {
                return null;
            }
            else if (numAccessTokens > 1) {
                throw ClientAuthError.createMultipleMatchingTokensInCacheError();
            }
            return accessTokens[0];
        };
        /**
         * read idtoken from cache TODO: CacheManager API should be used here instead
         * @param request
         */
        OnBehalfOfClient.prototype.readIdTokenFromCache = function (request) {
            var idTokenFilter = {
                environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,
                credentialType: CredentialType.ID_TOKEN,
                clientId: this.config.authOptions.clientId,
                realm: this.authority.tenant,
                oboAssertion: request.oboAssertion
            };
            var credentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);
            var idTokens = Object.keys(credentialCache.idTokens).map(function (key) { return credentialCache.idTokens[key]; });
            // When acquiring a token on behalf of an application, there might not be an id token in the cache
            if (idTokens.length < 1) {
                return null;
            }
            return idTokens[0];
        };
        /**
         * read account from cache, TODO: CacheManager API should be used here instead
         * @param account
         */
        OnBehalfOfClient.prototype.readAccountFromCache = function (account) {
            return this.cacheManager.readAccountFromCache(account);
        };
        /**
         * Make a network call to the server requesting credentials
         * @param request
         * @param authority
         */
        OnBehalfOfClient.prototype.executeTokenRequest = function (request, authority) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var requestBody, headers, thumbprint, response, responseHandler, tokenResponse;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            requestBody = this.createTokenRequestBody(request);
                            headers = this.createDefaultTokenRequestHeaders();
                            thumbprint = {
                                clientId: this.config.authOptions.clientId,
                                authority: request.authority,
                                scopes: request.scopes
                            };
                            return [4 /*yield*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];
                        case 1:
                            response = _a.sent();
                            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                            responseHandler.validateTokenResponse(response.body);
                            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, request.resourceRequestMethod, request.resourceRequestUri, undefined, request.scopes, request.oboAssertion)];
                        case 2:
                            tokenResponse = _a.sent();
                            return [2 /*return*/, tokenResponse];
                    }
                });
            });
        };
        /**
         * generate a server request in accepable format
         * @param request
         */
        OnBehalfOfClient.prototype.createTokenRequestBody = function (request) {
            var parameterBuilder = new RequestParameterBuilder();
            parameterBuilder.addClientId(this.config.authOptions.clientId);
            parameterBuilder.addScopes(request.scopes);
            parameterBuilder.addGrantType(GrantType.JWT_BEARER);
            parameterBuilder.addClientInfo();
            var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
            parameterBuilder.addCorrelationId(correlationId);
            parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);
            parameterBuilder.addOboAssertion(request.oboAssertion);
            if (this.config.clientCredentials.clientSecret) {
                parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
            }
            if (this.config.clientCredentials.clientAssertion) {
                var clientAssertion = this.config.clientCredentials.clientAssertion;
                parameterBuilder.addClientAssertion(clientAssertion.assertion);
                parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
            }
            return parameterBuilder.createQueryString();
        };
        return OnBehalfOfClient;
    }(BaseClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var SilentFlowClient = /** @class */ (function (_super) {
        __extends$1$1(SilentFlowClient, _super);
        function SilentFlowClient(configuration) {
            return _super.call(this, configuration) || this;
        }
        /**
         * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew
         * the given token and returns the renewed token
         * @param request
         */
        SilentFlowClient.prototype.acquireToken = function (request) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var e_1, refreshTokenClient;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.acquireCachedToken(request)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2:
                            e_1 = _a.sent();
                            if (e_1 instanceof ClientAuthError && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {
                                refreshTokenClient = new RefreshTokenClient(this.config);
                                return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(request)];
                            }
                            else {
                                throw e_1;
                            }
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Retrieves token from cache or throws an error if it must be refreshed.
         * @param request
         */
        SilentFlowClient.prototype.acquireCachedToken = function (request) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var requestScopes, environment, cacheRecord;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // Cannot renew token if no request object is given.
                            if (!request) {
                                throw ClientConfigurationError.createEmptyTokenRequestError();
                            }
                            // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases
                            if (!request.account) {
                                throw ClientAuthError.createNoAccountInSilentRequestError();
                            }
                            requestScopes = new ScopeSet(request.scopes || []);
                            environment = request.authority || Authority.generateEnvironmentFromAuthority(this.authority);
                            cacheRecord = this.cacheManager.readCacheRecord(request.account, this.config.authOptions.clientId, requestScopes, environment);
                            if (!this.isRefreshRequired(request, cacheRecord.accessToken)) return [3 /*break*/, 1];
                            throw ClientAuthError.createRefreshRequiredError();
                        case 1:
                            if (this.config.serverTelemetryManager) {
                                this.config.serverTelemetryManager.incrementCacheHits();
                            }
                            return [4 /*yield*/, this.generateResultFromCacheRecord(cacheRecord, request.resourceRequestMethod, request.resourceRequestUri)];
                        case 2: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * Helper function to build response object from the CacheRecord
         * @param cacheRecord
         */
        SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, resourceRequestMethod, resourceRequestUri) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var idTokenObj;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (cacheRecord.idToken) {
                                idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);
                            }
                            return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, idTokenObj, undefined, resourceRequestMethod, resourceRequestUri)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * Given a request object and an accessTokenEntity determine if the accessToken needs to be refreshed
         * @param request
         * @param cachedAccessToken
         */
        SilentFlowClient.prototype.isRefreshRequired = function (request, cachedAccessToken) {
            if (request.forceRefresh || request.claims) {
                // Must refresh due to request parameters
                return true;
            }
            else if (!cachedAccessToken || TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {
                // Must refresh due to expired or non-existent access_token
                return true;
            }
            return false;
        };
        return SilentFlowClient;
    }(BaseClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Oauth2.0 Password grant client
     * Note: We are only supporting public clients for password grant and for purely testing purposes
     */
    var UsernamePasswordClient = /** @class */ (function (_super) {
        __extends$1$1(UsernamePasswordClient, _super);
        function UsernamePasswordClient(configuration) {
            return _super.call(this, configuration) || this;
        }
        /**
         * API to acquire a token by passing the username and password to the service in exchage of credentials
         * password_grant
         * @param request
         */
        UsernamePasswordClient.prototype.acquireToken = function (request) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var response, responseHandler, tokenResponse;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.info("in acquireToken call");
                            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];
                        case 1:
                            response = _a.sent();
                            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                            // Validate response. This function throws a server error if an error is returned by the server.
                            responseHandler.validateTokenResponse(response.body);
                            tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority);
                            return [2 /*return*/, tokenResponse];
                    }
                });
            });
        };
        /**
         * Executes POST request to token endpoint
         * @param authority
         * @param request
         */
        UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var thumbprint, requestBody, headers;
                return __generator$1$1(this, function (_a) {
                    thumbprint = {
                        clientId: this.config.authOptions.clientId,
                        authority: authority.canonicalAuthority,
                        scopes: request.scopes
                    };
                    requestBody = this.createTokenRequestBody(request);
                    headers = this.createDefaultTokenRequestHeaders();
                    return [2 /*return*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];
                });
            });
        };
        /**
         * Generates a map for all the params to be sent to the service
         * @param request
         */
        UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {
            var parameterBuilder = new RequestParameterBuilder();
            parameterBuilder.addClientId(this.config.authOptions.clientId);
            parameterBuilder.addUsername(request.username);
            parameterBuilder.addPassword(request.password);
            parameterBuilder.addScopes(request.scopes);
            parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);
            parameterBuilder.addClientInfo();
            var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
            parameterBuilder.addCorrelationId(correlationId);
            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
            }
            return parameterBuilder.createQueryString();
        };
        return UsernamePasswordClient;
    }(BaseClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var AuthorityFactory = /** @class */ (function () {
        function AuthorityFactory() {
        }
        /**
         * Create an authority object of the correct type based on the url
         * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)
         *
         * Also performs endpoint discovery.
         *
         * @param authorityUri
         * @param networkClient
         * @param protocolMode
         */
        AuthorityFactory.createDiscoveredInstance = function (authorityUri, networkClient, protocolMode) {
            return __awaiter$1$1(this, void 0, void 0, function () {
                var acquireTokenAuthority, e_1;
                return __generator$1$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            acquireTokenAuthority = AuthorityFactory.createInstance(authorityUri, networkClient, protocolMode);
                            if (acquireTokenAuthority.discoveryComplete()) {
                                return [2 /*return*/, acquireTokenAuthority];
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, acquireTokenAuthority.resolveEndpointsAsync()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, acquireTokenAuthority];
                        case 3:
                            e_1 = _a.sent();
                            throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_1);
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Create an authority object of the correct type based on the url
         * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)
         *
         * Does not perform endpoint discovery.
         *
         * @param authorityUrl
         * @param networkInterface
         * @param protocolMode
         */
        AuthorityFactory.createInstance = function (authorityUrl, networkInterface, protocolMode) {
            // Throw error if authority url is empty
            if (StringUtils.isEmpty(authorityUrl)) {
                throw ClientConfigurationError.createUrlEmptyError();
            }
            return new Authority(authorityUrl, networkInterface, protocolMode);
        };
        return AuthorityFactory;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ServerTelemetryEntity = /** @class */ (function () {
        function ServerTelemetryEntity() {
            this.failedRequests = [];
            this.errors = [];
            this.cacheHits = 0;
        }
        /**
         * validates if a given cache entry is "Telemetry", parses <key,value>
         * @param key
         * @param entity
         */
        ServerTelemetryEntity.isServerTelemetryEntity = function (key, entity) {
            var validateKey = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;
            var validateEntity = true;
            if (entity) {
                validateEntity =
                    entity.hasOwnProperty("failedRequests") &&
                        entity.hasOwnProperty("errors") &&
                        entity.hasOwnProperty("cacheHits");
            }
            return validateKey && validateEntity;
        };
        return ServerTelemetryEntity;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ThrottlingEntity = /** @class */ (function () {
        function ThrottlingEntity() {
        }
        /**
         * validates if a given cache entry is "Throttling", parses <key,value>
         * @param key
         * @param entity
         */
        ThrottlingEntity.isThrottlingEntity = function (key, entity) {
            var validateKey = false;
            if (key) {
                validateKey = key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;
            }
            var validateEntity = true;
            if (entity) {
                validateEntity = entity.hasOwnProperty("throttleTime");
            }
            return validateKey && validateEntity;
        };
        return ThrottlingEntity;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var StubbedNetworkModule = {
        sendGetRequestAsync: function () {
            var notImplErr = "Network interface - sendGetRequestAsync() has not been implemented for the Network interface.";
            return Promise.reject(AuthError.createUnexpectedError(notImplErr));
        },
        sendPostRequestAsync: function () {
            var notImplErr = "Network interface - sendPostRequestAsync() has not been implemented for the Network interface.";
            return Promise.reject(AuthError.createUnexpectedError(notImplErr));
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ServerTelemetryManager = /** @class */ (function () {
        function ServerTelemetryManager(telemetryRequest, cacheManager) {
            this.cacheManager = cacheManager;
            this.apiId = telemetryRequest.apiId;
            this.correlationId = telemetryRequest.correlationId;
            this.forceRefresh = telemetryRequest.forceRefresh || false;
            this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;
        }
        /**
         * API to add MSER Telemetry to request
         */
        ServerTelemetryManager.prototype.generateCurrentRequestHeaderValue = function () {
            var forceRefreshInt = this.forceRefresh ? 1 : 0;
            var request = "" + this.apiId + SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + forceRefreshInt;
            var platformFields = ""; // TODO: Determine what we want to include
            return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, request, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);
        };
        /**
         * API to add MSER Telemetry for the last failed request
         */
        ServerTelemetryManager.prototype.generateLastRequestHeaderValue = function () {
            var lastRequests = this.getLastRequests();
            var maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);
            var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
            var errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
            var errorCount = lastRequests.errors.length;
            // Indicate whether this header contains all data or partial data
            var overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;
            var platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
            return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);
        };
        /**
         * API to cache token failures for MSER data capture
         * @param error
         */
        ServerTelemetryManager.prototype.cacheFailedRequest = function (error) {
            var lastRequests = this.getLastRequests();
            lastRequests.failedRequests.push(this.apiId, this.correlationId);
            if (!StringUtils.isEmpty(error.subError)) {
                lastRequests.errors.push(error.subError);
            }
            else if (!StringUtils.isEmpty(error.errorCode)) {
                lastRequests.errors.push(error.errorCode);
            }
            else if (!!error && error.toString()) {
                lastRequests.errors.push(error.toString());
            }
            else {
                lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);
            }
            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);
            return;
        };
        /**
         * Update server telemetry cache entry by incrementing cache hit counter
         */
        ServerTelemetryManager.prototype.incrementCacheHits = function () {
            var lastRequests = this.getLastRequests();
            lastRequests.cacheHits += 1;
            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);
            return lastRequests.cacheHits;
        };
        /**
         * Get the server telemetry entity from cache or initialize a new one
         */
        ServerTelemetryManager.prototype.getLastRequests = function () {
            var initialValue = new ServerTelemetryEntity();
            var lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);
            return lastRequests || initialValue;
        };
        /**
         * Remove server telemetry cache entry
         */
        ServerTelemetryManager.prototype.clearTelemetryCache = function () {
            var lastRequests = this.getLastRequests();
            var numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);
            var errorCount = lastRequests.errors.length;
            if (numErrorsFlushed === errorCount) {
                // All errors were sent on last request, clear Telemetry cache
                this.cacheManager.removeItem(this.telemetryCacheKey);
            }
            else {
                // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed
                var serverTelemEntity = new ServerTelemetryEntity();
                serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error
                serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);
                this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);
            }
        };
        /**
         * Returns the maximum number of errors that can be flushed to the server in the next network request
         * @param serverTelemetryEntity
         */
        ServerTelemetryManager.maxErrorsToSend = function (serverTelemetryEntity) {
            var i;
            var maxErrors = 0;
            var dataSize = 0;
            var errorCount = serverTelemetryEntity.errors.length;
            for (i = 0; i < errorCount; i++) {
                // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs
                var apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants$1.EMPTY_STRING;
                var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants$1.EMPTY_STRING;
                var errorCode = serverTelemetryEntity.errors[i] || Constants$1.EMPTY_STRING;
                // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators
                dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;
                if (dataSize < SERVER_TELEM_CONSTANTS.MAX_HEADER_BYTES) {
                    // Adding this entry to the header would still keep header size below the limit
                    maxErrors += 1;
                }
                else {
                    break;
                }
            }
            return maxErrors;
        };
        return ServerTelemetryManager;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Constants
     */
    var BrowserConstants = {
        // Interaction in progress cache value
        INTERACTION_IN_PROGRESS_VALUE: "interaction_in_progress",
        // Invalid grant error code
        INVALID_GRANT_ERROR: "invalid_grant",
        // Default popup window width
        POPUP_WIDTH: 483,
        // Default popup window height
        POPUP_HEIGHT: 600,
        // Default popup monitor poll interval in milliseconds
        POLL_INTERVAL_MS: 50,
        // msal-browser SKU
        MSAL_SKU: "msal.js.browser",
    };
    var BrowserCacheLocation;
    (function (BrowserCacheLocation) {
        BrowserCacheLocation["LocalStorage"] = "localStorage";
        BrowserCacheLocation["SessionStorage"] = "sessionStorage";
        BrowserCacheLocation["MemoryStorage"] = "memoryStorage";
    })(BrowserCacheLocation || (BrowserCacheLocation = {}));
    /**
     * HTTP Request types supported by MSAL.
     */
    var HTTP_REQUEST_TYPE;
    (function (HTTP_REQUEST_TYPE) {
        HTTP_REQUEST_TYPE["GET"] = "GET";
        HTTP_REQUEST_TYPE["POST"] = "POST";
    })(HTTP_REQUEST_TYPE || (HTTP_REQUEST_TYPE = {}));
    /**
     * Temporary cache keys for MSAL, deleted after any request.
     */
    var TemporaryCacheKeys;
    (function (TemporaryCacheKeys) {
        TemporaryCacheKeys["AUTHORITY"] = "authority";
        TemporaryCacheKeys["ACQUIRE_TOKEN_ACCOUNT"] = "acquireToken.account";
        TemporaryCacheKeys["SESSION_STATE"] = "session.state";
        TemporaryCacheKeys["REQUEST_STATE"] = "request.state";
        TemporaryCacheKeys["NONCE_IDTOKEN"] = "nonce.id_token";
        TemporaryCacheKeys["ORIGIN_URI"] = "request.origin";
        TemporaryCacheKeys["RENEW_STATUS"] = "token.renew.status";
        TemporaryCacheKeys["URL_HASH"] = "urlHash";
        TemporaryCacheKeys["REQUEST_PARAMS"] = "request.params";
        TemporaryCacheKeys["SCOPES"] = "scopes";
        TemporaryCacheKeys["INTERACTION_STATUS_KEY"] = "interaction.status";
    })(TemporaryCacheKeys || (TemporaryCacheKeys = {}));
    /**
     * API Codes for Telemetry purposes.
     * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs
     * 0-99 Silent Flow
     * 800-899 Auth Code Flow
     */
    var ApiId;
    (function (ApiId) {
        ApiId[ApiId["acquireTokenRedirect"] = 861] = "acquireTokenRedirect";
        ApiId[ApiId["acquireTokenPopup"] = 862] = "acquireTokenPopup";
        ApiId[ApiId["ssoSilent"] = 863] = "ssoSilent";
        ApiId[ApiId["acquireTokenSilent_authCode"] = 864] = "acquireTokenSilent_authCode";
        ApiId[ApiId["handleRedirectPromise"] = 865] = "handleRedirectPromise";
        ApiId[ApiId["acquireTokenSilent_silentFlow"] = 61] = "acquireTokenSilent_silentFlow";
        ApiId[ApiId["logout"] = 961] = "logout";
    })(ApiId || (ApiId = {}));
    /*
     * Interaction type of the API - used for state and telemetry
     */
    var InteractionType;
    (function (InteractionType) {
        InteractionType["Redirect"] = "redirect";
        InteractionType["Popup"] = "popup";
        InteractionType["Silent"] = "silent";
    })(InteractionType || (InteractionType = {}));
    var DEFAULT_REQUEST = {
        scopes: [Constants$1.OPENID_SCOPE, Constants$1.PROFILE_SCOPE]
    };
    // JWK Key Format string (Type MUST be defined for window crypto APIs)
    var KEY_FORMAT_JWK = "jwk";

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Utility class for math specific functions in browser.
     */
    var MathUtils = /** @class */ (function () {
        function MathUtils() {
        }
        /**
         * Decimal to Hex
         *
         * @param num
         */
        MathUtils.decimalToHex = function (num) {
            var hex = num.toString(16);
            while (hex.length < 2) {
                hex = "0" + hex;
            }
            return hex;
        };
        return MathUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var GuidGenerator = /** @class */ (function () {
        function GuidGenerator(cryptoObj) {
            this.cryptoObj = cryptoObj;
        }
        /*
         * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or
         * pseudo-random numbers.
         * The algorithm is as follows:
         *     Set the two most significant bits (bits 6 and 7) of the
         *        clock_seq_hi_and_reserved to zero and one, respectively.
         *     Set the four most significant bits (bits 12 through 15) of the
         *        time_hi_and_version field to the 4-bit version number from
         *        Section 4.1.3. Version4
         *     Set all the other bits to randomly (or pseudo-randomly) chosen
         *     values.
         * UUID                   = time-low "-" time-mid "-"time-high-and-version "-"clock-seq-reserved and low(2hexOctet)"-" node
         * time-low               = 4hexOctet
         * time-mid               = 2hexOctet
         * time-high-and-version  = 2hexOctet
         * clock-seq-and-reserved = hexOctet:
         * clock-seq-low          = hexOctet
         * node                   = 6hexOctet
         * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx
         * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10
         * y values are 8, 9, A, B
         */
        GuidGenerator.prototype.generateGuid = function () {
            try {
                var buffer = new Uint8Array(16);
                this.cryptoObj.getRandomValues(buffer);
                // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).
                buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.
                buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = "4".
                // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.
                buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.
                buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.
                return MathUtils.decimalToHex(buffer[0]) + MathUtils.decimalToHex(buffer[1])
                    + MathUtils.decimalToHex(buffer[2]) + MathUtils.decimalToHex(buffer[3])
                    + "-" + MathUtils.decimalToHex(buffer[4]) + MathUtils.decimalToHex(buffer[5])
                    + "-" + MathUtils.decimalToHex(buffer[6]) + MathUtils.decimalToHex(buffer[7])
                    + "-" + MathUtils.decimalToHex(buffer[8]) + MathUtils.decimalToHex(buffer[9])
                    + "-" + MathUtils.decimalToHex(buffer[10]) + MathUtils.decimalToHex(buffer[11])
                    + MathUtils.decimalToHex(buffer[12]) + MathUtils.decimalToHex(buffer[13])
                    + MathUtils.decimalToHex(buffer[14]) + MathUtils.decimalToHex(buffer[15]);
            }
            catch (err) {
                var guidHolder = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
                var hex = "0123456789abcdef";
                var r = 0;
                var guidResponse = "";
                for (var i = 0; i < 36; i++) {
                    if (guidHolder[i] !== "-" && guidHolder[i] !== "4") {
                        // each x and y needs to be random
                        r = Math.random() * 16 | 0;
                    }
                    if (guidHolder[i] === "x") {
                        guidResponse += hex[r];
                    }
                    else if (guidHolder[i] === "y") {
                        // clock-seq-and-reserved first hex is filtered and remaining hex values are random
                        r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??
                        r |= 0x8; // set pos 3 to 1 as 1???
                        guidResponse += hex[r];
                    }
                    else {
                        guidResponse += guidHolder[i];
                    }
                }
                return guidResponse;
            }
        };
        /**
         * verifies if a string is  GUID
         * @param guid
         */
        GuidGenerator.isGuid = function (guid) {
            var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
            return regexGuid.test(guid);
        };
        return GuidGenerator;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Utility functions for strings in a browser. See here for implementation details:
     * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
     */
    var BrowserStringUtils = /** @class */ (function () {
        function BrowserStringUtils() {
        }
        /**
         * Converts string to Uint8Array
         * @param sDOMStr
         */
        BrowserStringUtils.stringToUtf8Arr = function (sDOMStr) {
            var nChr;
            var nArrLen = 0;
            var nStrLen = sDOMStr.length;
            /* mapping... */
            for (var nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {
                nChr = sDOMStr.charCodeAt(nMapIdx);
                nArrLen += nChr < 0x80 ? 1 : nChr < 0x800 ? 2 : nChr < 0x10000 ? 3 : nChr < 0x200000 ? 4 : nChr < 0x4000000 ? 5 : 6;
            }
            var aBytes = new Uint8Array(nArrLen);
            /* transcription... */
            for (var nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {
                nChr = sDOMStr.charCodeAt(nChrIdx);
                if (nChr < 128) {
                    /* one byte */
                    aBytes[nIdx++] = nChr;
                }
                else if (nChr < 0x800) {
                    /* two bytes */
                    aBytes[nIdx++] = 192 + (nChr >>> 6);
                    aBytes[nIdx++] = 128 + (nChr & 63);
                }
                else if (nChr < 0x10000) {
                    /* three bytes */
                    aBytes[nIdx++] = 224 + (nChr >>> 12);
                    aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                    aBytes[nIdx++] = 128 + (nChr & 63);
                }
                else if (nChr < 0x200000) {
                    /* four bytes */
                    aBytes[nIdx++] = 240 + (nChr >>> 18);
                    aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
                    aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                    aBytes[nIdx++] = 128 + (nChr & 63);
                }
                else if (nChr < 0x4000000) {
                    /* five bytes */
                    aBytes[nIdx++] = 248 + (nChr >>> 24);
                    aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);
                    aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
                    aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                    aBytes[nIdx++] = 128 + (nChr & 63);
                }
                else /* if (nChr <= 0x7fffffff) */ {
                    /* six bytes */
                    aBytes[nIdx++] = 252 + (nChr >>> 30);
                    aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);
                    aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);
                    aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
                    aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                    aBytes[nIdx++] = 128 + (nChr & 63);
                }
            }
            return aBytes;
        };
        /**
         * Converst string to ArrayBuffer
         * @param dataString
         */
        BrowserStringUtils.stringToArrayBuffer = function (dataString) {
            var data = new ArrayBuffer(dataString.length);
            var dataView = new Uint8Array(data);
            for (var i = 0; i < dataString.length; i++) {
                dataView[i] = dataString.charCodeAt(i);
            }
            return data;
        };
        /**
         * Converts Uint8Array to a string
         * @param aBytes
         */
        BrowserStringUtils.utf8ArrToString = function (aBytes) {
            var sView = "";
            for (var nPart = void 0, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {
                nPart = aBytes[nIdx];
                sView += String.fromCharCode(nPart > 251 && nPart < 254 && nIdx + 5 < nLen ? /* six bytes */
                    /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */
                    (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                    : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ? /* five bytes */
                        (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                        : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ? /* four bytes */
                            (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                            : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ? /* three bytes */
                                (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                                : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ? /* two bytes */
                                    (nPart - 192 << 6) + aBytes[++nIdx] - 128
                                    : /* nPart < 127 ? */ /* one byte */
                                        nPart);
            }
            return sView;
        };
        return BrowserStringUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:
     * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
     */
    var Base64Encode = /** @class */ (function () {
        function Base64Encode() {
        }
        /**
         * Returns URL Safe b64 encoded string from a plaintext string.
         * @param input
         */
        Base64Encode.prototype.urlEncode = function (input) {
            return encodeURIComponent(this.encode(input)
                .replace(/=/g, "")
                .replace(/\+/g, "-")
                .replace(/\//g, "_"));
        };
        /**
         * Returns URL Safe b64 encoded string from an int8Array.
         * @param inputArr
         */
        Base64Encode.prototype.urlEncodeArr = function (inputArr) {
            return this.base64EncArr(inputArr)
                .replace(/=/g, "")
                .replace(/\+/g, "-")
                .replace(/\//g, "_");
        };
        /**
         * Returns b64 encoded string from plaintext string.
         * @param input
         */
        Base64Encode.prototype.encode = function (input) {
            var inputUtf8Arr = BrowserStringUtils.stringToUtf8Arr(input);
            return this.base64EncArr(inputUtf8Arr);
        };
        /**
         * Base64 encode byte array
         * @param aBytes
         */
        Base64Encode.prototype.base64EncArr = function (aBytes) {
            var eqLen = (3 - (aBytes.length % 3)) % 3;
            var sB64Enc = "";
            for (var nMod3 = void 0, nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {
                nMod3 = nIdx % 3;
                /* Uncomment the following line in order to split the output in lines 76-character long: */
                /*
                 *if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) { sB64Enc += "\r\n"; }
                 */
                nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);
                if (nMod3 === 2 || aBytes.length - nIdx === 1) {
                    sB64Enc += String.fromCharCode(this.uint6ToB64(nUint24 >>> 18 & 63), this.uint6ToB64(nUint24 >>> 12 & 63), this.uint6ToB64(nUint24 >>> 6 & 63), this.uint6ToB64(nUint24 & 63));
                    nUint24 = 0;
                }
            }
            return eqLen === 0 ? sB64Enc : sB64Enc.substring(0, sB64Enc.length - eqLen) + (eqLen === 1 ? "=" : "==");
        };
        /**
         * Base64 string to array encoding helper
         * @param nUint6
         */
        Base64Encode.prototype.uint6ToB64 = function (nUint6) {
            return nUint6 < 26 ?
                nUint6 + 65
                : nUint6 < 52 ?
                    nUint6 + 71
                    : nUint6 < 62 ?
                        nUint6 - 4
                        : nUint6 === 62 ?
                            43
                            : nUint6 === 63 ?
                                47
                                :
                                    65;
        };
        return Base64Encode;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:
     * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
     */
    var Base64Decode = /** @class */ (function () {
        function Base64Decode() {
        }
        /**
         * Returns a URL-safe plaintext decoded string from b64 encoded input.
         * @param input
         */
        Base64Decode.prototype.decode = function (input) {
            var encodedString = input.replace(/-/g, "+").replace(/_/g, "/");
            switch (encodedString.length % 4) {
                case 0:
                    break;
                case 2:
                    encodedString += "==";
                    break;
                case 3:
                    encodedString += "=";
                    break;
                default:
                    throw new Error("Invalid base64 string");
            }
            var inputUtf8Arr = this.base64DecToArr(encodedString);
            return BrowserStringUtils.utf8ArrToString(inputUtf8Arr);
        };
        /**
         * Decodes base64 into Uint8Array
         * @param base64String
         * @param nBlockSize
         */
        Base64Decode.prototype.base64DecToArr = function (base64String, nBlockSize) {
            var sB64Enc = base64String.replace(/[^A-Za-z0-9\+\/]/g, "");
            var nInLen = sB64Enc.length;
            var nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2;
            var aBytes = new Uint8Array(nOutLen);
            for (var nMod3 = void 0, nMod4 = void 0, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
                nMod4 = nInIdx & 3;
                nUint24 |= this.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
                if (nMod4 === 3 || nInLen - nInIdx === 1) {
                    for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                        aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
                    }
                    nUint24 = 0;
                }
            }
            return aBytes;
        };
        /**
         * Base64 string to array decoding helper
         * @param charNum
         */
        Base64Decode.prototype.b64ToUint6 = function (charNum) {
            return charNum > 64 && charNum < 91 ?
                charNum - 65
                : charNum > 96 && charNum < 123 ?
                    charNum - 71
                    : charNum > 47 && charNum < 58 ?
                        charNum + 4
                        : charNum === 43 ?
                            62
                            : charNum === 47 ?
                                63
                                :
                                    0;
        };
        return Base64Decode;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
     */
    var BrowserAuthErrorMessage = {
        pkceNotGenerated: {
            code: "pkce_not_created",
            desc: "The PKCE code challenge and verifier could not be generated."
        },
        cryptoDoesNotExist: {
            code: "crypto_nonexistent",
            desc: "The crypto object or function is not available."
        },
        httpMethodNotImplementedError: {
            code: "http_method_not_implemented",
            desc: "The HTTP method given has not been implemented in this library."
        },
        emptyNavigateUriError: {
            code: "empty_navigate_uri",
            desc: "Navigation URI is empty. Please check stack trace for more info."
        },
        hashEmptyError: {
            code: "hash_empty_error",
            desc: "Hash value cannot be processed because it is empty."
        },
        hashDoesNotContainStateError: {
            code: "no_state_in_hash",
            desc: "Hash does not contain state. Please verify that the request originated from msal."
        },
        unableToParseStateError: {
            code: "unable_to_parse_state",
            desc: "Unable to parse state. Please verify that the request originated from msal."
        },
        stateInteractionTypeMismatchError: {
            code: "state_interaction_type_mismatch",
            desc: "Hash contains state but the interaction type does not match the caller."
        },
        interactionInProgress: {
            code: "interaction_in_progress",
            desc: "Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API."
        },
        popUpWindowError: {
            code: "popup_window_error",
            desc: "Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser."
        },
        emptyWindowError: {
            code: "empty_window_error",
            desc: "window.open returned null or undefined window object."
        },
        userCancelledError: {
            code: "user_cancelled",
            desc: "User cancelled the flow."
        },
        monitorPopupTimeoutError: {
            code: "monitor_window_timeout",
            desc: "Token acquisition in popup failed due to timeout."
        },
        monitorIframeTimeoutError: {
            code: "monitor_window_timeout",
            desc: "Token acquisition in iframe failed due to timeout."
        },
        redirectInIframeError: {
            code: "redirect_in_iframe",
            desc: "Code flow is not supported inside an iframe. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs."
        },
        blockTokenRequestsInHiddenIframeError: {
            code: "block_iframe_reload",
            desc: "Request was blocked inside an iframe because MSAL detected an authentication response. Please ensure monitorWindowForHash was called."
        },
        iframeClosedPrematurelyError: {
            code: "iframe_closed_prematurely",
            desc: "The iframe being monitored was closed prematurely."
        },
        silentSSOInsufficientInfoError: {
            code: "silent_sso_error",
            desc: "Silent SSO could not be completed - insufficient information was provided. Please provide either a loginHint or sid."
        },
        noAccountError: {
            code: "no_account_error",
            desc: "No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request."
        },
        silentPromptValueError: {
            code: "silent_prompt_value_error",
            desc: "The value given for the prompt value is not valid for silent requests - must be set to 'none'."
        },
        noTokenRequestCacheError: {
            code: "no_token_request_cache_error",
            desc: "No token request in found in cache."
        },
        unableToParseTokenRequestCacheError: {
            code: "unable_to_parse_token_request_cache_error",
            desc: "The cached token request could not be parsed."
        },
        noCachedAuthorityError: {
            code: "no_cached_authority_error",
            desc: "No cached authority found."
        },
        authRequestNotSet: {
            code: "auth_request_not_set_error",
            desc: "Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler"
        },
        invalidCacheType: {
            code: "invalid_cache_type",
            desc: "Invalid cache type"
        },
        notInBrowserEnvironment: {
            code: "non_browser_environment",
            desc: "Login and token requests are not supported in non-browser environments."
        },
        databaseNotOpen: {
            code: "database_not_open",
            desc: "Database is not open!"
        }
    };
    /**
     * Browser library error class thrown by the MSAL.js library for SPAs
     */
    var BrowserAuthError = /** @class */ (function (_super) {
        __extends$1(BrowserAuthError, _super);
        function BrowserAuthError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            Object.setPrototypeOf(_this, BrowserAuthError.prototype);
            _this.name = "BrowserAuthError";
            return _this;
        }
        /**
         * Creates an error thrown when PKCE is not implemented.
         * @param errDetail
         */
        BrowserAuthError.createPkceNotGeneratedError = function (errDetail) {
            return new BrowserAuthError(BrowserAuthErrorMessage.pkceNotGenerated.code, BrowserAuthErrorMessage.pkceNotGenerated.desc + " Detail:" + errDetail);
        };
        /**
         * Creates an error thrown when the crypto object is unavailable.
         * @param errDetail
         */
        BrowserAuthError.createCryptoNotAvailableError = function (errDetail) {
            return new BrowserAuthError(BrowserAuthErrorMessage.cryptoDoesNotExist.code, BrowserAuthErrorMessage.cryptoDoesNotExist.desc + " Detail:" + errDetail);
        };
        /**
         * Creates an error thrown when an HTTP method hasn't been implemented by the browser class.
         * @param method
         */
        BrowserAuthError.createHttpMethodNotImplementedError = function (method) {
            return new BrowserAuthError(BrowserAuthErrorMessage.httpMethodNotImplementedError.code, BrowserAuthErrorMessage.httpMethodNotImplementedError.desc + " Given Method: " + method);
        };
        /**
         * Creates an error thrown when the navigation URI is empty.
         */
        BrowserAuthError.createEmptyNavigationUriError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.emptyNavigateUriError.code, BrowserAuthErrorMessage.emptyNavigateUriError.desc);
        };
        /**
         * Creates an error thrown when the hash string value is unexpectedly empty.
         * @param hashValue
         */
        BrowserAuthError.createEmptyHashError = function (hashValue) {
            return new BrowserAuthError(BrowserAuthErrorMessage.hashEmptyError.code, BrowserAuthErrorMessage.hashEmptyError.desc + " Given Url: " + hashValue);
        };
        /**
         * Creates an error thrown when the hash string value is unexpectedly empty.
         */
        BrowserAuthError.createHashDoesNotContainStateError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainStateError.code, BrowserAuthErrorMessage.hashDoesNotContainStateError.desc);
        };
        /**
         * Creates an error thrown when the hash string value is unexpectedly empty.
         */
        BrowserAuthError.createUnableToParseStateError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseStateError.code, BrowserAuthErrorMessage.unableToParseStateError.desc);
        };
        /**
         * Creates an error thrown when the state value in the hash does not match the interaction type of the API attempting to consume it.
         */
        BrowserAuthError.createStateInteractionTypeMismatchError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.stateInteractionTypeMismatchError.code, BrowserAuthErrorMessage.stateInteractionTypeMismatchError.desc);
        };
        /**
         * Creates an error thrown when a browser interaction (redirect or popup) is in progress.
         */
        BrowserAuthError.createInteractionInProgressError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.interactionInProgress.code, BrowserAuthErrorMessage.interactionInProgress.desc);
        };
        /**
         * Creates an error thrown when the popup window could not be opened.
         * @param errDetail
         */
        BrowserAuthError.createPopupWindowError = function (errDetail) {
            var errorMessage = BrowserAuthErrorMessage.popUpWindowError.desc;
            errorMessage = !StringUtils.isEmpty(errDetail) ? errorMessage + " Details: " + errDetail : errorMessage;
            return new BrowserAuthError(BrowserAuthErrorMessage.popUpWindowError.code, errorMessage);
        };
        /**
         * Creates an error thrown when window.open returns an empty window object.
         * @param errDetail
         */
        BrowserAuthError.createEmptyWindowCreatedError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.emptyWindowError.code, BrowserAuthErrorMessage.emptyWindowError.desc);
        };
        /**
         * Creates an error thrown when the user closes a popup.
         */
        BrowserAuthError.createUserCancelledError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.userCancelledError.code, BrowserAuthErrorMessage.userCancelledError.desc);
        };
        /**
         * Creates an error thrown when monitorPopupFromHash times out for a given popup.
         */
        BrowserAuthError.createMonitorPopupTimeoutError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.monitorPopupTimeoutError.code, BrowserAuthErrorMessage.monitorPopupTimeoutError.desc);
        };
        /**
         * Creates an error thrown when monitorIframeFromHash times out for a given iframe.
         */
        BrowserAuthError.createMonitorIframeTimeoutError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.monitorIframeTimeoutError.code, BrowserAuthErrorMessage.monitorIframeTimeoutError.desc);
        };
        /**
         * Creates an error thrown when navigateWindow is called inside an iframe.
         * @param windowParentCheck
         */
        BrowserAuthError.createRedirectInIframeError = function (windowParentCheck) {
            return new BrowserAuthError(BrowserAuthErrorMessage.redirectInIframeError.code, BrowserAuthErrorMessage.redirectInIframeError.desc + " (window.parent !== window) => " + windowParentCheck);
        };
        /**
         * Creates an error thrown when an auth reload is done inside an iframe.
         */
        BrowserAuthError.createBlockReloadInHiddenIframeError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.code, BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.desc);
        };
        /**
         * Creates an error thrown when an iframe is found to be closed before the timeout is reached.
         */
        BrowserAuthError.createIframeClosedPrematurelyError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.iframeClosedPrematurelyError.code, BrowserAuthErrorMessage.iframeClosedPrematurelyError.desc);
        };
        /**
         * Creates an error thrown when the login_hint, sid or account object is not provided in the ssoSilent API.
         */
        BrowserAuthError.createSilentSSOInsufficientInfoError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.silentSSOInsufficientInfoError.code, BrowserAuthErrorMessage.silentSSOInsufficientInfoError.desc);
        };
        /**
         * Creates an error thrown when the account object is not provided in the acquireTokenSilent API.
         */
        BrowserAuthError.createNoAccountError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.noAccountError.code, BrowserAuthErrorMessage.noAccountError.desc);
        };
        /**
         * Creates an error thrown when a given prompt value is invalid for silent requests.
         */
        BrowserAuthError.createSilentPromptValueError = function (givenPrompt) {
            return new BrowserAuthError(BrowserAuthErrorMessage.silentPromptValueError.code, BrowserAuthErrorMessage.silentPromptValueError.desc + " Given value: " + givenPrompt);
        };
        /**
         * Creates an error thrown when the cached token request could not be retrieved from the cache
         */
        BrowserAuthError.createUnableToParseTokenRequestCacheError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.code, BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.desc);
        };
        /**
         * Creates an error thrown when the token request could not be retrieved from the cache
         */
        BrowserAuthError.createNoTokenRequestCacheError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.noTokenRequestCacheError.code, BrowserAuthErrorMessage.noTokenRequestCacheError.desc);
        };
        /**
         * Creates an error thrown when handleCodeResponse is called before initiateAuthRequest (InteractionHandler)
         */
        BrowserAuthError.createAuthRequestNotSetError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.authRequestNotSet.code, BrowserAuthErrorMessage.authRequestNotSet.desc);
        };
        /**
         * Creates an error thrown when the authority could not be retrieved from the cache
         */
        BrowserAuthError.createNoCachedAuthorityError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.noCachedAuthorityError.code, BrowserAuthErrorMessage.noCachedAuthorityError.desc);
        };
        /**
         * Creates an error thrown if cache type is invalid.
         */
        BrowserAuthError.createInvalidCacheTypeError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.invalidCacheType.code, "" + BrowserAuthErrorMessage.invalidCacheType.desc);
        };
        /**
         * Create an error thrown when login and token requests are made from a non-browser environment
         */
        BrowserAuthError.createNonBrowserEnvironmentError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.notInBrowserEnvironment.code, BrowserAuthErrorMessage.notInBrowserEnvironment.desc);
        };
        /**
         * Create an error thrown when indexDB database is not open
         */
        BrowserAuthError.createDatabaseNotOpenError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.databaseNotOpen.code, BrowserAuthErrorMessage.databaseNotOpen.desc);
        };
        return BrowserAuthError;
    }(AuthError));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    // Constant byte array length
    var RANDOM_BYTE_ARR_LENGTH = 32;
    /**
     * Class which exposes APIs to generate PKCE codes and code verifiers.
     */
    var PkceGenerator = /** @class */ (function () {
        function PkceGenerator(cryptoObj) {
            this.base64Encode = new Base64Encode();
            this.cryptoObj = cryptoObj;
        }
        /**
         * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636
         */
        PkceGenerator.prototype.generateCodes = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var codeVerifier, codeChallenge;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            codeVerifier = this.generateCodeVerifier();
                            return [4 /*yield*/, this.generateCodeChallengeFromVerifier(codeVerifier)];
                        case 1:
                            codeChallenge = _a.sent();
                            return [2 /*return*/, {
                                    verifier: codeVerifier,
                                    challenge: codeChallenge
                                }];
                    }
                });
            });
        };
        /**
         * Generates a random 32 byte buffer and returns the base64
         * encoded string to be used as a PKCE Code Verifier
         */
        PkceGenerator.prototype.generateCodeVerifier = function () {
            try {
                // Generate random values as utf-8
                var buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);
                this.cryptoObj.getRandomValues(buffer);
                // encode verifier as base64
                var pkceCodeVerifierB64 = this.base64Encode.urlEncodeArr(buffer);
                return pkceCodeVerifierB64;
            }
            catch (e) {
                throw BrowserAuthError.createPkceNotGeneratedError(e);
            }
        };
        /**
         * Creates a base64 encoded PKCE Code Challenge string from the
         * hash created from the PKCE Code Verifier supplied
         */
        PkceGenerator.prototype.generateCodeChallengeFromVerifier = function (pkceCodeVerifier) {
            return __awaiter$1(this, void 0, void 0, function () {
                var pkceHashedCodeVerifier, e_1;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.cryptoObj.sha256Digest(pkceCodeVerifier)];
                        case 1:
                            pkceHashedCodeVerifier = _a.sent();
                            // encode hash as base64
                            return [2 /*return*/, this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier))];
                        case 2:
                            e_1 = _a.sent();
                            throw BrowserAuthError.createPkceNotGeneratedError(e_1);
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return PkceGenerator;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams
     */
    // RSA KeyGen Algorithm
    var PKCS1_V15_KEYGEN_ALG = "RSASSA-PKCS1-v1_5";
    // SHA-256 hashing algorithm
    var S256_HASH_ALG = "SHA-256";
    // MOD length for PoP tokens
    var MODULUS_LENGTH = 2048;
    // Public Exponent
    var PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);
    /**
     * This class implements functions used by the browser library to perform cryptography operations such as
     * hashing and encoding. It also has helper functions to validate the availability of specific APIs.
     */
    var BrowserCrypto = /** @class */ (function () {
        function BrowserCrypto() {
            if (!(this.hasCryptoAPI())) {
                throw BrowserAuthError.createCryptoNotAvailableError("Browser crypto or msCrypto object not available.");
            }
            this._keygenAlgorithmOptions = {
                name: PKCS1_V15_KEYGEN_ALG,
                hash: S256_HASH_ALG,
                modulusLength: MODULUS_LENGTH,
                publicExponent: PUBLIC_EXPONENT
            };
        }
        /**
         * Returns a sha-256 hash of the given dataString as an ArrayBuffer.
         * @param dataString
         */
        BrowserCrypto.prototype.sha256Digest = function (dataString) {
            return __awaiter$1(this, void 0, void 0, function () {
                var data;
                return __generator$1(this, function (_a) {
                    data = BrowserStringUtils.stringToUtf8Arr(dataString);
                    return [2 /*return*/, this.hasIECrypto() ? this.getMSCryptoDigest(S256_HASH_ALG, data) : this.getSubtleCryptoDigest(S256_HASH_ALG, data)];
                });
            });
        };
        /**
         * Populates buffer with cryptographically random values.
         * @param dataBuffer
         */
        BrowserCrypto.prototype.getRandomValues = function (dataBuffer) {
            var cryptoObj = window["msCrypto"] || window.crypto;
            if (!cryptoObj.getRandomValues) {
                throw BrowserAuthError.createCryptoNotAvailableError("getRandomValues does not exist.");
            }
            cryptoObj.getRandomValues(dataBuffer);
        };
        /**
         * Generates a keypair based on current keygen algorithm config.
         * @param extractable
         * @param usages
         */
        BrowserCrypto.prototype.generateKeyPair = function (extractable, usages) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, (this.hasIECrypto() ?
                            this.msCryptoGenerateKey(extractable, usages)
                            : window.crypto.subtle.generateKey(this._keygenAlgorithmOptions, extractable, usages))];
                });
            });
        };
        /**
         * Export key as Json Web Key (JWK)
         * @param key
         * @param format
         */
        BrowserCrypto.prototype.exportJwk = function (key) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, this.hasIECrypto() ? this.msCryptoExportJwk(key) : window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key)];
                });
            });
        };
        /**
         * Imports key as Json Web Key (JWK), can set extractable and usages.
         * @param key
         * @param format
         * @param extractable
         * @param usages
         */
        BrowserCrypto.prototype.importJwk = function (key, extractable, usages) {
            return __awaiter$1(this, void 0, void 0, function () {
                var keyString, keyBuffer;
                return __generator$1(this, function (_a) {
                    keyString = BrowserCrypto.getJwkString(key);
                    keyBuffer = BrowserStringUtils.stringToArrayBuffer(keyString);
                    return [2 /*return*/, this.hasIECrypto() ?
                            this.msCryptoImportKey(keyBuffer, extractable, usages)
                            : window.crypto.subtle.importKey(KEY_FORMAT_JWK, key, this._keygenAlgorithmOptions, extractable, usages)];
                });
            });
        };
        /**
         * Signs given data with given key
         * @param key
         * @param data
         */
        BrowserCrypto.prototype.sign = function (key, data) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, this.hasIECrypto() ?
                            this.msCryptoSign(key, data)
                            : window.crypto.subtle.sign(this._keygenAlgorithmOptions, key, data)];
                });
            });
        };
        /**
         * Check whether IE crypto or other browser cryptography is available.
         */
        BrowserCrypto.prototype.hasCryptoAPI = function () {
            return this.hasIECrypto() || this.hasBrowserCrypto();
        };
        /**
         * Checks whether IE crypto (AKA msCrypto) is available.
         */
        BrowserCrypto.prototype.hasIECrypto = function () {
            return "msCrypto" in window;
        };
        /**
         * Check whether browser crypto is available.
         */
        BrowserCrypto.prototype.hasBrowserCrypto = function () {
            return "crypto" in window;
        };
        /**
         * Helper function for SHA digest.
         * @param algorithm
         * @param data
         */
        BrowserCrypto.prototype.getSubtleCryptoDigest = function (algorithm, data) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, window.crypto.subtle.digest(algorithm, data)];
                });
            });
        };
        /**
         * IE Helper function for SHA digest.
         * @param algorithm
         * @param data
         */
        BrowserCrypto.prototype.getMSCryptoDigest = function (algorithm, data) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var digestOperation = window["msCrypto"].subtle.digest(algorithm, data.buffer);
                            digestOperation.addEventListener("complete", function (e) {
                                resolve(e.target.result);
                            });
                            digestOperation.addEventListener("error", function (error) {
                                reject(error);
                            });
                        })];
                });
            });
        };
        /**
         * IE Helper function for generating a keypair
         * @param extractable
         * @param usages
         */
        BrowserCrypto.prototype.msCryptoGenerateKey = function (extractable, usages) {
            return __awaiter$1(this, void 0, void 0, function () {
                var _this = this;
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var msGenerateKey = window["msCrypto"].subtle.generateKey(_this._keygenAlgorithmOptions, extractable, usages);
                            msGenerateKey.addEventListener("complete", function (e) {
                                resolve(e.target.result);
                            });
                            msGenerateKey.addEventListener("error", function (error) {
                                reject(error);
                            });
                        })];
                });
            });
        };
        /**
         * IE Helper function for exportKey
         * @param key
         * @param format
         */
        BrowserCrypto.prototype.msCryptoExportJwk = function (key) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var msExportKey = window["msCrypto"].subtle.exportKey(KEY_FORMAT_JWK, key);
                            msExportKey.addEventListener("complete", function (e) {
                                var resultBuffer = e.target.result;
                                var resultString = BrowserStringUtils.utf8ArrToString(new Uint8Array(resultBuffer))
                                    .replace(/\r/g, "")
                                    .replace(/\n/g, "")
                                    .replace(/\t/g, "")
                                    .split(" ").join("")
                                    .replace("\u0000", "");
                                try {
                                    resolve(JSON.parse(resultString));
                                }
                                catch (e) {
                                    reject(e);
                                }
                            });
                            msExportKey.addEventListener("error", function (error) {
                                reject(error);
                            });
                        })];
                });
            });
        };
        /**
         * IE Helper function for importKey
         * @param key
         * @param format
         * @param extractable
         * @param usages
         */
        BrowserCrypto.prototype.msCryptoImportKey = function (keyBuffer, extractable, usages) {
            return __awaiter$1(this, void 0, void 0, function () {
                var _this = this;
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var msImportKey = window["msCrypto"].subtle.importKey(KEY_FORMAT_JWK, keyBuffer, _this._keygenAlgorithmOptions, extractable, usages);
                            msImportKey.addEventListener("complete", function (e) {
                                resolve(e.target.result);
                            });
                            msImportKey.addEventListener("error", function (error) {
                                reject(error);
                            });
                        })];
                });
            });
        };
        /**
         * IE Helper function for sign JWT
         * @param key
         * @param data
         */
        BrowserCrypto.prototype.msCryptoSign = function (key, data) {
            return __awaiter$1(this, void 0, void 0, function () {
                var _this = this;
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var msSign = window["msCrypto"].subtle.sign(_this._keygenAlgorithmOptions, key, data);
                            msSign.addEventListener("complete", function (e) {
                                resolve(e.target.result);
                            });
                            msSign.addEventListener("error", function (error) {
                                reject(error);
                            });
                        })];
                });
            });
        };
        /**
         * Returns stringified jwk.
         * @param jwk
         */
        BrowserCrypto.getJwkString = function (jwk) {
            return JSON.stringify(jwk, Object.keys(jwk).sort());
        };
        return BrowserCrypto;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API
     */
    var DatabaseStorage = /** @class */ (function () {
        function DatabaseStorage(dbName, tableName, version) {
            this.dbName = dbName;
            this.tableName = tableName;
            this.version = version;
            this.dbOpen = false;
        }
        /**
         * Opens IndexedDB instance.
         */
        DatabaseStorage.prototype.open = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var _this = this;
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            // TODO: Add timeouts?
                            var openDB = window.indexedDB.open(_this.dbName, _this.version);
                            openDB.addEventListener("upgradeneeded", function (e) {
                                var event = e;
                                event.target.result.createObjectStore(_this.tableName);
                            });
                            openDB.addEventListener("success", function (e) {
                                var event = e;
                                _this.db = event.target.result;
                                _this.dbOpen = true;
                                resolve();
                            });
                            openDB.addEventListener("error", function (error) { return reject(error); });
                        })];
                });
            });
        };
        /**
         * Retrieves item from IndexedDB instance.
         * @param key
         */
        DatabaseStorage.prototype.get = function (key) {
            return __awaiter$1(this, void 0, void 0, function () {
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.dbOpen) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.open()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/, new Promise(function (resolve, reject) {
                                // TODO: Add timeouts?
                                if (!_this.db) {
                                    return reject(BrowserAuthError.createDatabaseNotOpenError());
                                }
                                var transaction = _this.db.transaction([_this.tableName], "readonly");
                                var objectStore = transaction.objectStore(_this.tableName);
                                var dbGet = objectStore.get(key);
                                dbGet.addEventListener("success", function (e) {
                                    var event = e;
                                    resolve(event.target.result);
                                });
                                dbGet.addEventListener("error", function (e) { return reject(e); });
                            })];
                    }
                });
            });
        };
        /**
         * Adds item to IndexedDB under given key
         * @param key
         * @param payload
         */
        DatabaseStorage.prototype.put = function (key, payload) {
            return __awaiter$1(this, void 0, void 0, function () {
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.dbOpen) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.open()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/, new Promise(function (resolve, reject) {
                                // TODO: Add timeouts?
                                if (!_this.db) {
                                    return reject(BrowserAuthError.createDatabaseNotOpenError());
                                }
                                var transaction = _this.db.transaction([_this.tableName], "readwrite");
                                var objectStore = transaction.objectStore(_this.tableName);
                                var dbPut = objectStore.put(payload, key);
                                dbPut.addEventListener("success", function (e) {
                                    var event = e;
                                    resolve(event.target.result);
                                });
                                dbPut.addEventListener("error", function (e) { return reject(e); });
                            })];
                    }
                });
            });
        };
        return DatabaseStorage;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and
     * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).
     */
    var CryptoOps = /** @class */ (function () {
        function CryptoOps() {
            // Browser crypto needs to be validated first before any other classes can be set.
            this.browserCrypto = new BrowserCrypto();
            this.b64Encode = new Base64Encode();
            this.b64Decode = new Base64Decode();
            this.guidGenerator = new GuidGenerator(this.browserCrypto);
            this.pkceGenerator = new PkceGenerator(this.browserCrypto);
            this.cache = new DatabaseStorage(CryptoOps.DB_NAME, CryptoOps.TABLE_NAME, CryptoOps.DB_VERSION);
        }
        /**
         * Creates a new random GUID - used to populate state and nonce.
         * @returns string (GUID)
         */
        CryptoOps.prototype.createNewGuid = function () {
            return this.guidGenerator.generateGuid();
        };
        /**
         * Encodes input string to base64.
         * @param input
         */
        CryptoOps.prototype.base64Encode = function (input) {
            return this.b64Encode.encode(input);
        };
        /**
         * Decodes input string from base64.
         * @param input
         */
        CryptoOps.prototype.base64Decode = function (input) {
            return this.b64Decode.decode(input);
        };
        /**
         * Generates PKCE codes used in Authorization Code Flow.
         */
        CryptoOps.prototype.generatePkceCodes = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, this.pkceGenerator.generateCodes()];
                });
            });
        };
        /**
         * Generates a keypair, stores it and returns a thumbprint
         * @param resourceRequestMethod
         * @param resourceRequestUri
         */
        CryptoOps.prototype.getPublicKeyThumbprint = function (resourceRequestMethod, resourceRequestUri) {
            return __awaiter$1(this, void 0, void 0, function () {
                var keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkBuffer, publicJwkHash, privateKeyJwk, unextractablePrivateKey;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];
                        case 1:
                            keyPair = _a.sent();
                            return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.publicKey)];
                        case 2:
                            publicKeyJwk = _a.sent();
                            pubKeyThumprintObj = {
                                e: publicKeyJwk.e,
                                kty: publicKeyJwk.kty,
                                n: publicKeyJwk.n
                            };
                            publicJwkString = BrowserCrypto.getJwkString(pubKeyThumprintObj);
                            return [4 /*yield*/, this.browserCrypto.sha256Digest(publicJwkString)];
                        case 3:
                            publicJwkBuffer = _a.sent();
                            publicJwkHash = this.b64Encode.urlEncodeArr(new Uint8Array(publicJwkBuffer));
                            return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.privateKey)];
                        case 4:
                            privateKeyJwk = _a.sent();
                            return [4 /*yield*/, this.browserCrypto.importJwk(privateKeyJwk, false, ["sign"])];
                        case 5:
                            unextractablePrivateKey = _a.sent();
                            // Store Keypair data in keystore
                            this.cache.put(publicJwkHash, {
                                privateKey: unextractablePrivateKey,
                                publicKey: keyPair.publicKey,
                                requestMethod: resourceRequestMethod,
                                requestUri: resourceRequestUri
                            });
                            return [2 /*return*/, publicJwkHash];
                    }
                });
            });
        };
        /**
         * Signs the given object as a jwt payload with private key retrieved by given kid.
         * @param payload
         * @param kid
         */
        CryptoOps.prototype.signJwt = function (payload, kid) {
            return __awaiter$1(this, void 0, void 0, function () {
                var cachedKeyPair, publicKeyJwk, publicKeyJwkString, header, encodedHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.cache.get(kid)];
                        case 1:
                            cachedKeyPair = _a.sent();
                            return [4 /*yield*/, this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];
                        case 2:
                            publicKeyJwk = _a.sent();
                            publicKeyJwkString = BrowserCrypto.getJwkString(publicKeyJwk);
                            header = {
                                alg: publicKeyJwk.alg,
                                type: KEY_FORMAT_JWK
                            };
                            encodedHeader = this.b64Encode.urlEncode(JSON.stringify(header));
                            // Generate payload
                            payload.cnf = {
                                jwk: JSON.parse(publicKeyJwkString)
                            };
                            encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));
                            tokenString = encodedHeader + "." + encodedPayload;
                            tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);
                            return [4 /*yield*/, this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];
                        case 3:
                            signatureBuffer = _a.sent();
                            encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));
                            return [2 /*return*/, tokenString + "." + encodedSignature];
                    }
                });
            });
        };
        CryptoOps.POP_KEY_USAGES = ["sign", "verify"];
        CryptoOps.EXTRACTABLE = true;
        CryptoOps.DB_VERSION = 1;
        CryptoOps.DB_NAME = "msal.db";
        CryptoOps.TABLE_NAME = CryptoOps.DB_NAME + ".keys";
        return CryptoOps;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
     */
    var BrowserConfigurationAuthErrorMessage = {
        redirectUriNotSet: {
            code: "redirect_uri_empty",
            desc: "A redirect URI is required for all calls, and none has been set."
        },
        postLogoutUriNotSet: {
            code: "post_logout_uri_empty",
            desc: "A post logout redirect has not been set."
        },
        storageNotSupportedError: {
            code: "storage_not_supported",
            desc: "Given storage configuration option was not supported."
        },
        noRedirectCallbacksSet: {
            code: "no_redirect_callbacks",
            desc: "No redirect callbacks have been set. Please call setRedirectCallbacks() with the appropriate function arguments before continuing. " +
                "More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
        },
        invalidCallbackObject: {
            code: "invalid_callback_object",
            desc: "The object passed for the callback was invalid. " +
                "More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
        },
        stubPcaInstanceCalled: {
            code: "stubbed_public_client_application_called",
            desc: "Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider."
        },
        inMemRedirectUnavailable: {
            code: "in_mem_redirect_unavailable",
            desc: "Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true."
        }
    };
    /**
     * Browser library error class thrown by the MSAL.js library for SPAs
     */
    var BrowserConfigurationAuthError = /** @class */ (function (_super) {
        __extends$1(BrowserConfigurationAuthError, _super);
        function BrowserConfigurationAuthError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            _this.name = "BrowserConfigurationAuthError";
            Object.setPrototypeOf(_this, BrowserConfigurationAuthError.prototype);
            return _this;
        }
        /**
         * Creates an error thrown when the redirect uri is empty (not set by caller)
         */
        BrowserConfigurationAuthError.createRedirectUriEmptyError = function () {
            return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.redirectUriNotSet.code, BrowserConfigurationAuthErrorMessage.redirectUriNotSet.desc);
        };
        /**
         * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)
         */
        BrowserConfigurationAuthError.createPostLogoutRedirectUriEmptyError = function () {
            return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.code, BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.desc);
        };
        /**
         * Creates error thrown when given storage location is not supported.
         * @param givenStorageLocation
         */
        BrowserConfigurationAuthError.createStorageNotSupportedError = function (givenStorageLocation) {
            return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.storageNotSupportedError.code, BrowserConfigurationAuthErrorMessage.storageNotSupportedError.desc + " Given Location: " + givenStorageLocation);
        };
        /**
         * Creates error thrown when callback object is invalid.
         * @param callbackObject
         */
        BrowserConfigurationAuthError.createInvalidCallbackObjectError = function (callbackObject) {
            return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.invalidCallbackObject.code, BrowserConfigurationAuthErrorMessage.invalidCallbackObject.desc + " Given value for callback function: " + callbackObject);
        };
        /**
         * Creates error thrown when redirect callbacks are not set before calling loginRedirect() or acquireTokenRedirect().
         */
        BrowserConfigurationAuthError.createRedirectCallbacksNotSetError = function () {
            return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.code, BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.desc);
        };
        /**
         * Creates error thrown when the stub instance of PublicClientApplication is called.
         */
        BrowserConfigurationAuthError.createStubPcaInstanceCalledError = function () {
            return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.code, BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.desc);
        };
        /*
         * Create an error thrown when in-memory storage is used and storeAuthStateInCookie=false.
         */
        BrowserConfigurationAuthError.createInMemoryRedirectUnavailableError = function () {
            return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.code, BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.desc);
        };
        return BrowserConfigurationAuthError;
    }(AuthError));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrowserStorage = /** @class */ (function () {
        function BrowserStorage(cacheLocation) {
            this.validateWindowStorage(cacheLocation);
            this.windowStorage = window[cacheLocation];
        }
        BrowserStorage.prototype.validateWindowStorage = function (cacheLocation) {
            if (cacheLocation !== BrowserCacheLocation.LocalStorage && cacheLocation !== BrowserCacheLocation.SessionStorage) {
                throw BrowserConfigurationAuthError.createStorageNotSupportedError(cacheLocation);
            }
            var storageSupported = !!window[cacheLocation];
            if (!storageSupported) {
                throw BrowserConfigurationAuthError.createStorageNotSupportedError(cacheLocation);
            }
        };
        BrowserStorage.prototype.getItem = function (key) {
            return this.windowStorage.getItem(key);
        };
        BrowserStorage.prototype.setItem = function (key, value) {
            this.windowStorage.setItem(key, value);
        };
        BrowserStorage.prototype.removeItem = function (key) {
            this.windowStorage.removeItem(key);
        };
        BrowserStorage.prototype.getKeys = function () {
            return Object.keys(this.windowStorage);
        };
        BrowserStorage.prototype.containsKey = function (key) {
            return this.windowStorage.hasOwnProperty(key);
        };
        return BrowserStorage;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var MemoryStorage = /** @class */ (function () {
        function MemoryStorage() {
            this.cache = new Map();
        }
        MemoryStorage.prototype.getItem = function (key) {
            return this.cache.get(key) || null;
        };
        MemoryStorage.prototype.setItem = function (key, value) {
            this.cache.set(key, value);
        };
        MemoryStorage.prototype.removeItem = function (key) {
            this.cache.delete(key);
        };
        MemoryStorage.prototype.getKeys = function () {
            var cacheKeys = [];
            this.cache.forEach(function (value, key) {
                cacheKeys.push(key);
            });
            return cacheKeys;
        };
        MemoryStorage.prototype.containsKey = function (key) {
            return this.cache.has(key);
        };
        return MemoryStorage;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrowserProtocolUtils = /** @class */ (function () {
        function BrowserProtocolUtils() {
        }
        /**
         * Extracts the BrowserStateObject from the state string.
         * @param browserCrypto
         * @param state
         */
        BrowserProtocolUtils.extractBrowserRequestState = function (browserCrypto, state) {
            if (StringUtils.isEmpty(state)) {
                return null;
            }
            try {
                var requestStateObj = ProtocolUtils.parseRequestState(browserCrypto, state);
                return requestStateObj.libraryState.meta;
            }
            catch (e) {
                throw ClientAuthError.createInvalidStateError(state, e);
            }
        };
        /**
         * Parses properties of server response from url hash
         * @param locationHash Hash from url
         */
        BrowserProtocolUtils.parseServerResponseFromHash = function (locationHash) {
            if (!locationHash) {
                return {};
            }
            var hashUrlString = new UrlString(locationHash);
            return UrlString.getDeserializedHash(hashUrlString.getHash());
        };
        return BrowserProtocolUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * This class implements the cache storage interface for MSAL through browser local or session storage.
     * Cookies are only used if storeAuthStateInCookie is true, and are only used for
     * parameters such as state and nonce, generally.
     */
    var BrowserCacheManager = /** @class */ (function (_super) {
        __extends$1(BrowserCacheManager, _super);
        function BrowserCacheManager(clientId, cacheConfig, cryptoImpl, logger) {
            var _this = _super.call(this, clientId, cryptoImpl) || this;
            // Cookie life calculation (hours * minutes * seconds * ms)
            _this.COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;
            _this.cacheConfig = cacheConfig;
            _this.logger = logger;
            _this.browserStorage = _this.setupBrowserStorage(cacheConfig.cacheLocation);
            _this.internalStorage = new MemoryStorage();
            // Migrate any cache entries from older versions of MSAL.
            _this.migrateCacheEntries();
            return _this;
        }
        /**
         * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.
         * @param cacheLocation
         */
        BrowserCacheManager.prototype.setupBrowserStorage = function (cacheLocation) {
            switch (cacheLocation) {
                case BrowserCacheLocation.LocalStorage:
                case BrowserCacheLocation.SessionStorage:
                    try {
                        return new BrowserStorage(cacheLocation);
                    }
                    catch (e) {
                        this.logger.verbose(e);
                        this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;
                        return new MemoryStorage();
                    }
                case BrowserCacheLocation.MemoryStorage:
                default:
                    return new MemoryStorage();
            }
        };
        /**
         * Migrate all old cache entries to new schema. No rollback supported.
         * @param storeAuthStateInCookie
         */
        BrowserCacheManager.prototype.migrateCacheEntries = function () {
            var _this = this;
            var idTokenKey = Constants$1.CACHE_PREFIX + "." + PersistentCacheKeys.ID_TOKEN;
            var clientInfoKey = Constants$1.CACHE_PREFIX + "." + PersistentCacheKeys.CLIENT_INFO;
            var errorKey = Constants$1.CACHE_PREFIX + "." + PersistentCacheKeys.ERROR;
            var errorDescKey = Constants$1.CACHE_PREFIX + "." + PersistentCacheKeys.ERROR_DESC;
            var idTokenValue = this.browserStorage.getItem(idTokenKey);
            var clientInfoValue = this.browserStorage.getItem(clientInfoKey);
            var errorValue = this.browserStorage.getItem(errorKey);
            var errorDescValue = this.browserStorage.getItem(errorDescKey);
            var values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];
            var keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];
            keysToMigrate.forEach(function (cacheKey, index) { return _this.migrateCacheEntry(cacheKey, values[index]); });
        };
        /**
         * Utility function to help with migration.
         * @param newKey
         * @param value
         * @param storeAuthStateInCookie
         */
        BrowserCacheManager.prototype.migrateCacheEntry = function (newKey, value) {
            if (value) {
                this.setTemporaryCache(newKey, value, true);
            }
        };
        /**
         * Parses passed value as JSON object, JSON.parse() will throw an error.
         * @param input
         */
        BrowserCacheManager.prototype.validateAndParseJson = function (jsonValue) {
            try {
                var parsedJson = JSON.parse(jsonValue);
                /**
                 * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object
                 * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check
                 * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.
                 *
                 */
                return (parsedJson && typeof parsedJson === "object") ? parsedJson : null;
            }
            catch (error) {
                return null;
            }
        };
        /**
         * fetches the entry from the browser storage based off the key
         * @param key
         */
        BrowserCacheManager.prototype.getItem = function (key) {
            return this.browserStorage.getItem(key);
        };
        /**
         * sets the entry in the browser storage
         * @param key
         * @param value
         */
        BrowserCacheManager.prototype.setItem = function (key, value) {
            this.browserStorage.setItem(key, value);
        };
        /**
         * fetch the account entity from the platform cache
         * @param accountKey
         */
        BrowserCacheManager.prototype.getAccount = function (accountKey) {
            var account = this.getItem(accountKey);
            if (!account) {
                return null;
            }
            var parsedAccount = this.validateAndParseJson(account);
            if (!parsedAccount) {
                return null;
            }
            var accountEntity = CacheManager.toObject(new AccountEntity(), parsedAccount);
            if (AccountEntity.isAccountEntity(accountEntity)) {
                return accountEntity;
            }
            return null;
        };
        /**
         * set account entity in the platform cache
         * @param key
         * @param value
         */
        BrowserCacheManager.prototype.setAccount = function (account) {
            var key = account.generateAccountKey();
            this.setItem(key, JSON.stringify(account));
        };
        /**
         * generates idToken entity from a string
         * @param idTokenKey
         */
        BrowserCacheManager.prototype.getIdTokenCredential = function (idTokenKey) {
            var value = this.getItem(idTokenKey);
            if (!value) {
                return null;
            }
            var parsedIdToken = this.validateAndParseJson(value);
            if (!parsedIdToken) {
                return null;
            }
            var idToken = CacheManager.toObject(new IdTokenEntity(), parsedIdToken);
            if (IdTokenEntity.isIdTokenEntity(idToken)) {
                return idToken;
            }
            return null;
        };
        /**
         * set IdToken credential to the platform cache
         * @param idToken
         */
        BrowserCacheManager.prototype.setIdTokenCredential = function (idToken) {
            var idTokenKey = idToken.generateCredentialKey();
            this.setItem(idTokenKey, JSON.stringify(idToken));
        };
        /**
         * generates accessToken entity from a string
         * @param key
         */
        BrowserCacheManager.prototype.getAccessTokenCredential = function (accessTokenKey) {
            var value = this.getItem(accessTokenKey);
            if (!value) {
                return null;
            }
            var parsedAccessToken = this.validateAndParseJson(value);
            if (!parsedAccessToken) {
                return null;
            }
            var accessToken = CacheManager.toObject(new AccessTokenEntity(), parsedAccessToken);
            if (AccessTokenEntity.isAccessTokenEntity(accessToken)) {
                return accessToken;
            }
            return null;
        };
        /**
         * set accessToken credential to the platform cache
         * @param accessToken
         */
        BrowserCacheManager.prototype.setAccessTokenCredential = function (accessToken) {
            var accessTokenKey = accessToken.generateCredentialKey();
            this.setItem(accessTokenKey, JSON.stringify(accessToken));
        };
        /**
         * generates refreshToken entity from a string
         * @param refreshTokenKey
         */
        BrowserCacheManager.prototype.getRefreshTokenCredential = function (refreshTokenKey) {
            var value = this.getItem(refreshTokenKey);
            if (!value) {
                return null;
            }
            var parsedRefreshToken = this.validateAndParseJson(value);
            if (!parsedRefreshToken) {
                return null;
            }
            var refreshToken = CacheManager.toObject(new RefreshTokenEntity(), parsedRefreshToken);
            if (RefreshTokenEntity.isRefreshTokenEntity(refreshToken)) {
                return refreshToken;
            }
            return null;
        };
        /**
         * set refreshToken credential to the platform cache
         * @param refreshToken
         */
        BrowserCacheManager.prototype.setRefreshTokenCredential = function (refreshToken) {
            var refreshTokenKey = refreshToken.generateCredentialKey();
            this.setItem(refreshTokenKey, JSON.stringify(refreshToken));
        };
        /**
         * fetch appMetadata entity from the platform cache
         * @param appMetadataKey
         */
        BrowserCacheManager.prototype.getAppMetadata = function (appMetadataKey) {
            var value = this.getItem(appMetadataKey);
            if (!value) {
                return null;
            }
            var parsedMetadata = this.validateAndParseJson(value);
            if (!parsedMetadata) {
                return null;
            }
            var appMetadata = CacheManager.toObject(new AppMetadataEntity(), parsedMetadata);
            if (AppMetadataEntity.isAppMetadataEntity(appMetadataKey, appMetadata)) {
                return appMetadata;
            }
            return null;
        };
        /**
         * set appMetadata entity to the platform cache
         * @param appMetadata
         */
        BrowserCacheManager.prototype.setAppMetadata = function (appMetadata) {
            var appMetadataKey = appMetadata.generateAppMetadataKey();
            this.setItem(appMetadataKey, JSON.stringify(appMetadata));
        };
        /**
         * fetch server telemetry entity from the platform cache
         * @param serverTelemetryKey
         */
        BrowserCacheManager.prototype.getServerTelemetry = function (serverTelemetryKey) {
            var value = this.getItem(serverTelemetryKey);
            if (!value) {
                return null;
            }
            var parsedMetadata = this.validateAndParseJson(value);
            if (!parsedMetadata) {
                return null;
            }
            var serverTelemetryEntity = CacheManager.toObject(new ServerTelemetryEntity(), parsedMetadata);
            if (ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, serverTelemetryEntity)) {
                return serverTelemetryEntity;
            }
            return null;
        };
        /**
         * set server telemetry entity to the platform cache
         * @param serverTelemetryKey
         * @param serverTelemetry
         */
        BrowserCacheManager.prototype.setServerTelemetry = function (serverTelemetryKey, serverTelemetry) {
            this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));
        };
        /**
         * fetch throttling entity from the platform cache
         * @param throttlingCacheKey
         */
        BrowserCacheManager.prototype.getThrottlingCache = function (throttlingCacheKey) {
            var value = this.getItem(throttlingCacheKey);
            if (!value) {
                return null;
            }
            var parsedThrottlingCache = this.validateAndParseJson(value);
            if (!parsedThrottlingCache) {
                return null;
            }
            var throttlingCache = CacheManager.toObject(new ThrottlingEntity(), parsedThrottlingCache);
            if (ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, throttlingCache)) {
                return throttlingCache;
            }
            return null;
        };
        /**
         * set throttling entity to the platform cache
         * @param throttlingCacheKey
         * @param throttlingCache
         */
        BrowserCacheManager.prototype.setThrottlingCache = function (throttlingCacheKey, throttlingCache) {
            this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));
        };
        /**
         * Gets cache item with given key.
         * Will retrieve frm cookies if storeAuthStateInCookie is set to true.
         * @param key
         */
        BrowserCacheManager.prototype.getTemporaryCache = function (cacheKey, generateKey) {
            var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;
            if (this.cacheConfig.storeAuthStateInCookie) {
                var itemCookie = this.getItemCookie(key);
                if (itemCookie) {
                    return itemCookie;
                }
            }
            var value = this.getItem(key);
            if (!value) {
                return null;
            }
            return value;
        };
        /**
         * Sets the cache item with the key and value given.
         * Stores in cookie if storeAuthStateInCookie is set to true.
         * This can cause cookie overflow if used incorrectly.
         * @param key
         * @param value
         */
        BrowserCacheManager.prototype.setTemporaryCache = function (cacheKey, value, generateKey) {
            var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;
            this.setItem(key, value);
            if (this.cacheConfig.storeAuthStateInCookie) {
                this.setItemCookie(key, value);
            }
        };
        /**
         * Removes the cache item with the given key.
         * Will also clear the cookie item if storeAuthStateInCookie is set to true.
         * @param key
         */
        BrowserCacheManager.prototype.removeItem = function (key) {
            this.browserStorage.removeItem(key);
            if (this.cacheConfig.storeAuthStateInCookie) {
                this.clearItemCookie(key);
            }
            return true;
        };
        /**
         * Checks whether key is in cache.
         * @param key
         */
        BrowserCacheManager.prototype.containsKey = function (key) {
            return this.browserStorage.containsKey(key);
        };
        /**
         * Gets all keys in window.
         */
        BrowserCacheManager.prototype.getKeys = function () {
            return this.browserStorage.getKeys();
        };
        /**
         * Clears all cache entries created by MSAL (except tokens).
         */
        BrowserCacheManager.prototype.clear = function () {
            var _this = this;
            this.removeAllAccounts();
            this.removeAppMetadata();
            this.browserStorage.getKeys().forEach(function (cacheKey) {
                // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js
                if (_this.browserStorage.containsKey(cacheKey) && ((cacheKey.indexOf(Constants$1.CACHE_PREFIX) !== -1) || (cacheKey.indexOf(_this.clientId) !== -1))) {
                    _this.removeItem(cacheKey);
                }
            });
        };
        /**
         * Add value to cookies
         * @param cookieName
         * @param cookieValue
         * @param expires
         */
        BrowserCacheManager.prototype.setItemCookie = function (cookieName, cookieValue, expires) {
            var cookieStr = encodeURIComponent(cookieName) + "=" + encodeURIComponent(cookieValue) + ";path=/;";
            if (expires) {
                var expireTime = this.getCookieExpirationTime(expires);
                cookieStr += "expires=" + expireTime + ";";
            }
            document.cookie = cookieStr;
        };
        /**
         * Get one item by key from cookies
         * @param cookieName
         */
        BrowserCacheManager.prototype.getItemCookie = function (cookieName) {
            var name = encodeURIComponent(cookieName) + "=";
            var cookieList = document.cookie.split(";");
            for (var i = 0; i < cookieList.length; i++) {
                var cookie = cookieList[i];
                while (cookie.charAt(0) === " ") {
                    cookie = cookie.substring(1);
                }
                if (cookie.indexOf(name) === 0) {
                    return decodeURIComponent(cookie.substring(name.length, cookie.length));
                }
            }
            return "";
        };
        /**
         * Clear an item in the cookies by key
         * @param cookieName
         */
        BrowserCacheManager.prototype.clearItemCookie = function (cookieName) {
            this.setItemCookie(cookieName, "", -1);
        };
        /**
         * Get cookie expiration time
         * @param cookieLifeDays
         */
        BrowserCacheManager.prototype.getCookieExpirationTime = function (cookieLifeDays) {
            var today = new Date();
            var expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);
            return expr.toUTCString();
        };
        /**
         * Gets the cache object referenced by the browser
         */
        BrowserCacheManager.prototype.getCache = function () {
            return this.browserStorage;
        };
        /**
         * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser
         */
        BrowserCacheManager.prototype.setCache = function () {
            // sets nothing
        };
        /**
         * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)
         * @param key
         * @param addInstanceId
         */
        BrowserCacheManager.prototype.generateCacheKey = function (key) {
            var generatedKey = this.validateAndParseJson(key);
            if (!generatedKey) {
                if (StringUtils.startsWith(key, Constants$1.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {
                    return key;
                }
                return Constants$1.CACHE_PREFIX + "." + this.clientId + "." + key;
            }
            return JSON.stringify(key);
        };
        /**
         * Create authorityKey to cache authority
         * @param state
         */
        BrowserCacheManager.prototype.generateAuthorityKey = function (stateString) {
            var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;
            return this.generateCacheKey(TemporaryCacheKeys.AUTHORITY + "." + stateId);
        };
        /**
         * Create Nonce key to cache nonce
         * @param state
         */
        BrowserCacheManager.prototype.generateNonceKey = function (stateString) {
            var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;
            return this.generateCacheKey(TemporaryCacheKeys.NONCE_IDTOKEN + "." + stateId);
        };
        /**
         * Creates full cache key for the request state
         * @param stateString State string for the request
         */
        BrowserCacheManager.prototype.generateStateKey = function (stateString) {
            // Use the library state id to key temp storage for uniqueness for multiple concurrent requests
            var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;
            return this.generateCacheKey(TemporaryCacheKeys.REQUEST_STATE + "." + stateId);
        };
        /**
         * Gets the cached authority based on the cached state. Returns empty if no cached state found.
         */
        BrowserCacheManager.prototype.getCachedAuthority = function (cachedState) {
            var stateCacheKey = this.generateStateKey(cachedState);
            var state = this.getTemporaryCache(stateCacheKey);
            if (!state) {
                return null;
            }
            var authorityCacheKey = this.generateAuthorityKey(state);
            return this.getTemporaryCache(authorityCacheKey);
        };
        /**
         * Updates account, authority, and state in cache
         * @param serverAuthenticationRequest
         * @param account
         */
        BrowserCacheManager.prototype.updateCacheEntries = function (state, nonce, authorityInstance) {
            // Cache the request state
            var stateCacheKey = this.generateStateKey(state);
            this.setTemporaryCache(stateCacheKey, state, false);
            // Cache the nonce
            var nonceCacheKey = this.generateNonceKey(state);
            this.setTemporaryCache(nonceCacheKey, nonce, false);
            // Cache authorityKey
            var authorityCacheKey = this.generateAuthorityKey(state);
            this.setTemporaryCache(authorityCacheKey, authorityInstance, false);
        };
        /**
         * Reset all temporary cache items
         * @param state
         */
        BrowserCacheManager.prototype.resetRequestCache = function (state) {
            var _this = this;
            // check state and remove associated cache items
            this.getKeys().forEach(function (key) {
                if (!StringUtils.isEmpty(state) && key.indexOf(state) !== -1) {
                    _this.removeItem(key);
                }
            });
            // delete generic interactive request parameters
            if (state) {
                this.removeItem(this.generateStateKey(state));
                this.removeItem(this.generateNonceKey(state));
                this.removeItem(this.generateAuthorityKey(state));
            }
            this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));
            this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));
            this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));
            this.removeItem(this.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));
        };
        BrowserCacheManager.prototype.cleanRequestByState = function (stateString) {
            // Interaction is completed - remove interaction status.
            if (stateString) {
                var stateKey = this.generateStateKey(stateString);
                var cachedState = this.getItem(stateKey);
                this.resetRequestCache(cachedState || "");
            }
        };
        BrowserCacheManager.prototype.cleanRequestByInteractionType = function (interactionType) {
            var _this = this;
            this.getKeys().forEach(function (key) {
                if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {
                    return;
                }
                var value = _this.browserStorage.getItem(key);
                if (!value) {
                    return;
                }
                var parsedState = BrowserProtocolUtils.extractBrowserRequestState(_this.cryptoImpl, value);
                if (parsedState && parsedState.interactionType === interactionType) {
                    _this.resetRequestCache(value);
                }
            });
        };
        BrowserCacheManager.prototype.cacheCodeRequest = function (authCodeRequest, browserCrypto) {
            var encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));
            this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);
        };
        /**
         * Gets the token exchange parameters from the cache. Throws an error if nothing is found.
         */
        BrowserCacheManager.prototype.getCachedRequest = function (state, browserCrypto) {
            // Get token request from cache and parse as TokenExchangeParameters.
            var encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);
            if (!encodedTokenRequest) {
                throw BrowserAuthError.createNoTokenRequestCacheError();
            }
            var parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest));
            if (!parsedRequest) {
                throw BrowserAuthError.createUnableToParseTokenRequestCacheError();
            }
            this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));
            // Get cached authority and use if no authority is cached with request.
            if (StringUtils.isEmpty(parsedRequest.authority)) {
                var authorityCacheKey = this.generateAuthorityKey(state);
                var cachedAuthority = this.getTemporaryCache(authorityCacheKey);
                if (!cachedAuthority) {
                    throw BrowserAuthError.createNoCachedAuthorityError();
                }
                parsedRequest.authority = cachedAuthority;
            }
            return parsedRequest;
        };
        return BrowserCacheManager;
    }(CacheManager));
    var DEFAULT_BROWSER_CACHE_MANAGER = function (clientId, logger) {
        var cacheOptions = {
            cacheLocation: BrowserCacheLocation.MemoryStorage,
            storeAuthStateInCookie: false
        };
        return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
     */
    var FetchClient = /** @class */ (function () {
        function FetchClient() {
        }
        /**
         * Fetch Client for REST endpoints - Get request
         * @param url
         * @param headers
         * @param body
         */
        FetchClient.prototype.sendGetRequestAsync = function (url, options) {
            return __awaiter$1(this, void 0, void 0, function () {
                var response, _a;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, fetch(url, {
                                method: HTTP_REQUEST_TYPE.GET,
                                headers: this.getFetchHeaders(options)
                            })];
                        case 1:
                            response = _b.sent();
                            _a = {
                                headers: this.getHeaderDict(response.headers)
                            };
                            return [4 /*yield*/, response.json()];
                        case 2: return [2 /*return*/, (_a.body = (_b.sent()),
                                _a.status = response.status,
                                _a)];
                    }
                });
            });
        };
        /**
         * Fetch Client for REST endpoints - Post request
         * @param url
         * @param headers
         * @param body
         */
        FetchClient.prototype.sendPostRequestAsync = function (url, options) {
            return __awaiter$1(this, void 0, void 0, function () {
                var reqBody, response, _a;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            reqBody = (options && options.body) || "";
                            return [4 /*yield*/, fetch(url, {
                                    method: HTTP_REQUEST_TYPE.POST,
                                    headers: this.getFetchHeaders(options),
                                    body: reqBody
                                })];
                        case 1:
                            response = _b.sent();
                            _a = {
                                headers: this.getHeaderDict(response.headers)
                            };
                            return [4 /*yield*/, response.json()];
                        case 2: return [2 /*return*/, (_a.body = (_b.sent()),
                                _a.status = response.status,
                                _a)];
                    }
                });
            });
        };
        /**
         * Get Fetch API Headers object from string map
         * @param inputHeaders
         */
        FetchClient.prototype.getFetchHeaders = function (options) {
            var headers = new Headers();
            if (!(options && options.headers)) {
                return headers;
            }
            var optionsHeaders = options.headers;
            Object.keys(optionsHeaders).forEach(function (key) {
                headers.append(key, optionsHeaders[key]);
            });
            return headers;
        };
        FetchClient.prototype.getHeaderDict = function (headers) {
            var headerDict = {};
            headers.forEach(function (value, key) {
                headerDict[key] = value;
            });
            return headerDict;
        };
        return FetchClient;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * This client implements the XMLHttpRequest class to send GET and POST requests.
     */
    var XhrClient = /** @class */ (function () {
        function XhrClient() {
        }
        /**
         * XhrClient for REST endpoints - Get request
         * @param url
         * @param headers
         * @param body
         */
        XhrClient.prototype.sendGetRequestAsync = function (url, options) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options)];
                });
            });
        };
        /**
         * XhrClient for REST endpoints - Post request
         * @param url
         * @param headers
         * @param body
         */
        XhrClient.prototype.sendPostRequestAsync = function (url, options) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options)];
                });
            });
        };
        /**
         * Helper for XhrClient requests.
         * @param url
         * @param method
         * @param options
         */
        XhrClient.prototype.sendRequestAsync = function (url, method, options) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var xhr = new XMLHttpRequest();
                xhr.open(method, url, /* async: */ true);
                _this.setXhrHeaders(xhr, options);
                xhr.onload = function () {
                    if (xhr.status < 200 || xhr.status >= 300) {
                        reject(xhr.responseText);
                    }
                    try {
                        var jsonResponse = JSON.parse(xhr.responseText);
                        var networkResponse = {
                            headers: _this.getHeaderDict(xhr),
                            body: jsonResponse,
                            status: xhr.status
                        };
                        resolve(networkResponse);
                    }
                    catch (e) {
                        reject(xhr.responseText);
                    }
                };
                xhr.onerror = function () {
                    reject(xhr.status);
                };
                if (method === "POST" && options && options.body) {
                    xhr.send(options.body);
                }
                else if (method === "GET") {
                    xhr.send();
                }
                else {
                    throw BrowserAuthError.createHttpMethodNotImplementedError(method);
                }
            });
        };
        /**
         * Helper to set XHR headers for request.
         * @param xhr
         * @param options
         */
        XhrClient.prototype.setXhrHeaders = function (xhr, options) {
            if (options && options.headers) {
                var headers_1 = options.headers;
                Object.keys(headers_1).forEach(function (key) {
                    xhr.setRequestHeader(key, headers_1[key]);
                });
            }
        };
        /**
         * Gets a string map of the headers received in the response.
         *
         * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders
         * @param xhr
         */
        XhrClient.prototype.getHeaderDict = function (xhr) {
            var headerString = xhr.getAllResponseHeaders();
            var headerArr = headerString.trim().split(/[\r\n]+/);
            var headerDict = {};
            headerArr.forEach(function (value) {
                var parts = value.split(": ");
                var headerName = parts.shift();
                var headerVal = parts.join(": ");
                if (headerName && headerVal) {
                    headerDict[headerName] = headerVal;
                }
            });
            return headerDict;
        };
        return XhrClient;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Utility class for browser specific functions
     */
    var BrowserUtils = /** @class */ (function () {
        function BrowserUtils() {
        }
        // #region Window Navigation and URL management
        /**
         * Used to redirect the browser to the STS authorization endpoint
         * @param {string} urlNavigate - URL of the authorization endpoint
         * @param {boolean} noHistory - boolean flag, uses .replace() instead of .assign() if true
         */
        BrowserUtils.navigateWindow = function (urlNavigate, navigationTimeout, logger, noHistory) {
            if (noHistory) {
                window.location.replace(urlNavigate);
            }
            else {
                window.location.assign(urlNavigate);
            }
            // To block code from running after navigation, this should not throw if navigation succeeds
            return new Promise(function (resolve) {
                setTimeout(function () {
                    logger.warning("Expected to navigate away from the current page but timeout occurred.");
                    resolve();
                }, navigationTimeout);
            });
        };
        /**
         * Clears hash from window url.
         */
        BrowserUtils.clearHash = function () {
            // Office.js sets history.replaceState to null
            if (typeof history.replaceState === "function") {
                // Full removes "#" from url
                history.replaceState(null, Constants$1.EMPTY_STRING, "" + window.location.pathname + window.location.search);
            }
            else {
                window.location.hash = "";
            }
        };
        /**
         * Replaces current hash with hash from provided url
         */
        BrowserUtils.replaceHash = function (url) {
            var urlParts = url.split("#");
            urlParts.shift(); // Remove part before the hash
            window.location.hash = urlParts.length > 0 ? urlParts.join("#") : "";
        };
        /**
         * Returns boolean of whether the current window is in an iframe or not.
         */
        BrowserUtils.isInIframe = function () {
            return window.parent !== window;
        };
        // #endregion
        /**
         * Returns current window URL as redirect uri
         */
        BrowserUtils.getCurrentUri = function () {
            return window.location.href.split("?")[0].split("#")[0];
        };
        /**
         * Gets the homepage url for the current window location.
         */
        BrowserUtils.getHomepage = function () {
            var currentUrl = new UrlString(window.location.href);
            var urlComponents = currentUrl.getUrlComponents();
            return urlComponents.Protocol + "//" + urlComponents.HostNameAndPort + "/";
        };
        /**
         * Returns best compatible network client object.
         */
        BrowserUtils.getBrowserNetworkClient = function () {
            if (window.fetch && window.Headers) {
                return new FetchClient();
            }
            else {
                return new XhrClient();
            }
        };
        /**
         * Throws error if we have completed an auth and are
         * attempting another auth request inside an iframe.
         */
        BrowserUtils.blockReloadInHiddenIframes = function () {
            var isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);
            // return an error if called from the hidden iframe created by the msal js silent calls
            if (isResponseHash && BrowserUtils.isInIframe()) {
                throw BrowserAuthError.createBlockReloadInHiddenIframeError();
            }
        };
        /**
         * Block redirect operations in iframes unless explicitly allowed
         * @param interactionType Interaction type for the request
         * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe
         */
        BrowserUtils.blockRedirectInIframe = function (interactionType, allowRedirectInIframe) {
            var isIframedApp = BrowserUtils.isInIframe();
            if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {
                // If we are not in top frame, we shouldn't redirect. This is also handled by the service.
                throw BrowserAuthError.createRedirectInIframeError(isIframedApp);
            }
        };
        /**
         * Throws error if token requests are made in non-browser environment
         * @param isBrowserEnvironment Flag indicating if environment is a browser.
         */
        BrowserUtils.blockNonBrowserEnvironment = function (isBrowserEnvironment) {
            if (!isBrowserEnvironment) {
                throw BrowserAuthError.createNonBrowserEnvironmentError();
            }
        };
        /**
         * Returns boolean of whether current browser is an Internet Explorer or Edge browser.
         */
        BrowserUtils.detectIEOrEdge = function () {
            var ua = window.navigator.userAgent;
            var msie = ua.indexOf("MSIE ");
            var msie11 = ua.indexOf("Trident/");
            var msedge = ua.indexOf("Edge/");
            var isIE = msie > 0 || msie11 > 0;
            var isEdge = msedge > 0;
            return isIE || isEdge;
        };
        return BrowserUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    // Default timeout for popup windows and iframes in milliseconds
    var DEFAULT_POPUP_TIMEOUT_MS = 60000;
    var DEFAULT_IFRAME_TIMEOUT_MS = 6000;
    var DEFAULT_REDIRECT_TIMEOUT_MS = 30000;
    /**
     * MSAL function that sets the default options when not explicitly configured from app developer
     *
     * @param auth
     * @param cache
     * @param system
     *
     * @returns Configuration object
     */
    function buildConfiguration(_a, isBrowserEnvironment) {
        var userInputAuth = _a.auth, userInputCache = _a.cache, userInputSystem = _a.system;
        // Default auth options for browser
        var DEFAULT_AUTH_OPTIONS = {
            clientId: "",
            authority: "" + Constants$1.DEFAULT_AUTHORITY,
            knownAuthorities: [],
            cloudDiscoveryMetadata: "",
            redirectUri: "",
            postLogoutRedirectUri: "",
            navigateToLoginRequestUrl: true,
            clientCapabilities: [],
            protocolMode: ProtocolMode.AAD
        };
        // Default cache options for browser
        var DEFAULT_CACHE_OPTIONS = {
            cacheLocation: BrowserCacheLocation.SessionStorage,
            storeAuthStateInCookie: false
        };
        // Default logger options for browser
        var DEFAULT_LOGGER_OPTIONS = {
            loggerCallback: function () { },
            logLevel: LogLevel.Info,
            piiLoggingEnabled: false
        };
        // Default system options for browser
        var DEFAULT_BROWSER_SYSTEM_OPTIONS = __assign$1(__assign$1({}, DEFAULT_SYSTEM_OPTIONS), { loggerOptions: DEFAULT_LOGGER_OPTIONS, networkClient: isBrowserEnvironment ? BrowserUtils.getBrowserNetworkClient() : StubbedNetworkModule, loadFrameTimeout: 0, 
            // If loadFrameTimeout is provided, use that as default.
            windowHashTimeout: (userInputSystem && userInputSystem.loadFrameTimeout) || DEFAULT_POPUP_TIMEOUT_MS, iframeHashTimeout: (userInputSystem && userInputSystem.loadFrameTimeout) || DEFAULT_IFRAME_TIMEOUT_MS, navigateFrameWait: isBrowserEnvironment && BrowserUtils.detectIEOrEdge() ? 500 : 0, redirectNavigationTimeout: DEFAULT_REDIRECT_TIMEOUT_MS, asyncPopups: false, allowRedirectInIframe: false });
        var overlayedConfig = {
            auth: __assign$1(__assign$1({}, DEFAULT_AUTH_OPTIONS), userInputAuth),
            cache: __assign$1(__assign$1({}, DEFAULT_CACHE_OPTIONS), userInputCache),
            system: __assign$1(__assign$1({}, DEFAULT_BROWSER_SYSTEM_OPTIONS), userInputSystem)
        };
        return overlayedConfig;
    }

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Abstract class which defines operations for a browser interaction handling class.
     */
    var InteractionHandler = /** @class */ (function () {
        function InteractionHandler(authCodeModule, storageImpl, authCodeRequest) {
            this.authModule = authCodeModule;
            this.browserStorage = storageImpl;
            this.authCodeRequest = authCodeRequest;
        }
        /**
         * Function to handle response parameters from hash.
         * @param locationHash
         */
        InteractionHandler.prototype.handleCodeResponse = function (locationHash, state, authority, networkModule) {
            return __awaiter$1(this, void 0, void 0, function () {
                var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, tokenResponse;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // Check that location hash isn't empty.
                            if (StringUtils.isEmpty(locationHash)) {
                                throw BrowserAuthError.createEmptyHashError(locationHash);
                            }
                            stateKey = this.browserStorage.generateStateKey(state);
                            requestState = this.browserStorage.getTemporaryCache(stateKey);
                            if (!requestState) {
                                throw ClientAuthError.createStateNotFoundError("Cached State");
                            }
                            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);
                            nonceKey = this.browserStorage.generateNonceKey(requestState);
                            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);
                            // Assign code to request
                            this.authCodeRequest.code = authCodeResponse.code;
                            if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            authCodeResponse.nonce = cachedNonce || undefined;
                            authCodeResponse.state = requestState;
                            return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];
                        case 3:
                            tokenResponse = _a.sent();
                            this.browserStorage.cleanRequestByState(state);
                            return [2 /*return*/, tokenResponse];
                    }
                });
            });
        };
        InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {
            return __awaiter$1(this, void 0, void 0, function () {
                var cloudInstanceAuthorityUri, cloudInstanceAuthority;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!authority.isAuthorityAlias(cloudInstanceHostname)) return [3 /*break*/, 2];
                            cloudInstanceAuthorityUri = "https://" + cloudInstanceHostname + "/" + authority.tenant + "/";
                            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, authority.protocolMode)];
                        case 1:
                            cloudInstanceAuthority = _a.sent();
                            this.authModule.updateAuthority(cloudInstanceAuthority);
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        return InteractionHandler;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var RedirectHandler = /** @class */ (function (_super) {
        __extends$1(RedirectHandler, _super);
        function RedirectHandler(authCodeModule, storageImpl, authCodeRequest, browserCrypto) {
            var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest) || this;
            _this.browserCrypto = browserCrypto;
            return _this;
        }
        /**
         * Redirects window to given URL.
         * @param urlNavigate
         */
        RedirectHandler.prototype.initiateAuthRequest = function (requestUrl, params) {
            // Navigate if valid URL
            if (!StringUtils.isEmpty(requestUrl)) {
                // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true
                if (params.redirectStartPage) {
                    this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);
                }
                // Set interaction status in the library.
                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE, true);
                this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);
                this.authModule.logger.infoPii("Navigate to:" + requestUrl);
                // If onRedirectNavigate is implemented, invoke it and provide requestUrl
                if (typeof params.onRedirectNavigate === "function") {
                    this.authModule.logger.verbose("Invoking onRedirectNavigate callback");
                    var navigate = params.onRedirectNavigate(requestUrl);
                    // Returning false from onRedirectNavigate will stop navigation
                    if (navigate !== false) {
                        this.authModule.logger.verbose("onRedirectNavigate did not return false, navigating");
                        return BrowserUtils.navigateWindow(requestUrl, params.redirectTimeout, this.authModule.logger);
                    }
                    else {
                        this.authModule.logger.verbose("onRedirectNavigate returned false, stopping navigation");
                        return Promise.resolve();
                    }
                }
                else {
                    // Navigate window to request URL
                    this.authModule.logger.verbose("Navigating window to navigate url");
                    return BrowserUtils.navigateWindow(requestUrl, params.redirectTimeout, this.authModule.logger);
                }
            }
            else {
                // Throw error if request URL is empty.
                this.authModule.logger.info("Navigate url is empty");
                throw BrowserAuthError.createEmptyNavigationUriError();
            }
        };
        /**
         * Handle authorization code response in the window.
         * @param hash
         */
        RedirectHandler.prototype.handleCodeResponse = function (locationHash, state, authority, networkModule, clientId) {
            return __awaiter$1(this, void 0, void 0, function () {
                var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, tokenResponse;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // Check that location hash isn't empty.
                            if (StringUtils.isEmpty(locationHash)) {
                                throw BrowserAuthError.createEmptyHashError(locationHash);
                            }
                            // Interaction is completed - remove interaction status.
                            this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));
                            stateKey = this.browserStorage.generateStateKey(state);
                            requestState = this.browserStorage.getTemporaryCache(stateKey);
                            if (!requestState) {
                                throw ClientAuthError.createStateNotFoundError("Cached State");
                            }
                            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);
                            nonceKey = this.browserStorage.generateNonceKey(requestState);
                            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);
                            // Assign code to request
                            this.authCodeRequest.code = authCodeResponse.code;
                            if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            authCodeResponse.nonce = cachedNonce || undefined;
                            authCodeResponse.state = requestState;
                            // Remove throttle if it exists
                            if (clientId) {
                                ThrottlingUtils.removeThrottle(this.browserStorage, clientId, this.authCodeRequest.authority, this.authCodeRequest.scopes);
                            }
                            return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];
                        case 3:
                            tokenResponse = _a.sent();
                            this.browserStorage.cleanRequestByState(state);
                            return [2 /*return*/, tokenResponse];
                    }
                });
            });
        };
        return RedirectHandler;
    }(InteractionHandler));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * This class implements the interaction handler base class for browsers. It is written specifically for handling
     * popup window scenarios. It includes functions for monitoring the popup window for a hash.
     */
    var PopupHandler = /** @class */ (function (_super) {
        __extends$1(PopupHandler, _super);
        function PopupHandler(authCodeModule, storageImpl, authCodeRequest) {
            var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest) || this;
            // Properly sets this reference for the unload event.
            _this.unloadWindow = _this.unloadWindow.bind(_this);
            return _this;
        }
        /**
         * Opens a popup window with given request Url.
         * @param requestUrl
         */
        PopupHandler.prototype.initiateAuthRequest = function (requestUrl, params) {
            // Check that request url is not empty.
            if (!StringUtils.isEmpty(requestUrl)) {
                // Set interaction status in the library.
                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE, true);
                this.authModule.logger.infoPii("Navigate to:" + requestUrl);
                // Open the popup window to requestUrl.
                return this.openPopup(requestUrl, params.popup);
            }
            else {
                // Throw error if request URL is empty.
                this.authModule.logger.error("Navigate url is empty");
                throw BrowserAuthError.createEmptyNavigationUriError();
            }
        };
        /**
         * Monitors a window until it loads a url with a known hash, or hits a specified timeout.
         * @param popupWindow - window that is being monitored
         * @param timeout - milliseconds until timeout
         * @param urlNavigate - url that was navigated to
         */
        PopupHandler.prototype.monitorPopupForHash = function (popupWindow, timeout) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (timeout < DEFAULT_POPUP_TIMEOUT_MS) {
                    _this.authModule.logger.warning("system.loadFrameTimeout or system.windowHashTimeout set to lower (" + timeout + "ms) than the default (" + DEFAULT_POPUP_TIMEOUT_MS + "ms). This may result in timeouts.");
                }
                var maxTicks = timeout / BrowserConstants.POLL_INTERVAL_MS;
                var ticks = 0;
                var intervalId = setInterval(function () {
                    if (popupWindow.closed) {
                        // Window is closed
                        _this.cleanPopup();
                        clearInterval(intervalId);
                        reject(BrowserAuthError.createUserCancelledError());
                        return;
                    }
                    var href = Constants$1.EMPTY_STRING;
                    try {
                        /*
                         * Will throw if cross origin,
                         * which should be caught and ignored
                         * since we need the interval to keep running while on STS UI.
                         */
                        href = popupWindow.location.href;
                    }
                    catch (e) { }
                    // Don't process blank pages or cross domain
                    if (StringUtils.isEmpty(href) || href === "about:blank") {
                        return;
                    }
                    // Only run clock when we are on same domain
                    ticks++;
                    var contentHash = popupWindow.location.hash;
                    if (UrlString.hashContainsKnownProperties(contentHash)) {
                        // Success case
                        _this.cleanPopup(popupWindow);
                        clearInterval(intervalId);
                        resolve(contentHash);
                        return;
                    }
                    else if (ticks > maxTicks) {
                        // Timeout error
                        _this.cleanPopup(popupWindow);
                        clearInterval(intervalId);
                        reject(BrowserAuthError.createMonitorPopupTimeoutError());
                        return;
                    }
                }, BrowserConstants.POLL_INTERVAL_MS);
            });
        };
        /**
         * @hidden
         *
         * Configures popup window for login.
         *
         * @param urlNavigate
         * @param title
         * @param popUpWidth
         * @param popUpHeight
         * @ignore
         * @hidden
         */
        PopupHandler.prototype.openPopup = function (urlNavigate, popup) {
            try {
                var popupWindow = void 0;
                // Popup window passed in, setting url to navigate to
                if (popup) {
                    popupWindow = popup;
                    popupWindow.location.assign(urlNavigate);
                }
                else if (typeof popup === "undefined") {
                    // Popup will be undefined if it was not passed in
                    popupWindow = PopupHandler.openSizedPopup(urlNavigate);
                }
                // Popup will be null if popups are blocked
                if (!popupWindow) {
                    throw BrowserAuthError.createEmptyWindowCreatedError();
                }
                if (popupWindow.focus) {
                    popupWindow.focus();
                }
                this.currentWindow = popupWindow;
                window.addEventListener("beforeunload", this.unloadWindow);
                return popupWindow;
            }
            catch (e) {
                this.authModule.logger.error("error opening popup " + e.message);
                this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));
                throw BrowserAuthError.createPopupWindowError(e.toString());
            }
        };
        PopupHandler.openSizedPopup = function (urlNavigate) {
            if (urlNavigate === void 0) { urlNavigate = "about:blank"; }
            /**
             * adding winLeft and winTop to account for dual monitor
             * using screenLeft and screenTop for IE8 and earlier
             */
            var winLeft = window.screenLeft ? window.screenLeft : window.screenX;
            var winTop = window.screenTop ? window.screenTop : window.screenY;
            /**
             * window.innerWidth displays browser window"s height and width excluding toolbars
             * using document.documentElement.clientWidth for IE8 and earlier
             */
            var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
            var left = Math.max(0, ((width / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);
            var top = Math.max(0, ((height / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);
            return window.open(urlNavigate, Constants$1.LIBRARY_NAME, "width=" + BrowserConstants.POPUP_WIDTH + ", height=" + BrowserConstants.POPUP_HEIGHT + ", top=" + top + ", left=" + left);
        };
        /**
         * Event callback to unload main window.
         */
        PopupHandler.prototype.unloadWindow = function (e) {
            this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);
            if (this.currentWindow) {
                this.currentWindow.close();
            }
            // Guarantees browser unload will happen, so no other errors will be thrown.
            e.preventDefault();
        };
        /**
         * Closes popup, removes any state vars created during popup calls.
         * @param popupWindow
         */
        PopupHandler.prototype.cleanPopup = function (popupWindow) {
            if (popupWindow) {
                // Close window.
                popupWindow.close();
            }
            // Remove window unload function
            window.removeEventListener("beforeunload", this.unloadWindow);
            // Interaction is completed - remove interaction status.
            this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));
        };
        return PopupHandler;
    }(InteractionHandler));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var SilentHandler = /** @class */ (function (_super) {
        __extends$1(SilentHandler, _super);
        function SilentHandler(authCodeModule, storageImpl, authCodeRequest, navigateFrameWait) {
            var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest) || this;
            _this.navigateFrameWait = navigateFrameWait;
            return _this;
        }
        /**
         * Creates a hidden iframe to given URL using user-requested scopes as an id.
         * @param urlNavigate
         * @param userRequestScopes
         */
        SilentHandler.prototype.initiateAuthRequest = function (requestUrl) {
            return __awaiter$1(this, void 0, void 0, function () {
                var _a;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (StringUtils.isEmpty(requestUrl)) {
                                // Throw error if request URL is empty.
                                this.authModule.logger.info("Navigate url is empty");
                                throw BrowserAuthError.createEmptyNavigationUriError();
                            }
                            if (!this.navigateFrameWait) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.loadFrame(requestUrl)];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            _a = this.loadFrameSync(requestUrl);
                            _b.label = 3;
                        case 3: return [2 /*return*/, _a];
                    }
                });
            });
        };
        /**
         * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.
         * @param iframe
         * @param timeout
         */
        SilentHandler.prototype.monitorIframeForHash = function (iframe, timeout) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {
                    _this.authModule.logger.warning("system.loadFrameTimeout or system.iframeHashTimeout set to lower (" + timeout + "ms) than the default (" + DEFAULT_IFRAME_TIMEOUT_MS + "ms). This may result in timeouts.");
                }
                /*
                 * Polling for iframes can be purely timing based,
                 * since we don't need to account for interaction.
                 */
                var nowMark = window.performance.now();
                var timeoutMark = nowMark + timeout;
                var intervalId = setInterval(function () {
                    if (window.performance.now() > timeoutMark) {
                        _this.removeHiddenIframe(iframe);
                        clearInterval(intervalId);
                        reject(BrowserAuthError.createMonitorIframeTimeoutError());
                        return;
                    }
                    var href = Constants$1.EMPTY_STRING;
                    var contentWindow = iframe.contentWindow;
                    try {
                        /*
                         * Will throw if cross origin,
                         * which should be caught and ignored
                         * since we need the interval to keep running while on STS UI.
                         */
                        href = contentWindow ? contentWindow.location.href : Constants$1.EMPTY_STRING;
                    }
                    catch (e) { }
                    if (StringUtils.isEmpty(href)) {
                        return;
                    }
                    var contentHash = contentWindow ? contentWindow.location.hash : Constants$1.EMPTY_STRING;
                    if (UrlString.hashContainsKnownProperties(contentHash)) {
                        // Success case
                        _this.removeHiddenIframe(iframe);
                        clearInterval(intervalId);
                        resolve(contentHash);
                        return;
                    }
                }, BrowserConstants.POLL_INTERVAL_MS);
            });
        };
        /**
         * @hidden
         * Loads iframe with authorization endpoint URL
         * @ignore
         */
        SilentHandler.prototype.loadFrame = function (urlNavigate) {
            /*
             * This trick overcomes iframe navigation in IE
             * IE does not load the page consistently in iframe
             */
            var _this = this;
            return new Promise(function (resolve, reject) {
                var frameHandle = _this.createHiddenIframe();
                setTimeout(function () {
                    if (!frameHandle) {
                        reject("Unable to load iframe");
                        return;
                    }
                    frameHandle.src = urlNavigate;
                    resolve(frameHandle);
                }, _this.navigateFrameWait);
            });
        };
        /**
         * @hidden
         * Loads the iframe synchronously when the navigateTimeFrame is set to `0`
         * @param urlNavigate
         * @param frameName
         * @param logger
         */
        SilentHandler.prototype.loadFrameSync = function (urlNavigate) {
            var frameHandle = this.createHiddenIframe();
            frameHandle.src = urlNavigate;
            return frameHandle;
        };
        /**
         * @hidden
         * Creates a new hidden iframe or gets an existing one for silent token renewal.
         * @ignore
         */
        SilentHandler.prototype.createHiddenIframe = function () {
            var authFrame = document.createElement("iframe");
            authFrame.style.visibility = "hidden";
            authFrame.style.position = "absolute";
            authFrame.style.width = authFrame.style.height = "0";
            authFrame.style.border = "0";
            authFrame.setAttribute("sandbox", "allow-scripts allow-same-origin allow-forms");
            document.getElementsByTagName("body")[0].appendChild(authFrame);
            return authFrame;
        };
        /**
         * @hidden
         * Removes a hidden iframe from the page.
         * @ignore
         */
        SilentHandler.prototype.removeHiddenIframe = function (iframe) {
            if (document.body === iframe.parentNode) {
                document.body.removeChild(iframe);
            }
        };
        return SilentHandler;
    }(InteractionHandler));

    var name$1 = "@azure/msal-browser";
    var version$1 = "2.9.0";

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var EventType;
    (function (EventType) {
        EventType["LOGIN_START"] = "msal:loginStart";
        EventType["LOGIN_SUCCESS"] = "msal:loginSuccess";
        EventType["LOGIN_FAILURE"] = "msal:loginFailure";
        EventType["ACQUIRE_TOKEN_START"] = "msal:acquireTokenStart";
        EventType["ACQUIRE_TOKEN_SUCCESS"] = "msal:acquireTokenSuccess";
        EventType["ACQUIRE_TOKEN_FAILURE"] = "msal:acquireTokenFailure";
        EventType["ACQUIRE_TOKEN_NETWORK_START"] = "msal:acquireTokenFromNetworkStart";
        EventType["SSO_SILENT_START"] = "msal:ssoSilentStart";
        EventType["SSO_SILENT_SUCCESS"] = "msal:ssoSilentSuccess";
        EventType["SSO_SILENT_FAILURE"] = "msal:ssoSilentFailure";
        EventType["HANDLE_REDIRECT_START"] = "msal:handleRedirectStart";
        EventType["HANDLE_REDIRECT_END"] = "msal:handleRedirectEnd";
        EventType["LOGOUT_START"] = "msal:logoutStart";
        EventType["LOGOUT_SUCCESS"] = "msal:logoutSuccess";
        EventType["LOGOUT_FAILURE"] = "msal:logoutFailure";
    })(EventType || (EventType = {}));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ClientApplication = /** @class */ (function () {
        /**
         * @constructor
         * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object
         *
         * Important attributes in the Configuration object for auth are:
         * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
         * - authority: the authority URL for your application.
         * - redirect_uri: the uri of your application registered in the portal.
         *
         * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
         * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}
         * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
         * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
         * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
         * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
         *
         * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/
         * Full B2C functionality will be available in this library in future versions.
         *
         * @param {@link (Configuration:type)} configuration object for the MSAL PublicClientApplication instance
         */
        function ClientApplication(configuration) {
            /*
             * If loaded in an environment where window is not available,
             * set internal flag to false so that further requests fail.
             * This is to support server-side rendering environments.
             */
            this.isBrowserEnvironment = typeof window !== "undefined";
            // Set the configuration.
            this.config = buildConfiguration(configuration, this.isBrowserEnvironment);
            this.defaultAuthority = null;
            this.activeLocalAccountId = null;
            // Array of events
            this.eventCallbacks = new Map();
            // Initialize logger
            this.logger = new Logger$1(this.config.system.loggerOptions, name$1, version$1);
            // Initialize the network module class.
            this.networkClient = this.config.system.networkClient;
            if (!this.isBrowserEnvironment) {
                this.browserStorage = DEFAULT_BROWSER_CACHE_MANAGER(this.config.auth.clientId, this.logger);
                this.browserCrypto = DEFAULT_CRYPTO_IMPLEMENTATION;
                return;
            }
            // Initialize the crypto class.
            this.browserCrypto = new CryptoOps();
            // Initialize the browser storage class.
            this.browserStorage = new BrowserCacheManager(this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger);
            // Initialize default authority instance
            TrustedAuthority.setTrustedAuthoritiesFromConfig(this.config.auth.knownAuthorities, this.config.auth.cloudDiscoveryMetadata);
        }
        // #region Redirect Flow
        /**
         * Event handler function which allows users to fire events after the PublicClientApplication object
         * has loaded during redirect flows. This should be invoked on all page loads involved in redirect
         * auth flows.
         * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.
         * @returns {Promise.<AuthenticationResult | null>} token response or null. If the return value is null, then no auth redirect was detected.
         */
        ClientApplication.prototype.handleRedirectPromise = function (hash) {
            return __awaiter$1(this, void 0, void 0, function () {
                var loggedInAccounts;
                var _this = this;
                return __generator$1(this, function (_a) {
                    this.emitEvent(EventType.HANDLE_REDIRECT_START, InteractionType.Redirect);
                    loggedInAccounts = this.getAllAccounts();
                    if (this.isBrowserEnvironment) {
                        return [2 /*return*/, this.handleRedirectResponse(hash)
                                .then(function (result) {
                                if (result) {
                                    // Emit login event if number of accounts change
                                    var isLoggingIn = loggedInAccounts.length < _this.getAllAccounts().length;
                                    if (isLoggingIn) {
                                        _this.emitEvent(EventType.LOGIN_SUCCESS, InteractionType.Redirect, result);
                                    }
                                    else {
                                        _this.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Redirect, result);
                                    }
                                }
                                _this.emitEvent(EventType.HANDLE_REDIRECT_END, InteractionType.Redirect);
                                return result;
                            })
                                .catch(function (e) {
                                // Emit login event if there is an account
                                if (loggedInAccounts.length > 0) {
                                    _this.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Redirect, null, e);
                                }
                                else {
                                    _this.emitEvent(EventType.LOGIN_FAILURE, InteractionType.Redirect, null, e);
                                }
                                _this.emitEvent(EventType.HANDLE_REDIRECT_END, InteractionType.Redirect);
                                throw e;
                            })];
                    }
                    return [2 /*return*/, null];
                });
            });
        };
        /**
         * Checks if navigateToLoginRequestUrl is set, and:
         * - if true, performs logic to cache and navigate
         * - if false, handles hash string and parses response
         */
        ClientApplication.prototype.handleRedirectResponse = function (hash) {
            return __awaiter$1(this, void 0, void 0, function () {
                var responseHash, state, loginRequestUrl, loginRequestUrlNormalized, currentUrlNormalized, handleHashResult, homepage;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.interactionInProgress()) {
                                this.logger.info("handleRedirectPromise called but there is no interaction in progress, returning null.");
                                return [2 /*return*/, null];
                            }
                            responseHash = this.getRedirectResponseHash(hash || window.location.hash);
                            if (!responseHash) {
                                // Not a recognized server response hash or hash not associated with a redirect request
                                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);
                                return [2 /*return*/, null];
                            }
                            try {
                                state = this.validateAndExtractStateFromHash(responseHash, InteractionType.Redirect);
                                BrowserUtils.clearHash();
                            }
                            catch (e) {
                                this.logger.info("handleRedirectPromise was unable to extract state due to: " + e);
                                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);
                                return [2 /*return*/, null];
                            }
                            loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || "";
                            loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);
                            currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);
                            if (!(loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.handleHash(responseHash, state)];
                        case 1:
                            handleHashResult = _a.sent();
                            if (loginRequestUrl.indexOf("#") > -1) {
                                // Replace current hash with non-msal hash, if present
                                BrowserUtils.replaceHash(loginRequestUrl);
                            }
                            return [2 /*return*/, handleHashResult];
                        case 2:
                            if (!!this.config.auth.navigateToLoginRequestUrl) return [3 /*break*/, 3];
                            return [2 /*return*/, this.handleHash(responseHash, state)];
                        case 3:
                            if (!!BrowserUtils.isInIframe()) return [3 /*break*/, 7];
                            /*
                             * Returned from authority using redirect - need to perform navigation before processing response
                             * Cache the hash to be retrieved after the next redirect
                             */
                            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);
                            if (!(!loginRequestUrl || loginRequestUrl === "null")) return [3 /*break*/, 5];
                            homepage = BrowserUtils.getHomepage();
                            // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage
                            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);
                            this.logger.warning("Unable to get valid login request url from cache, redirecting to home page");
                            return [4 /*yield*/, BrowserUtils.navigateWindow(homepage, this.config.system.redirectNavigationTimeout, this.logger, true)];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 7];
                        case 5: 
                        // Navigate to page that initiated the redirect request
                        return [4 /*yield*/, BrowserUtils.navigateWindow(loginRequestUrl, this.config.system.redirectNavigationTimeout, this.logger, true)];
                        case 6:
                            // Navigate to page that initiated the redirect request
                            _a.sent();
                            _a.label = 7;
                        case 7: return [2 /*return*/, null];
                    }
                });
            });
        };
        /**
         * Gets the response hash for a redirect request
         * Returns null if interactionType in the state value is not "redirect" or the hash does not contain known properties
         * @returns {string}
         */
        ClientApplication.prototype.getRedirectResponseHash = function (hash) {
            // Get current location hash from window or cache.
            var isResponseHash = UrlString.hashContainsKnownProperties(hash);
            var cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);
            this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));
            return isResponseHash ? hash : cachedHash;
        };
        /**
         *
         * @param hash
         * @param interactionType
         */
        ClientApplication.prototype.validateAndExtractStateFromHash = function (hash, interactionType) {
            // Deserialize hash fragment response parameters.
            var serverParams = UrlString.getDeserializedHash(hash);
            if (!serverParams.state) {
                throw BrowserAuthError.createHashDoesNotContainStateError();
            }
            var platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);
            if (!platformStateObj) {
                throw BrowserAuthError.createUnableToParseStateError();
            }
            if (platformStateObj.interactionType !== interactionType) {
                throw BrowserAuthError.createStateInteractionTypeMismatchError();
            }
            return serverParams.state;
        };
        /**
         * Checks if hash exists and handles in window.
         * @param responseHash
         * @param interactionHandler
         */
        ClientApplication.prototype.handleHash = function (hash, state) {
            return __awaiter$1(this, void 0, void 0, function () {
                var cachedRequest, serverTelemetryManager, currentAuthority, authClient, interactionHandler, e_1;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);
                            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise, cachedRequest.correlationId);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            currentAuthority = this.browserStorage.getCachedAuthority(state);
                            if (!currentAuthority) {
                                throw BrowserAuthError.createNoCachedAuthorityError();
                            }
                            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, currentAuthority)];
                        case 2:
                            authClient = _a.sent();
                            interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.browserCrypto);
                            return [4 /*yield*/, interactionHandler.handleCodeResponse(hash, state, authClient.authority, this.networkClient, this.config.auth.clientId)];
                        case 3: return [2 /*return*/, _a.sent()];
                        case 4:
                            e_1 = _a.sent();
                            serverTelemetryManager.cacheFailedRequest(e_1);
                            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);
                            throw e_1;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects
         * the page, so any code that follows this function will not execute.
         *
         * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
         * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
         *
         * @param {@link (RedirectRequest:type)}
         */
        ClientApplication.prototype.acquireTokenRedirect = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var isLoggedIn, validRequest, serverTelemetryManager, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_2;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // Preflight request
                            this.preflightBrowserEnvironmentCheck(InteractionType.Redirect);
                            isLoggedIn = this.getAllAccounts().length > 0;
                            if (isLoggedIn) {
                                this.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Redirect, request);
                            }
                            else {
                                this.emitEvent(EventType.LOGIN_START, InteractionType.Redirect, request);
                            }
                            validRequest = this.preflightInteractiveRequest(request, InteractionType.Redirect);
                            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect, validRequest.correlationId);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 5, , 6]);
                            return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];
                        case 2:
                            authCodeRequest = _a.sent();
                            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority)];
                        case 3:
                            authClient = _a.sent();
                            interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.browserCrypto);
                            return [4 /*yield*/, authClient.getAuthCodeUrl(validRequest)];
                        case 4:
                            navigateUrl = _a.sent();
                            redirectStartPage = (request && request.redirectStartPage) || window.location.href;
                            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.
                            return [2 /*return*/, interactionHandler.initiateAuthRequest(navigateUrl, {
                                    redirectTimeout: this.config.system.redirectNavigationTimeout,
                                    redirectStartPage: redirectStartPage,
                                    onRedirectNavigate: request.onRedirectNavigate
                                })];
                        case 5:
                            e_2 = _a.sent();
                            // If logged in, emit acquire token events
                            if (isLoggedIn) {
                                this.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Redirect, null, e_2);
                            }
                            else {
                                this.emitEvent(EventType.LOGIN_FAILURE, InteractionType.Redirect, null, e_2);
                            }
                            serverTelemetryManager.cacheFailedRequest(e_2);
                            this.browserStorage.cleanRequestByState(validRequest.state);
                            throw e_2;
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        // #endregion
        // #region Popup Flow
        /**
         * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser
         * @param {@link (PopupRequest:type)}
         *
         * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
         */
        ClientApplication.prototype.acquireTokenPopup = function (request) {
            try {
                this.preflightBrowserEnvironmentCheck(InteractionType.Popup);
            }
            catch (e) {
                // Since this function is syncronous we need to reject
                return Promise.reject(e);
            }
            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.
            if (this.config.system.asyncPopups) {
                return this.acquireTokenPopupAsync(request);
            }
            else {
                // asyncPopups flag is set to false. Opens popup before acquiring token.
                var popup = PopupHandler.openSizedPopup();
                return this.acquireTokenPopupAsync(request, popup);
            }
        };
        /**
         * Helper which obtains an access_token for your API via opening a popup window in the user's browser
         * @param {@link (PopupRequest:type)}
         *
         * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
         */
        ClientApplication.prototype.acquireTokenPopupAsync = function (request, popup) {
            return __awaiter$1(this, void 0, void 0, function () {
                var loggedInAccounts, validRequest, serverTelemetryManager, authCodeRequest, authClient, navigateUrl, interactionHandler, popupParameters, popupWindow, hash, state, result, isLoggingIn, e_3;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            loggedInAccounts = this.getAllAccounts();
                            if (loggedInAccounts.length > 0) {
                                this.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Popup, request);
                            }
                            else {
                                this.emitEvent(EventType.LOGIN_START, InteractionType.Popup, request);
                            }
                            validRequest = this.preflightInteractiveRequest(request, InteractionType.Popup);
                            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup, validRequest.correlationId);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 7, , 8]);
                            return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];
                        case 2:
                            authCodeRequest = _a.sent();
                            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority)];
                        case 3:
                            authClient = _a.sent();
                            return [4 /*yield*/, authClient.getAuthCodeUrl(validRequest)];
                        case 4:
                            navigateUrl = _a.sent();
                            interactionHandler = new PopupHandler(authClient, this.browserStorage, authCodeRequest);
                            popupParameters = {
                                popup: popup
                            };
                            popupWindow = interactionHandler.initiateAuthRequest(navigateUrl, popupParameters);
                            return [4 /*yield*/, interactionHandler.monitorPopupForHash(popupWindow, this.config.system.windowHashTimeout)];
                        case 5:
                            hash = _a.sent();
                            state = this.validateAndExtractStateFromHash(hash, InteractionType.Popup);
                            // Remove throttle if it exists
                            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest.authority, authCodeRequest.scopes);
                            return [4 /*yield*/, interactionHandler.handleCodeResponse(hash, state, authClient.authority, this.networkClient)];
                        case 6:
                            result = _a.sent();
                            isLoggingIn = loggedInAccounts.length < this.getAllAccounts().length;
                            if (isLoggingIn) {
                                this.emitEvent(EventType.LOGIN_SUCCESS, InteractionType.Popup, result);
                            }
                            else {
                                this.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Popup, result);
                            }
                            return [2 /*return*/, result];
                        case 7:
                            e_3 = _a.sent();
                            if (loggedInAccounts.length > 0) {
                                this.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Popup, null, e_3);
                            }
                            else {
                                this.emitEvent(EventType.LOGIN_FAILURE, InteractionType.Popup, null, e_3);
                            }
                            serverTelemetryManager.cacheFailedRequest(e_3);
                            this.browserStorage.cleanRequestByState(validRequest.state);
                            throw e_3;
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        // #endregion
        // #region Silent Flow
        /**
         * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:
         * - Any browser using a form of Intelligent Tracking Prevention
         * - If there is not an established session with the service
         *
         * In these cases, the request must be done inside a popup or full frame redirect.
         *
         * For the cases where interaction is required, you cannot send a request with prompt=none.
         *
         * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as
         * you session on the server still exists.
         * @param {@link AuthorizationUrlRequest}
         *
         * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
         */
        ClientApplication.prototype.ssoSilent = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var silentTokenResult, e_4;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.preflightBrowserEnvironmentCheck(InteractionType.Silent);
                            this.emitEvent(EventType.SSO_SILENT_START, InteractionType.Silent, request);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.acquireTokenByIframe(request)];
                        case 2:
                            silentTokenResult = _a.sent();
                            this.emitEvent(EventType.SSO_SILENT_SUCCESS, InteractionType.Silent, silentTokenResult);
                            return [2 /*return*/, silentTokenResult];
                        case 3:
                            e_4 = _a.sent();
                            this.emitEvent(EventType.SSO_SILENT_FAILURE, InteractionType.Silent, null, e_4);
                            throw e_4;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * This function uses a hidden iframe to fetch an authorization code from the eSTS. To be used for silent refresh token acquisition and renewal.
         * @param {@link AuthorizationUrlRequest}
         * @param request
         */
        ClientApplication.prototype.acquireTokenByIframe = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var silentRequest, serverTelemetryManager, authCodeRequest, authClient, navigateUrl, e_5;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // Check that we have some SSO data
                            if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {
                                throw BrowserAuthError.createSilentSSOInsufficientInfoError();
                            }
                            // Check that prompt is set to none, throw error if it is set to anything else.
                            if (request.prompt && request.prompt !== PromptValue.NONE) {
                                throw BrowserAuthError.createSilentPromptValueError(request.prompt);
                            }
                            silentRequest = this.initializeAuthorizationRequest(__assign$1(__assign$1({}, request), { prompt: PromptValue.NONE }), InteractionType.Silent);
                            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.ssoSilent, silentRequest.correlationId);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 6, , 7]);
                            return [4 /*yield*/, this.initializeAuthorizationCodeRequest(silentRequest)];
                        case 2:
                            authCodeRequest = _a.sent();
                            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority)];
                        case 3:
                            authClient = _a.sent();
                            return [4 /*yield*/, authClient.getAuthCodeUrl(silentRequest)];
                        case 4:
                            navigateUrl = _a.sent();
                            return [4 /*yield*/, this.silentTokenHelper(navigateUrl, authCodeRequest, authClient)];
                        case 5: return [2 /*return*/, _a.sent()];
                        case 6:
                            e_5 = _a.sent();
                            serverTelemetryManager.cacheFailedRequest(e_5);
                            this.browserStorage.cleanRequestByState(silentRequest.state);
                            throw e_5;
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Use this function to obtain a token before every call to the API / resource provider
         *
         * MSAL return's a cached token when available
         * Or it send's a request to the STS to obtain a new token using a refresh token.
         *
         * @param {@link (SilentRequest:type)}
         *
         * To renew idToken, please pass clientId as the only scope in the Authentication Parameters
         * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
         *
         */
        ClientApplication.prototype.acquireTokenByRefreshToken = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var silentRequest, serverTelemetryManager, refreshTokenClient, e_6, isServerError, isInteractionRequiredError, isInvalidGrantError;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, request);
                            // block the reload if it occurred inside a hidden iframe
                            BrowserUtils.blockReloadInHiddenIframes();
                            silentRequest = __assign$1(__assign$1({}, request), this.initializeBaseRequest(request));
                            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow, silentRequest.correlationId);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 7]);
                            return [4 /*yield*/, this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority)];
                        case 2:
                            refreshTokenClient = _a.sent();
                            return [4 /*yield*/, refreshTokenClient.acquireTokenByRefreshToken(silentRequest)];
                        case 3: 
                        // Send request to renew token. Auth module will throw errors if token cannot be renewed.
                        return [2 /*return*/, _a.sent()];
                        case 4:
                            e_6 = _a.sent();
                            serverTelemetryManager.cacheFailedRequest(e_6);
                            isServerError = e_6 instanceof ServerError;
                            isInteractionRequiredError = e_6 instanceof InteractionRequiredAuthError;
                            isInvalidGrantError = (e_6.errorCode === BrowserConstants.INVALID_GRANT_ERROR);
                            if (!(isServerError && isInvalidGrantError && !isInteractionRequiredError)) return [3 /*break*/, 6];
                            return [4 /*yield*/, this.acquireTokenByIframe(request)];
                        case 5: return [2 /*return*/, _a.sent()];
                        case 6: throw e_6;
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Helper which acquires an authorization code silently using a hidden iframe from given url
         * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.
         * @param navigateUrl
         * @param userRequestScopes
         */
        ClientApplication.prototype.silentTokenHelper = function (navigateUrl, authCodeRequest, authClient) {
            return __awaiter$1(this, void 0, void 0, function () {
                var silentHandler, msalFrame, hash, state;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.config.system.navigateFrameWait);
                            return [4 /*yield*/, silentHandler.initiateAuthRequest(navigateUrl)];
                        case 1:
                            msalFrame = _a.sent();
                            return [4 /*yield*/, silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout)];
                        case 2:
                            hash = _a.sent();
                            state = this.validateAndExtractStateFromHash(hash, InteractionType.Silent);
                            // Handle response from hash string
                            return [2 /*return*/, silentHandler.handleCodeResponse(hash, state, authClient.authority, this.networkClient)];
                    }
                });
            });
        };
        // #endregion
        // #region Logout
        /**
         * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
         * Default behaviour is to redirect the user to `window.location.href`.
         * @param {@link (EndSessionRequest:type)}
         */
        ClientApplication.prototype.logout = function (logoutRequest) {
            return __awaiter$1(this, void 0, void 0, function () {
                var validLogoutRequest, serverTelemetryManager, authClient, logoutUri, navigate, e_7;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.preflightBrowserEnvironmentCheck(InteractionType.Redirect);
                            validLogoutRequest = this.initializeLogoutRequest(logoutRequest);
                            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout, validLogoutRequest.correlationId);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            this.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest);
                            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority)];
                        case 2:
                            authClient = _a.sent();
                            logoutUri = authClient.getLogoutUri(validLogoutRequest);
                            this.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);
                            if (!validLogoutRequest.account || AccountEntity.accountInfoIsEqual(validLogoutRequest.account, this.getActiveAccount())) {
                                this.setActiveAccount(null);
                            }
                            // Check if onRedirectNavigate is implemented, and invoke it if so
                            if (logoutRequest && typeof logoutRequest.onRedirectNavigate === "function") {
                                navigate = logoutRequest.onRedirectNavigate(logoutUri);
                                if (navigate !== false) {
                                    this.logger.verbose("Logout onRedirectNavigate did not return false, navigating");
                                    return [2 /*return*/, BrowserUtils.navigateWindow(logoutUri, this.config.system.redirectNavigationTimeout, this.logger)];
                                }
                                else {
                                    this.logger.verbose("Logout onRedirectNavigate returned false, stopping navigation");
                                }
                            }
                            else {
                                return [2 /*return*/, BrowserUtils.navigateWindow(logoutUri, this.config.system.redirectNavigationTimeout, this.logger)];
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            e_7 = _a.sent();
                            serverTelemetryManager.cacheFailedRequest(e_7);
                            this.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e_7);
                            throw e_7;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        // #endregion
        // #region Account APIs
        /**
         * Returns all accounts that MSAL currently has data for.
         * (the account object is created at the time of successful login)
         * or empty array when no accounts are found
         * @returns {@link AccountInfo[]} - Array of account objects in cache
         */
        ClientApplication.prototype.getAllAccounts = function () {
            return this.isBrowserEnvironment ? this.browserStorage.getAllAccounts() : [];
        };
        /**
         * Returns the signed in account matching username.
         * (the account object is created at the time of successful login)
         * or null when no matching account is found.
         * This API is provided for convenience but getAccountById should be used for best reliability
         * @returns {@link AccountInfo} - the account object stored in MSAL
         */
        ClientApplication.prototype.getAccountByUsername = function (userName) {
            var allAccounts = this.getAllAccounts();
            if (!StringUtils.isEmpty(userName) && allAccounts && allAccounts.length) {
                return allAccounts.filter(function (accountObj) { return accountObj.username.toLowerCase() === userName.toLowerCase(); })[0] || null;
            }
            else {
                return null;
            }
        };
        /**
         * Returns the signed in account matching homeAccountId.
         * (the account object is created at the time of successful login)
         * or null when no matching account is found
         * @returns {@link AccountInfo} - the account object stored in MSAL
         */
        ClientApplication.prototype.getAccountByHomeId = function (homeAccountId) {
            var allAccounts = this.getAllAccounts();
            if (!StringUtils.isEmpty(homeAccountId) && allAccounts && allAccounts.length) {
                return allAccounts.filter(function (accountObj) { return accountObj.homeAccountId === homeAccountId; })[0] || null;
            }
            else {
                return null;
            }
        };
        /**
         * Returns the signed in account matching localAccountId.
         * (the account object is created at the time of successful login)
         * or null when no matching account is found
         * @returns {@link AccountInfo} - the account object stored in MSAL
         */
        ClientApplication.prototype.getAccountByLocalId = function (localAccountId) {
            var allAccounts = this.getAllAccounts();
            if (!StringUtils.isEmpty(localAccountId) && allAccounts && allAccounts.length) {
                return allAccounts.filter(function (accountObj) { return accountObj.localAccountId === localAccountId; })[0] || null;
            }
            else {
                return null;
            }
        };
        /**
         * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.
         * @param account
         */
        ClientApplication.prototype.setActiveAccount = function (account) {
            this.activeLocalAccountId = account ? account.localAccountId : null;
        };
        /**
         * Gets the currently active account
         */
        ClientApplication.prototype.getActiveAccount = function () {
            if (!this.activeLocalAccountId) {
                return null;
            }
            return this.getAccountByLocalId(this.activeLocalAccountId);
        };
        // #endregion
        // #region Helpers
        /**
         *
         * Use to get the redirect uri configured in MSAL or null.
         * @returns {string} redirect URL
         *
         */
        ClientApplication.prototype.getRedirectUri = function (requestRedirectUri) {
            var redirectUri = requestRedirectUri || this.config.auth.redirectUri || BrowserUtils.getCurrentUri();
            return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());
        };
        /**
         * Use to get the post logout redirect uri configured in MSAL or null.
         *
         * @returns {string} post logout redirect URL
         */
        ClientApplication.prototype.getPostLogoutRedirectUri = function (requestPostLogoutRedirectUri) {
            var postLogoutRedirectUri = requestPostLogoutRedirectUri || this.config.auth.postLogoutRedirectUri || BrowserUtils.getCurrentUri();
            return UrlString.getAbsoluteUrl(postLogoutRedirectUri, BrowserUtils.getCurrentUri());
        };
        /**
         * Used to get a discovered version of the default authority.
         */
        ClientApplication.prototype.getDiscoveredDefaultAuthority = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var _a;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!!this.defaultAuthority) return [3 /*break*/, 2];
                            _a = this;
                            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(this.config.auth.authority, this.config.system.networkClient, this.config.auth.protocolMode)];
                        case 1:
                            _a.defaultAuthority = _b.sent();
                            _b.label = 2;
                        case 2: return [2 /*return*/, this.defaultAuthority];
                    }
                });
            });
        };
        /**
         * Helper to check whether interaction is in progress.
         */
        ClientApplication.prototype.interactionInProgress = function () {
            // Check whether value in cache is present and equal to expected value
            return (this.browserStorage.getTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, true)) === BrowserConstants.INTERACTION_IN_PROGRESS_VALUE;
        };
        /**
         * Creates an Authorization Code Client with the given authority, or the default authority.
         * @param authorityUrl
         */
        ClientApplication.prototype.createAuthCodeClient = function (serverTelemetryManager, authorityUrl) {
            return __awaiter$1(this, void 0, void 0, function () {
                var clientConfig;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl)];
                        case 1:
                            clientConfig = _a.sent();
                            return [2 /*return*/, new AuthorizationCodeClient(clientConfig)];
                    }
                });
            });
        };
        /**
         * Creates an Silent Flow Client with the given authority, or the default authority.
         * @param authorityUrl
         */
        ClientApplication.prototype.createSilentFlowClient = function (serverTelemetryManager, authorityUrl) {
            return __awaiter$1(this, void 0, void 0, function () {
                var clientConfig;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl)];
                        case 1:
                            clientConfig = _a.sent();
                            return [2 /*return*/, new SilentFlowClient(clientConfig)];
                    }
                });
            });
        };
        /**
         * Creates a Refresh Client with the given authority, or the default authority.
         * @param authorityUrl
         */
        ClientApplication.prototype.createRefreshTokenClient = function (serverTelemetryManager, authorityUrl) {
            return __awaiter$1(this, void 0, void 0, function () {
                var clientConfig;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl)];
                        case 1:
                            clientConfig = _a.sent();
                            return [2 /*return*/, new RefreshTokenClient(clientConfig)];
                    }
                });
            });
        };
        /**
         * Creates a Client Configuration object with the given request authority, or the default authority.
         * @param requestAuthority
         */
        ClientApplication.prototype.getClientConfiguration = function (serverTelemetryManager, requestAuthority) {
            return __awaiter$1(this, void 0, void 0, function () {
                var discoveredAuthority, _a;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(requestAuthority && requestAuthority !== this.config.auth.authority)) return [3 /*break*/, 2];
                            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(requestAuthority, this.config.system.networkClient, this.config.auth.protocolMode)];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, this.getDiscoveredDefaultAuthority()];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            discoveredAuthority = _a;
                            return [2 /*return*/, {
                                    authOptions: {
                                        clientId: this.config.auth.clientId,
                                        authority: discoveredAuthority,
                                        knownAuthorities: this.config.auth.knownAuthorities,
                                        cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,
                                        clientCapabilities: this.config.auth.clientCapabilities,
                                        protocolMode: this.config.auth.protocolMode
                                    },
                                    systemOptions: {
                                        tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds
                                    },
                                    loggerOptions: {
                                        loggerCallback: this.config.system.loggerOptions.loggerCallback,
                                        piiLoggingEnabled: this.config.system.loggerOptions.piiLoggingEnabled
                                    },
                                    cryptoInterface: this.browserCrypto,
                                    networkInterface: this.networkClient,
                                    storageInterface: this.browserStorage,
                                    serverTelemetryManager: serverTelemetryManager,
                                    libraryInfo: {
                                        sku: BrowserConstants.MSAL_SKU,
                                        version: version$1,
                                        cpu: "",
                                        os: ""
                                    }
                                }];
                    }
                });
            });
        };
        /**
         * Helper to validate app environment before making a request.
         */
        ClientApplication.prototype.preflightInteractiveRequest = function (request, interactionType) {
            // block the reload if it occurred inside a hidden iframe
            BrowserUtils.blockReloadInHiddenIframes();
            // Check if interaction is in progress. Throw error if true.
            if (this.interactionInProgress()) {
                throw BrowserAuthError.createInteractionInProgressError();
            }
            return this.initializeAuthorizationRequest(request, interactionType);
        };
        /**
         * Helper to validate app environment before making an auth request
         * * @param request
         */
        ClientApplication.prototype.preflightBrowserEnvironmentCheck = function (interactionType) {
            // Block request if not in browser environment
            BrowserUtils.blockNonBrowserEnvironment(this.isBrowserEnvironment);
            // Block redirects if in an iframe
            BrowserUtils.blockRedirectInIframe(interactionType, this.config.system.allowRedirectInIframe);
            // Block auth requests inside a hidden iframe
            BrowserUtils.blockReloadInHiddenIframes();
            // Block redirects if memory storage is enabled but storeAuthStateInCookie is not
            if (interactionType === InteractionType.Redirect &&
                this.config.cache.cacheLocation === BrowserCacheLocation.MemoryStorage &&
                !this.config.cache.storeAuthStateInCookie) {
                throw BrowserConfigurationAuthError.createInMemoryRedirectUnavailableError();
            }
        };
        /**
         * Initializer function for all request APIs
         * @param request
         */
        ClientApplication.prototype.initializeBaseRequest = function (request) {
            var authority = request.authority || this.config.auth.authority;
            var scopes = __spread$1(((request && request.scopes) || []));
            var correlationId = (request && request.correlationId) || this.browserCrypto.createNewGuid();
            var validatedRequest = __assign$1(__assign$1({}, request), { correlationId: correlationId,
                authority: authority,
                scopes: scopes });
            return validatedRequest;
        };
        ClientApplication.prototype.initializeServerTelemetryManager = function (apiId, correlationId, forceRefresh) {
            var telemetryPayload = {
                clientId: this.config.auth.clientId,
                correlationId: correlationId,
                apiId: apiId,
                forceRefresh: forceRefresh || false
            };
            return new ServerTelemetryManager(telemetryPayload, this.browserStorage);
        };
        /**
         * Helper to initialize required request parameters for interactive APIs and ssoSilent()
         * @param request
         */
        ClientApplication.prototype.initializeAuthorizationRequest = function (request, interactionType) {
            var redirectUri = this.getRedirectUri(request.redirectUri);
            var browserState = {
                interactionType: interactionType
            };
            var state = ProtocolUtils.setRequestState(this.browserCrypto, (request && request.state) || "", browserState);
            var authenticationScheme = request.authenticationScheme || AuthenticationScheme.BEARER;
            var validatedRequest = __assign$1(__assign$1({}, this.initializeBaseRequest(request)), { redirectUri: redirectUri, state: state, nonce: request.nonce || this.browserCrypto.createNewGuid(), responseMode: ResponseMode.FRAGMENT, authenticationScheme: authenticationScheme });
            var account = request.account || this.getActiveAccount();
            if (account) {
                validatedRequest.account = account;
            }
            // Check for ADAL SSO
            if (StringUtils.isEmpty(validatedRequest.loginHint)) {
                // Only check for adal token if no SSO params are being used
                var adalIdTokenString = this.browserStorage.getTemporaryCache(PersistentCacheKeys.ADAL_ID_TOKEN);
                if (adalIdTokenString) {
                    var adalIdToken = new AuthToken(adalIdTokenString, this.browserCrypto);
                    this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);
                    if (adalIdToken.claims && adalIdToken.claims.upn) {
                        validatedRequest.loginHint = adalIdToken.claims.upn;
                    }
                }
            }
            this.browserStorage.updateCacheEntries(validatedRequest.state, validatedRequest.nonce, validatedRequest.authority);
            return validatedRequest;
        };
        /**
         * Generates an auth code request tied to the url request.
         * @param request
         */
        ClientApplication.prototype.initializeAuthorizationCodeRequest = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var generatedPkceParams, authCodeRequest;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.browserCrypto.generatePkceCodes()];
                        case 1:
                            generatedPkceParams = _a.sent();
                            authCodeRequest = __assign$1(__assign$1({}, request), { redirectUri: request.redirectUri, code: "", codeVerifier: generatedPkceParams.verifier });
                            request.codeChallenge = generatedPkceParams.challenge;
                            request.codeChallengeMethod = Constants$1.S256_CODE_CHALLENGE_METHOD;
                            return [2 /*return*/, authCodeRequest];
                    }
                });
            });
        };
        /**
         * Initializer for the logout request.
         * @param logoutRequest
         */
        ClientApplication.prototype.initializeLogoutRequest = function (logoutRequest) {
            var validLogoutRequest = __assign$1({ correlationId: this.browserCrypto.createNewGuid() }, logoutRequest);
            validLogoutRequest.postLogoutRedirectUri = this.getPostLogoutRedirectUri(logoutRequest ? logoutRequest.postLogoutRedirectUri : "");
            return validLogoutRequest;
        };
        /**
         * Emits events by calling callback with event message
         * @param eventType
         * @param interactionType
         * @param payload
         * @param error
         */
        ClientApplication.prototype.emitEvent = function (eventType, interactionType, payload, error) {
            var _this = this;
            if (this.isBrowserEnvironment) {
                var message_1 = {
                    eventType: eventType,
                    interactionType: interactionType || null,
                    payload: payload || null,
                    error: error || null,
                    timestamp: Date.now()
                };
                this.logger.info("Emitting event: " + eventType);
                this.eventCallbacks.forEach(function (callback, callbackId) {
                    _this.logger.verbose("Emitting event to callback " + callbackId + ": " + eventType);
                    callback.apply(null, [message_1]);
                });
            }
        };
        /**
         * Adds event callbacks to array
         * @param callback
         */
        ClientApplication.prototype.addEventCallback = function (callback) {
            if (this.isBrowserEnvironment) {
                var callbackId = this.browserCrypto.createNewGuid();
                this.eventCallbacks.set(callbackId, callback);
                this.logger.verbose("Event callback registered with id: " + callbackId);
                return callbackId;
            }
            return null;
        };
        ClientApplication.prototype.removeEventCallback = function (callbackId) {
            this.eventCallbacks.delete(callbackId);
            this.logger.verbose("Event callback " + callbackId + " removed.");
        };
        /**
         * Returns the logger instance
         */
        ClientApplication.prototype.getLogger = function () {
            return this.logger;
        };
        /**
         * Replaces the default logger set in configurations with new Logger with new configurations
         * @param logger Logger instance
         */
        ClientApplication.prototype.setLogger = function (logger) {
            this.logger = logger;
        };
        return ClientApplication;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications
     * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.
     */
    var PublicClientApplication = /** @class */ (function (_super) {
        __extends$1(PublicClientApplication, _super);
        /**
         * @constructor
         * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object
         *
         * Important attributes in the Configuration object for auth are:
         * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
         * - authority: the authority URL for your application.
         * - redirect_uri: the uri of your application registered in the portal.
         *
         * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
         * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}
         * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
         * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
         * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
         * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
         *
         * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/
         * Full B2C functionality will be available in this library in future versions.
         *
         * @param {@link (Configuration:type)} configuration object for the MSAL PublicClientApplication instance
         */
        function PublicClientApplication(configuration) {
            return _super.call(this, configuration) || this;
        }
        /**
         * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so
         * any code that follows this function will not execute.
         *
         * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
         * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
         *
         * @param {@link (RedirectRequest:type)}
         */
        PublicClientApplication.prototype.loginRedirect = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, this.acquireTokenRedirect(request || DEFAULT_REQUEST)];
                });
            });
        };
        /**
         * Use when initiating the login process via opening a popup window in the user's browser
         *
         * @param {@link (PopupRequest:type)}
         *
         * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
         */
        PublicClientApplication.prototype.loginPopup = function (request) {
            return this.acquireTokenPopup(request || DEFAULT_REQUEST);
        };
        /**
         * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.
         *
         * @param {@link (SilentRequest:type)}
         * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
         */
        PublicClientApplication.prototype.acquireTokenSilent = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var account, silentRequest, serverTelemetryManager, silentAuthClient, cachedToken, e_1, tokenRenewalResult, tokenRenewalError_1;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.preflightBrowserEnvironmentCheck(InteractionType.Silent);
                            account = request.account || this.getActiveAccount();
                            if (!account) {
                                throw BrowserAuthError.createNoAccountError();
                            }
                            silentRequest = __assign$1(__assign$1(__assign$1({}, request), this.initializeBaseRequest(request)), { account: account, forceRefresh: request.forceRefresh || false });
                            this.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 9]);
                            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow, silentRequest.correlationId);
                            return [4 /*yield*/, this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority)];
                        case 2:
                            silentAuthClient = _a.sent();
                            return [4 /*yield*/, silentAuthClient.acquireCachedToken(silentRequest)];
                        case 3:
                            cachedToken = _a.sent();
                            this.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, cachedToken);
                            return [2 /*return*/, cachedToken];
                        case 4:
                            e_1 = _a.sent();
                            _a.label = 5;
                        case 5:
                            _a.trys.push([5, 7, , 8]);
                            return [4 /*yield*/, this.acquireTokenByRefreshToken(silentRequest)];
                        case 6:
                            tokenRenewalResult = _a.sent();
                            this.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, tokenRenewalResult);
                            return [2 /*return*/, tokenRenewalResult];
                        case 7:
                            tokenRenewalError_1 = _a.sent();
                            this.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError_1);
                            throw tokenRenewalError_1;
                        case 8: return [3 /*break*/, 9];
                        case 9: return [2 /*return*/];
                    }
                });
            });
        };
        return PublicClientApplication;
    }(ClientApplication));

    // Copyright (c) Microsoft Corporation.
    const logger$7 = credentialLogger("MSAL Browser v2 - Auth Code Flow");
    // We keep a copy of the redirect hash.
    const redirectHash = self.location.hash;
    /**
     * Uses MSAL Browser 2.X for browser authentication,
     * which uses the [Auth Code Flow](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).
     */
    class MSALAuthCode {
        /**
         * Sets up an MSAL object based on the given parameters.
         * MSAL with Auth Code allows sending a previously obtained `authenticationRecord` through the optional parameters,
         * which is set to be the active account.
         * @param options - Parameters necessary and otherwise used to create the MSAL object.
         */
        constructor(options) {
            this.loginStyle = options.loginStyle;
            this.correlationId = options.correlationId;
            this.config = {
                auth: {
                    clientId: options.clientId,
                    authority: `${options.authorityHost}/${options.tenantId}`,
                    knownAuthorities: options.knownAuthorities,
                    redirectUri: options.redirectUri,
                    postLogoutRedirectUri: options.postLogoutRedirectUri
                },
                cache: {
                    cacheLocation: "sessionStorage",
                    storeAuthStateInCookie: true // Set to true to improve the experience on IE11 and Edge.
                },
                system: {
                    loggerOptions: {
                        loggerCallback: (level, message, containsPii) => {
                            if (containsPii) {
                                return;
                            }
                            switch (level) {
                                case LogLevel.Error:
                                    logger$7.info(`MSAL Browser V2 error: ${message}`);
                                    return;
                                case LogLevel.Info:
                                    logger$7.info(`MSAL Browser V2 info message: ${message}`);
                                    return;
                                case LogLevel.Verbose:
                                    logger$7.info(`MSAL Browser V2 verbose message: ${message}`);
                                    return;
                                case LogLevel.Warning:
                                    logger$7.info(`MSAL Browser V2 warning: ${message}`);
                                    return;
                            }
                        }
                    }
                }
            };
            this.app = new PublicClientApplication(this.config);
            if (options.authenticationRecord) {
                this.app.setActiveAccount(options.authenticationRecord);
            }
        }
        /**
         * Loads the account based on the result of the authentication.
         * If no result was received, tries to load the account from the cache.
         * @param result - Result object received from MSAL.
         */
        handleResult(result) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    if (result && result.account) {
                        logger$7.info(`MSAL Browser V2 authentication successful.`);
                        this.app.setActiveAccount(result.account);
                        return result.account;
                    }
                    // If by this point we happen to have an active account, we should stop trying to parse this.
                    const activeAccount = this.app.getActiveAccount();
                    if (activeAccount) {
                        return activeAccount;
                    }
                    // If we don't have an active account, we try to activate it from all the already loaded accounts.
                    const accounts = this.app.getAllAccounts();
                    if (accounts.length > 1) {
                        // If there's more than one account in memory, we force the user to authenticate again.
                        // At this point we can't identify which account should this credential work with,
                        // since at this point the user won't have provided enough information.
                        // We log a message in case that helps.
                        logger$7.info([
                            "More than one account was found authenticated for this Client ID and Tenant ID.",
                            "However, no `authenticationRecord` has been provided for this credential,",
                            "therefore we're unable to pick between these accounts.",
                            "A new login attempt will be requested, to ensure the correct account is picked.",
                            "To work with multiple accounts for the same Client ID and Tenant ID, please provide an `authenticationRecord` when initializing `InteractiveBrowserCredential`."
                        ].join("\n"));
                        // To safely trigger a new login, we're also ensuring the local cache is cleared up for this MSAL object.
                        // However, we want to avoid kicking the user out of their authentication on the Azure side.
                        // We do this by calling to logout while specifying a `onRedirectNavigate` that returns false.
                        yield this.app.logout({
                            onRedirectNavigate: () => false
                        });
                        return;
                    }
                    // If there's only one account for this MSAL object, we can safely activate it.
                    if (accounts.length === 1) {
                        this.app.setActiveAccount(accounts[0]);
                        return accounts[0];
                    }
                    logger$7.info(`No accounts were found through MSAL.`);
                }
                catch (e) {
                    logger$7.info(`Failed to acquire token through MSAL. ${e.message}`);
                }
                return;
            });
        }
        /**
         * Uses MSAL to handle the redirect.
         */
        handleRedirect() {
            return __awaiter(this, void 0, void 0, function* () {
                return this.handleResult((yield this.app.handleRedirectPromise(redirectHash)) || undefined);
            });
        }
        /**
         * Uses MSAL to trigger a redirect or a popup login.
         */
        login(scopes = []) {
            return __awaiter(this, void 0, void 0, function* () {
                const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];
                const loginRequest = {
                    scopes: arrayScopes
                };
                switch (this.loginStyle) {
                    case "redirect": {
                        yield this.app.loginRedirect(loginRequest);
                        return;
                    }
                    case "popup":
                        return this.handleResult(yield this.app.loginPopup(loginRequest));
                }
            });
        }
        /**
         * Uses MSAL to retrieve the active account.
         */
        getActiveAccount() {
            return this.app.getActiveAccount() || undefined;
        }
        /**
         * Allows users to manually authenticate and retrieve the AuthenticationRecord.
         * @param options - Optional parameters to authenticate with, like the scope.
         */
        authenticate(options) {
            return __awaiter(this, void 0, void 0, function* () {
                // We ensure that redirection is handled at this point.
                yield this.handleRedirect();
                // If we have an active account, we return that.
                const account = this.getActiveAccount();
                if (account) {
                    return account;
                }
                const scopes = options.scopes;
                if (!scopes) {
                    throw new Error(`Invalid scopes in the authenticate function of the MSAL Auth Code flow. Received: ${scopes}`);
                }
                // Otherwise we try to login.
                return this.login(scopes);
            });
        }
        /**
         * Attempts to retrieve an authenticated token from MSAL.
         * @param options - Properties useful to retrieve the token, like the scopes and the abortSignal.
         */
        acquireToken(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const account = yield this.authenticate(options);
                const scopes = options.scopes;
                if (!scopes) {
                    throw new Error(`Invalid scopes in the acquireToken function of the MSAL Auth Code flow. Received: ${scopes}`);
                }
                const silentRequest = {
                    authority: this.config.auth.authority,
                    correlationId: this.correlationId,
                    account,
                    forceRefresh: false,
                    scopes: Array.isArray(scopes) ? scopes : scopes.split(",")
                };
                let authResponse;
                try {
                    logger$7.info("Attempting to acquire token silently");
                    authResponse = yield this.app.acquireTokenSilent(silentRequest);
                }
                catch (err) {
                    if (err instanceof AuthError) {
                        switch (err.errorCode) {
                            case "consent_required":
                            case "interaction_required":
                            case "login_required":
                                logger$7.info(`Authentication returned errorCode ${err.errorCode}`);
                                break;
                            default:
                                logger$7.info(`Failed to acquire token: ${err.message}`);
                                throw err;
                        }
                    }
                }
                if (authResponse === undefined) {
                    logger$7.info(`Silent authentication failed, falling back to interactive method ${this.loginStyle}`);
                    switch (this.loginStyle) {
                        case "redirect":
                            // This will go out of the page.
                            // Once the InteractiveBrowserCredential is initialized again,
                            // we'll load the MSAL account in the constructor.
                            yield this.app.acquireTokenRedirect(silentRequest);
                            return undefined;
                        case "popup":
                            authResponse = yield this.app.acquireTokenPopup(silentRequest);
                            break;
                    }
                }
                return {
                    accessToken: authResponse.accessToken,
                    expiresOn: authResponse.expiresOn
                };
            });
        }
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$2 = function(d, b) {
        extendStatics$2 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics$2(d, b);
    };

    function __extends$2(d, b) {
        extendStatics$2(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$2 = function() {
        __assign$2 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$2.apply(this, arguments);
    };

    function __awaiter$2(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$2(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var CryptoUtils = /** @class */ (function () {
        function CryptoUtils() {
        }
        /**
         * Creates a new random GUID
         * @returns string (GUID)
         */
        CryptoUtils.createNewGuid = function () {
            /*
             * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or
             * pseudo-random numbers.
             * The algorithm is as follows:
             *     Set the two most significant bits (bits 6 and 7) of the
             *        clock_seq_hi_and_reserved to zero and one, respectively.
             *     Set the four most significant bits (bits 12 through 15) of the
             *        time_hi_and_version field to the 4-bit version number from
             *        Section 4.1.3. Version4
             *     Set all the other bits to randomly (or pseudo-randomly) chosen
             *     values.
             * UUID                   = time-low "-" time-mid "-"time-high-and-version "-"clock-seq-reserved and low(2hexOctet)"-" node
             * time-low               = 4hexOctet
             * time-mid               = 2hexOctet
             * time-high-and-version  = 2hexOctet
             * clock-seq-and-reserved = hexOctet:
             * clock-seq-low          = hexOctet
             * node                   = 6hexOctet
             * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx
             * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10
             * y values are 8, 9, A, B
             */
            var cryptoObj = window.crypto; // for IE 11
            if (cryptoObj && cryptoObj.getRandomValues) {
                var buffer = new Uint8Array(16);
                cryptoObj.getRandomValues(buffer);
                // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).
                buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.
                buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = "4".
                // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.
                buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.
                buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.
                return CryptoUtils.decimalToHex(buffer[0]) + CryptoUtils.decimalToHex(buffer[1])
                    + CryptoUtils.decimalToHex(buffer[2]) + CryptoUtils.decimalToHex(buffer[3])
                    + "-" + CryptoUtils.decimalToHex(buffer[4]) + CryptoUtils.decimalToHex(buffer[5])
                    + "-" + CryptoUtils.decimalToHex(buffer[6]) + CryptoUtils.decimalToHex(buffer[7])
                    + "-" + CryptoUtils.decimalToHex(buffer[8]) + CryptoUtils.decimalToHex(buffer[9])
                    + "-" + CryptoUtils.decimalToHex(buffer[10]) + CryptoUtils.decimalToHex(buffer[11])
                    + CryptoUtils.decimalToHex(buffer[12]) + CryptoUtils.decimalToHex(buffer[13])
                    + CryptoUtils.decimalToHex(buffer[14]) + CryptoUtils.decimalToHex(buffer[15]);
            }
            else {
                var guidHolder = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
                var hex = "0123456789abcdef";
                var r = 0;
                var guidResponse = "";
                for (var i = 0; i < 36; i++) {
                    if (guidHolder[i] !== "-" && guidHolder[i] !== "4") {
                        // each x and y needs to be random
                        r = Math.random() * 16 | 0;
                    }
                    if (guidHolder[i] === "x") {
                        guidResponse += hex[r];
                    }
                    else if (guidHolder[i] === "y") {
                        // clock-seq-and-reserved first hex is filtered and remaining hex values are random
                        r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??
                        r |= 0x8; // set pos 3 to 1 as 1???
                        guidResponse += hex[r];
                    }
                    else {
                        guidResponse += guidHolder[i];
                    }
                }
                return guidResponse;
            }
        };
        /**
         * verifies if a string is  GUID
         * @param guid
         */
        CryptoUtils.isGuid = function (guid) {
            var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
            return regexGuid.test(guid);
        };
        /**
         * Decimal to Hex
         *
         * @param num
         */
        CryptoUtils.decimalToHex = function (num) {
            var hex = num.toString(16);
            while (hex.length < 2) {
                hex = "0" + hex;
            }
            return hex;
        };
        // See: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_4_%E2%80%93_escaping_the_string_before_encoding_it
        /**
         * encoding string to base64 - platform specific check
         *
         * @param input
         */
        CryptoUtils.base64Encode = function (input) {
            return btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g, function toSolidBytes(match, p1) {
                return String.fromCharCode(Number("0x" + p1));
            }));
        };
        /**
         * Decodes a base64 encoded string.
         *
         * @param input
         */
        CryptoUtils.base64Decode = function (input) {
            var encodedString = input.replace(/-/g, "+").replace(/_/g, "/");
            switch (encodedString.length % 4) {
                case 0:
                    break;
                case 2:
                    encodedString += "==";
                    break;
                case 3:
                    encodedString += "=";
                    break;
                default:
                    throw new Error("Invalid base64 string");
            }
            return decodeURIComponent(atob(encodedString).split("").map(function (c) {
                return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(""));
        };
        /**
         * deserialize a string
         *
         * @param query
         */
        CryptoUtils.deserialize = function (query) {
            var match; // Regex for replacing addition symbol with a space
            var pl = /\+/g;
            var search = /([^&=]+)=([^&]*)/g;
            var decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); };
            var obj = {};
            match = search.exec(query);
            while (match) {
                obj[decode(match[1])] = decode(match[2]);
                match = search.exec(query);
            }
            return obj;
        };
        return CryptoUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     * Constants
     */
    var Constants$2 = /** @class */ (function () {
        function Constants() {
        }
        Object.defineProperty(Constants, "libraryName", {
            get: function () { return "Msal.js"; } // used in telemetry sdkName
            ,
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "claims", {
            get: function () { return "claims"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "clientId", {
            get: function () { return "clientId"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "adalIdToken", {
            get: function () { return "adal.idtoken"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "cachePrefix", {
            get: function () { return "msal"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "scopes", {
            get: function () { return "scopes"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "no_account", {
            get: function () { return "NO_ACCOUNT"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "upn", {
            get: function () { return "upn"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "domain_hint", {
            get: function () { return "domain_hint"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "prompt_select_account", {
            get: function () { return "&prompt=select_account"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "prompt_none", {
            get: function () { return "&prompt=none"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "prompt", {
            get: function () { return "prompt"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "response_mode_fragment", {
            get: function () { return "&response_mode=fragment"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "resourceDelimiter", {
            get: function () { return "|"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "cacheDelimiter", {
            get: function () { return "."; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "popUpWidth", {
            get: function () { return this._popUpWidth; },
            set: function (width) {
                this._popUpWidth = width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "popUpHeight", {
            get: function () { return this._popUpHeight; },
            set: function (height) {
                this._popUpHeight = height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "login", {
            get: function () { return "LOGIN"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "renewToken", {
            get: function () { return "RENEW_TOKEN"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "unknown", {
            get: function () { return "UNKNOWN"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "ADFS", {
            get: function () { return "adfs"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "homeAccountIdentifier", {
            get: function () { return "homeAccountIdentifier"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "common", {
            get: function () { return "common"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "openidScope", {
            get: function () { return "openid"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "profileScope", {
            get: function () { return "profile"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "oidcScopes", {
            get: function () { return [this.openidScope, this.profileScope]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "interactionTypeRedirect", {
            get: function () { return "redirectInteraction"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "interactionTypePopup", {
            get: function () { return "popupInteraction"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "interactionTypeSilent", {
            get: function () { return "silentInteraction"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Constants, "inProgress", {
            get: function () { return "inProgress"; },
            enumerable: true,
            configurable: true
        });
        Constants._popUpWidth = 483;
        Constants._popUpHeight = 600;
        return Constants;
    }());
    /**
     * Keys in the hashParams
     */
    var ServerHashParamKeys;
    (function (ServerHashParamKeys) {
        ServerHashParamKeys["SCOPE"] = "scope";
        ServerHashParamKeys["STATE"] = "state";
        ServerHashParamKeys["ERROR"] = "error";
        ServerHashParamKeys["ERROR_DESCRIPTION"] = "error_description";
        ServerHashParamKeys["ACCESS_TOKEN"] = "access_token";
        ServerHashParamKeys["ID_TOKEN"] = "id_token";
        ServerHashParamKeys["EXPIRES_IN"] = "expires_in";
        ServerHashParamKeys["SESSION_STATE"] = "session_state";
        ServerHashParamKeys["CLIENT_INFO"] = "client_info";
    })(ServerHashParamKeys || (ServerHashParamKeys = {}));
    /**
     * @hidden
     * @ignore
     * response_type from OpenIDConnect
     * References: https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html & https://tools.ietf.org/html/rfc6749#section-4.2.1
     *
     */
    var ResponseTypes = {
        id_token: "id_token",
        token: "token",
        id_token_token: "id_token token"
    };
    /**
     * @hidden
     * CacheKeys for MSAL
     */
    var TemporaryCacheKeys$1;
    (function (TemporaryCacheKeys) {
        TemporaryCacheKeys["AUTHORITY"] = "authority";
        TemporaryCacheKeys["ACQUIRE_TOKEN_ACCOUNT"] = "acquireTokenAccount";
        TemporaryCacheKeys["SESSION_STATE"] = "session.state";
        TemporaryCacheKeys["STATE_LOGIN"] = "state.login";
        TemporaryCacheKeys["STATE_ACQ_TOKEN"] = "state.acquireToken";
        TemporaryCacheKeys["STATE_RENEW"] = "state.renew";
        TemporaryCacheKeys["NONCE_IDTOKEN"] = "nonce.idtoken";
        TemporaryCacheKeys["LOGIN_REQUEST"] = "login.request";
        TemporaryCacheKeys["RENEW_STATUS"] = "token.renew.status";
        TemporaryCacheKeys["URL_HASH"] = "urlHash";
        TemporaryCacheKeys["INTERACTION_STATUS"] = "interaction_status";
        TemporaryCacheKeys["REDIRECT_REQUEST"] = "redirect_request";
    })(TemporaryCacheKeys$1 || (TemporaryCacheKeys$1 = {}));
    var PersistentCacheKeys$1;
    (function (PersistentCacheKeys) {
        PersistentCacheKeys["IDTOKEN"] = "idtoken";
        PersistentCacheKeys["CLIENT_INFO"] = "client.info";
    })(PersistentCacheKeys$1 || (PersistentCacheKeys$1 = {}));
    var ErrorCacheKeys;
    (function (ErrorCacheKeys) {
        ErrorCacheKeys["LOGIN_ERROR"] = "login.error";
        ErrorCacheKeys["ERROR"] = "error";
        ErrorCacheKeys["ERROR_DESC"] = "error.description";
    })(ErrorCacheKeys || (ErrorCacheKeys = {}));
    var DEFAULT_AUTHORITY = "https://login.microsoftonline.com/common/";
    var AAD_INSTANCE_DISCOVERY_ENDPOINT = DEFAULT_AUTHORITY + "/discovery/instance?api-version=1.1&authorization_endpoint=";
    var WELL_KNOWN_SUFFIX = ".well-known/openid-configuration";
    /**
     * @hidden
     * SSO Types - generated to populate hints
     */
    var SSOTypes$1;
    (function (SSOTypes) {
        SSOTypes["ACCOUNT"] = "account";
        SSOTypes["SID"] = "sid";
        SSOTypes["LOGIN_HINT"] = "login_hint";
        SSOTypes["ORGANIZATIONS"] = "organizations";
        SSOTypes["ID_TOKEN"] = "id_token";
        SSOTypes["ACCOUNT_ID"] = "accountIdentifier";
        SSOTypes["HOMEACCOUNT_ID"] = "homeAccountIdentifier";
    })(SSOTypes$1 || (SSOTypes$1 = {}));
    /**
     * @hidden
     */
    var BlacklistedEQParams$1 = [
        SSOTypes$1.SID,
        SSOTypes$1.LOGIN_HINT
    ];
    var NetworkRequestType = {
        GET: "GET",
        POST: "POST"
    };
    /**
     * we considered making this "enum" in the request instead of string, however it looks like the allowed list of
     * prompt values kept changing over past couple of years. There are some undocumented prompt values for some
     * internal partners too, hence the choice of generic "string" type instead of the "enum"
     * @hidden
     */
    var PromptState = {
        LOGIN: "login",
        SELECT_ACCOUNT: "select_account",
        CONSENT: "consent",
        NONE: "none"
    };
    /**
     * Frame name prefixes for the hidden iframe created in silent frames
     */
    var FramePrefix = {
        ID_TOKEN_FRAME: "msalIdTokenFrame",
        TOKEN_FRAME: "msalRenewFrame"
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var AuthErrorMessage$1 = {
        unexpectedError: {
            code: "unexpected_error",
            desc: "Unexpected error in authentication."
        },
        noWindowObjectError: {
            code: "no_window_object",
            desc: "No window object available. Details:"
        }
    };
    /**
     * General error class thrown by the MSAL.js library.
     */
    var AuthError$1 = /** @class */ (function (_super) {
        __extends$2(AuthError, _super);
        function AuthError(errorCode, errorMessage) {
            var _this = _super.call(this, errorMessage) || this;
            Object.setPrototypeOf(_this, AuthError.prototype);
            _this.errorCode = errorCode;
            _this.errorMessage = errorMessage;
            _this.name = "AuthError";
            return _this;
        }
        AuthError.createUnexpectedError = function (errDesc) {
            return new AuthError(AuthErrorMessage$1.unexpectedError.code, AuthErrorMessage$1.unexpectedError.desc + ": " + errDesc);
        };
        AuthError.createNoWindowObjectError = function (errDesc) {
            return new AuthError(AuthErrorMessage$1.noWindowObjectError.code, AuthErrorMessage$1.noWindowObjectError.desc + " " + errDesc);
        };
        return AuthError;
    }(Error));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var StringUtils$1 = /** @class */ (function () {
        function StringUtils() {
        }
        /**
         * Check if a string is empty
         *
         * @param str
         */
        StringUtils.isEmpty = function (str) {
            return (typeof str === "undefined" || !str || 0 === str.length);
        };
        /**
         * Check if a string's value is a valid JSON object
         *
         * @param str
         */
        StringUtils.validateAndParseJsonCacheKey = function (str) {
            try {
                var parsedKey = JSON.parse(str);
                /**
                 * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object
                 * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check
                 * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.
                 *
                 */
                return (parsedKey && typeof parsedKey === "object") ? parsedKey : null;
            }
            catch (error) {
                return null;
            }
        };
        return StringUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ClientAuthErrorMessage$1 = {
        multipleCacheAuthorities: {
            code: "multiple_authorities",
            desc: "Multiple authorities found in the cache. Pass authority in the API overload."
        },
        endpointResolutionError: {
            code: "endpoints_resolution_error",
            desc: "Error: could not resolve endpoints. Please check network and try again."
        },
        popUpWindowError: {
            code: "popup_window_error",
            desc: "Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser."
        },
        tokenRenewalError: {
            code: "token_renewal_error",
            desc: "Token renewal operation failed due to timeout."
        },
        invalidIdToken: {
            code: "invalid_id_token",
            desc: "Invalid ID token format."
        },
        invalidStateError: {
            code: "invalid_state_error",
            desc: "Invalid state."
        },
        nonceMismatchError: {
            code: "nonce_mismatch_error",
            desc: "Nonce is not matching, Nonce received: "
        },
        loginProgressError: {
            code: "login_progress_error",
            desc: "Login_In_Progress: Error during login call - login is already in progress."
        },
        acquireTokenProgressError: {
            code: "acquiretoken_progress_error",
            desc: "AcquireToken_In_Progress: Error during login call - login is already in progress."
        },
        userCancelledError: {
            code: "user_cancelled",
            desc: "User cancelled the flow."
        },
        callbackError: {
            code: "callback_error",
            desc: "Error occurred in token received callback function."
        },
        userLoginRequiredError: {
            code: "user_login_error",
            desc: "User login is required. For silent calls, request must contain either sid or login_hint"
        },
        userDoesNotExistError: {
            code: "user_non_existent",
            desc: "User object does not exist. Please call a login API."
        },
        clientInfoDecodingError: {
            code: "client_info_decoding_error",
            desc: "The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause."
        },
        clientInfoNotPopulatedError: {
            code: "client_info_not_populated_error",
            desc: "The service did not populate client_info in the response, Please verify with the service team"
        },
        nullOrEmptyIdToken: {
            code: "null_or_empty_id_token",
            desc: "The idToken is null or empty. Please review the trace to determine the root cause."
        },
        idTokenNotParsed: {
            code: "id_token_parsing_error",
            desc: "ID token cannot be parsed. Please review stack trace to determine root cause."
        },
        tokenEncodingError: {
            code: "token_encoding_error",
            desc: "The token to be decoded is not encoded correctly."
        },
        invalidInteractionType: {
            code: "invalid_interaction_type",
            desc: "The interaction type passed to the handler was incorrect or unknown"
        },
        cacheParseError: {
            code: "cannot_parse_cache",
            desc: "The cached token key is not a valid JSON and cannot be parsed"
        },
        blockTokenRequestsInHiddenIframe: {
            code: "block_token_requests",
            desc: "Token calls are blocked in hidden iframes"
        }
    };
    /**
     * Error thrown when there is an error in the client code running on the browser.
     */
    var ClientAuthError$1 = /** @class */ (function (_super) {
        __extends$2(ClientAuthError, _super);
        function ClientAuthError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            _this.name = "ClientAuthError";
            Object.setPrototypeOf(_this, ClientAuthError.prototype);
            return _this;
        }
        ClientAuthError.createEndpointResolutionError = function (errDetail) {
            var errorMessage = ClientAuthErrorMessage$1.endpointResolutionError.desc;
            if (errDetail && !StringUtils$1.isEmpty(errDetail)) {
                errorMessage += " Details: " + errDetail;
            }
            return new ClientAuthError(ClientAuthErrorMessage$1.endpointResolutionError.code, errorMessage);
        };
        ClientAuthError.createMultipleAuthoritiesInCacheError = function (scope) {
            return new ClientAuthError(ClientAuthErrorMessage$1.multipleCacheAuthorities.code, "Cache error for scope " + scope + ": " + ClientAuthErrorMessage$1.multipleCacheAuthorities.desc + ".");
        };
        ClientAuthError.createPopupWindowError = function (errDetail) {
            var errorMessage = ClientAuthErrorMessage$1.popUpWindowError.desc;
            if (errDetail && !StringUtils$1.isEmpty(errDetail)) {
                errorMessage += " Details: " + errDetail;
            }
            return new ClientAuthError(ClientAuthErrorMessage$1.popUpWindowError.code, errorMessage);
        };
        ClientAuthError.createTokenRenewalTimeoutError = function () {
            return new ClientAuthError(ClientAuthErrorMessage$1.tokenRenewalError.code, ClientAuthErrorMessage$1.tokenRenewalError.desc);
        };
        ClientAuthError.createInvalidIdTokenError = function (idToken) {
            return new ClientAuthError(ClientAuthErrorMessage$1.invalidIdToken.code, ClientAuthErrorMessage$1.invalidIdToken.desc + " Given token: " + idToken);
        };
        // TODO: Is this not a security flaw to send the user the state expected??
        ClientAuthError.createInvalidStateError = function (invalidState, actualState) {
            return new ClientAuthError(ClientAuthErrorMessage$1.invalidStateError.code, ClientAuthErrorMessage$1.invalidStateError.desc + " " + invalidState + ", state expected : " + actualState + ".");
        };
        // TODO: Is this not a security flaw to send the user the Nonce expected??
        ClientAuthError.createNonceMismatchError = function (invalidNonce, actualNonce) {
            return new ClientAuthError(ClientAuthErrorMessage$1.nonceMismatchError.code, ClientAuthErrorMessage$1.nonceMismatchError.desc + " " + invalidNonce + ", nonce expected : " + actualNonce + ".");
        };
        ClientAuthError.createLoginInProgressError = function () {
            return new ClientAuthError(ClientAuthErrorMessage$1.loginProgressError.code, ClientAuthErrorMessage$1.loginProgressError.desc);
        };
        ClientAuthError.createAcquireTokenInProgressError = function () {
            return new ClientAuthError(ClientAuthErrorMessage$1.acquireTokenProgressError.code, ClientAuthErrorMessage$1.acquireTokenProgressError.desc);
        };
        ClientAuthError.createUserCancelledError = function () {
            return new ClientAuthError(ClientAuthErrorMessage$1.userCancelledError.code, ClientAuthErrorMessage$1.userCancelledError.desc);
        };
        ClientAuthError.createErrorInCallbackFunction = function (errorDesc) {
            return new ClientAuthError(ClientAuthErrorMessage$1.callbackError.code, ClientAuthErrorMessage$1.callbackError.desc + " " + errorDesc + ".");
        };
        ClientAuthError.createUserLoginRequiredError = function () {
            return new ClientAuthError(ClientAuthErrorMessage$1.userLoginRequiredError.code, ClientAuthErrorMessage$1.userLoginRequiredError.desc);
        };
        ClientAuthError.createUserDoesNotExistError = function () {
            return new ClientAuthError(ClientAuthErrorMessage$1.userDoesNotExistError.code, ClientAuthErrorMessage$1.userDoesNotExistError.desc);
        };
        ClientAuthError.createClientInfoDecodingError = function (caughtError) {
            return new ClientAuthError(ClientAuthErrorMessage$1.clientInfoDecodingError.code, ClientAuthErrorMessage$1.clientInfoDecodingError.desc + " Failed with error: " + caughtError);
        };
        ClientAuthError.createClientInfoNotPopulatedError = function (caughtError) {
            return new ClientAuthError(ClientAuthErrorMessage$1.clientInfoNotPopulatedError.code, ClientAuthErrorMessage$1.clientInfoNotPopulatedError.desc + " Failed with error: " + caughtError);
        };
        ClientAuthError.createIdTokenNullOrEmptyError = function (invalidRawTokenString) {
            return new ClientAuthError(ClientAuthErrorMessage$1.nullOrEmptyIdToken.code, ClientAuthErrorMessage$1.nullOrEmptyIdToken.desc + " Raw ID Token Value: " + invalidRawTokenString);
        };
        ClientAuthError.createIdTokenParsingError = function (caughtParsingError) {
            return new ClientAuthError(ClientAuthErrorMessage$1.idTokenNotParsed.code, ClientAuthErrorMessage$1.idTokenNotParsed.desc + " Failed with error: " + caughtParsingError);
        };
        ClientAuthError.createTokenEncodingError = function (incorrectlyEncodedToken) {
            return new ClientAuthError(ClientAuthErrorMessage$1.tokenEncodingError.code, ClientAuthErrorMessage$1.tokenEncodingError.desc + " Attempted to decode: " + incorrectlyEncodedToken);
        };
        ClientAuthError.createInvalidInteractionTypeError = function () {
            return new ClientAuthError(ClientAuthErrorMessage$1.invalidInteractionType.code, ClientAuthErrorMessage$1.invalidInteractionType.desc);
        };
        ClientAuthError.createCacheParseError = function (key) {
            var errorMessage = "invalid key: " + key + ", " + ClientAuthErrorMessage$1.cacheParseError.desc;
            return new ClientAuthError(ClientAuthErrorMessage$1.cacheParseError.code, errorMessage);
        };
        ClientAuthError.createBlockTokenRequestsInHiddenIframeError = function () {
            return new ClientAuthError(ClientAuthErrorMessage$1.blockTokenRequestsInHiddenIframe.code, ClientAuthErrorMessage$1.blockTokenRequestsInHiddenIframe.desc);
        };
        return ClientAuthError;
    }(AuthError$1));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ClientConfigurationErrorMessage$1 = {
        configurationNotSet: {
            code: "no_config_set",
            desc: "Configuration has not been set. Please call the UserAgentApplication constructor with a valid Configuration object."
        },
        storageNotSupported: {
            code: "storage_not_supported",
            desc: "The value for the cacheLocation is not supported."
        },
        noRedirectCallbacksSet: {
            code: "no_redirect_callbacks",
            desc: "No redirect callbacks have been set. Please call handleRedirectCallback() with the appropriate function arguments before continuing. " +
                "More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
        },
        invalidCallbackObject: {
            code: "invalid_callback_object",
            desc: "The object passed for the callback was invalid. " +
                "More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
        },
        scopesRequired: {
            code: "scopes_required",
            desc: "Scopes are required to obtain an access token."
        },
        emptyScopes: {
            code: "empty_input_scopes_error",
            desc: "Scopes cannot be passed as empty array."
        },
        nonArrayScopes: {
            code: "nonarray_input_scopes_error",
            desc: "Scopes cannot be passed as non-array."
        },
        invalidPrompt: {
            code: "invalid_prompt_value",
            desc: "Supported prompt values are 'login', 'select_account', 'consent' and 'none'",
        },
        invalidAuthorityType: {
            code: "invalid_authority_type",
            desc: "The given authority is not a valid type of authority supported by MSAL. Please see here for valid authorities: <insert URL here>."
        },
        authorityUriInsecure: {
            code: "authority_uri_insecure",
            desc: "Authority URIs must use https."
        },
        authorityUriInvalidPath: {
            code: "authority_uri_invalid_path",
            desc: "Given authority URI is invalid."
        },
        unsupportedAuthorityValidation: {
            code: "unsupported_authority_validation",
            desc: "The authority validation is not supported for this authority type."
        },
        untrustedAuthority: {
            code: "untrusted_authority",
            desc: "The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter or set validateAuthority=false."
        },
        b2cAuthorityUriInvalidPath: {
            code: "b2c_authority_uri_invalid_path",
            desc: "The given URI for the B2C authority is invalid."
        },
        b2cKnownAuthoritiesNotSet: {
            code: "b2c_known_authorities_not_set",
            desc: "Must set known authorities when validateAuthority is set to True and using B2C"
        },
        claimsRequestParsingError: {
            code: "claims_request_parsing_error",
            desc: "Could not parse the given claims request object."
        },
        emptyRequestError: {
            code: "empty_request_error",
            desc: "Request object is required."
        },
        invalidCorrelationIdError: {
            code: "invalid_guid_sent_as_correlationId",
            desc: "Please set the correlationId as a valid guid"
        },
        telemetryConfigError: {
            code: "telemetry_config_error",
            desc: "Telemetry config is not configured with required values"
        },
        ssoSilentError: {
            code: "sso_silent_error",
            desc: "request must contain either sid or login_hint"
        },
        invalidAuthorityMetadataError: {
            code: "authority_metadata_error",
            desc: "Invalid authorityMetadata. Must be a JSON object containing authorization_endpoint, end_session_endpoint, and issuer fields."
        }
    };
    /**
     * Error thrown when there is an error in configuration of the .js library.
     */
    var ClientConfigurationError$1 = /** @class */ (function (_super) {
        __extends$2(ClientConfigurationError, _super);
        function ClientConfigurationError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            _this.name = "ClientConfigurationError";
            Object.setPrototypeOf(_this, ClientConfigurationError.prototype);
            return _this;
        }
        ClientConfigurationError.createNoSetConfigurationError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage$1.configurationNotSet.code, "" + ClientConfigurationErrorMessage$1.configurationNotSet.desc);
        };
        ClientConfigurationError.createStorageNotSupportedError = function (givenCacheLocation) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage$1.storageNotSupported.code, ClientConfigurationErrorMessage$1.storageNotSupported.desc + " Given location: " + givenCacheLocation);
        };
        ClientConfigurationError.createRedirectCallbacksNotSetError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage$1.noRedirectCallbacksSet.code, ClientConfigurationErrorMessage$1.noRedirectCallbacksSet.desc);
        };
        ClientConfigurationError.createInvalidCallbackObjectError = function (callbackObject) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage$1.invalidCallbackObject.code, ClientConfigurationErrorMessage$1.invalidCallbackObject.desc + " Given value for callback function: " + callbackObject);
        };
        ClientConfigurationError.createEmptyScopesArrayError = function (scopesValue) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage$1.emptyScopes.code, ClientConfigurationErrorMessage$1.emptyScopes.desc + " Given value: " + scopesValue + ".");
        };
        ClientConfigurationError.createScopesNonArrayError = function (scopesValue) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage$1.nonArrayScopes.code, ClientConfigurationErrorMessage$1.nonArrayScopes.desc + " Given value: " + scopesValue + ".");
        };
        ClientConfigurationError.createScopesRequiredError = function (scopesValue) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage$1.scopesRequired.code, ClientConfigurationErrorMessage$1.scopesRequired.desc + " Given value: " + scopesValue);
        };
        ClientConfigurationError.createInvalidPromptError = function (promptValue) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage$1.invalidPrompt.code, ClientConfigurationErrorMessage$1.invalidPrompt.desc + " Given value: " + promptValue);
        };
        ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage$1.claimsRequestParsingError.code, ClientConfigurationErrorMessage$1.claimsRequestParsingError.desc + " Given value: " + claimsRequestParseError);
        };
        ClientConfigurationError.createEmptyRequestError = function () {
            var _a = ClientConfigurationErrorMessage$1.emptyRequestError, code = _a.code, desc = _a.desc;
            return new ClientConfigurationError(code, desc);
        };
        ClientConfigurationError.createInvalidCorrelationIdError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage$1.invalidCorrelationIdError.code, ClientConfigurationErrorMessage$1.invalidCorrelationIdError.desc);
        };
        ClientConfigurationError.createKnownAuthoritiesNotSetError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage$1.b2cKnownAuthoritiesNotSet.code, ClientConfigurationErrorMessage$1.b2cKnownAuthoritiesNotSet.desc);
        };
        ClientConfigurationError.createInvalidAuthorityTypeError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage$1.invalidAuthorityType.code, ClientConfigurationErrorMessage$1.invalidAuthorityType.desc);
        };
        ClientConfigurationError.createUntrustedAuthorityError = function (host) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage$1.untrustedAuthority.code, ClientConfigurationErrorMessage$1.untrustedAuthority.desc + " Provided Authority: " + host);
        };
        ClientConfigurationError.createTelemetryConfigError = function (config) {
            var _a = ClientConfigurationErrorMessage$1.telemetryConfigError, code = _a.code, desc = _a.desc;
            var requiredKeys = {
                applicationName: "string",
                applicationVersion: "string",
                telemetryEmitter: "function"
            };
            var missingKeys = Object.keys(requiredKeys)
                .reduce(function (keys, key) {
                return config[key] ? keys : keys.concat([key + " (" + requiredKeys[key] + ")"]);
            }, []);
            return new ClientConfigurationError(code, desc + " mising values: " + missingKeys.join(","));
        };
        ClientConfigurationError.createSsoSilentError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage$1.ssoSilentError.code, ClientConfigurationErrorMessage$1.ssoSilentError.desc);
        };
        ClientConfigurationError.createInvalidAuthorityMetadataError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage$1.invalidAuthorityMetadataError.code, ClientConfigurationErrorMessage$1.invalidAuthorityMetadataError.desc);
        };
        return ClientConfigurationError;
    }(ClientAuthError$1));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ScopeSet$1 = /** @class */ (function () {
        function ScopeSet() {
        }
        /**
         * Check if there are dup scopes in a given request
         *
         * @param cachedScopes
         * @param scopes
         */
        // TODO: Rename this, intersecting scopes isn't a great name for duplicate checker
        ScopeSet.isIntersectingScopes = function (cachedScopes, scopes) {
            var convertedCachedScopes = this.trimAndConvertArrayToLowerCase(cachedScopes.slice());
            var requestScopes = this.trimAndConvertArrayToLowerCase(scopes.slice());
            for (var i = 0; i < requestScopes.length; i++) {
                if (convertedCachedScopes.indexOf(requestScopes[i].toLowerCase()) > -1) {
                    return true;
                }
            }
            return false;
        };
        /**
         * Check if a given scope is present in the request
         *
         * @param cachedScopes
         * @param scopes
         */
        ScopeSet.containsScope = function (cachedScopes, scopes) {
            var convertedCachedScopes = this.trimAndConvertArrayToLowerCase(cachedScopes.slice());
            var requestScopes = this.trimAndConvertArrayToLowerCase(scopes.slice());
            return requestScopes.every(function (value) { return convertedCachedScopes.indexOf(value.toString().toLowerCase()) >= 0; });
        };
        /**
         *  Trims and converts string to lower case
         *
         * @param scopes
         */
        // TODO: Rename this, too generic name for a function that only deals with scopes
        ScopeSet.trimAndConvertToLowerCase = function (scope) {
            return scope.trim().toLowerCase();
        };
        /**
         * Performs trimAndConvertToLowerCase on string array
         * @param scopes
         */
        ScopeSet.trimAndConvertArrayToLowerCase = function (scopes) {
            var _this = this;
            return scopes.map(function (scope) { return _this.trimAndConvertToLowerCase(scope); });
        };
        /**
         * Trims each scope in scopes array
         * @param scopes
         */
        ScopeSet.trimScopes = function (scopes) {
            return scopes.map(function (scope) { return scope.trim(); });
        };
        /**
         * Remove one element from a scope array
         *
         * @param scopes
         * @param scope
         */
        // TODO: Rename this, too generic name for a function that only deals with scopes
        ScopeSet.removeElement = function (scopes, scope) {
            var scopeVal = this.trimAndConvertToLowerCase(scope);
            return scopes.filter(function (value) { return value !== scopeVal; });
        };
        /**
         * Parse the scopes into a formatted scopeList
         * @param scopes
         */
        ScopeSet.parseScope = function (scopes) {
            var scopeList = "";
            if (scopes) {
                for (var i = 0; i < scopes.length; ++i) {
                    scopeList += (i !== scopes.length - 1) ? scopes[i] + " " : scopes[i];
                }
            }
            return scopeList;
        };
        /**
         * @hidden
         *
         * Used to validate the scopes input parameter requested  by the developer.
         * @param {Array<string>} scopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.
         * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not
         * @ignore
         */
        ScopeSet.validateInputScope = function (scopes, scopesRequired) {
            if (!scopes) {
                if (scopesRequired) {
                    throw ClientConfigurationError$1.createScopesRequiredError(scopes);
                }
                else {
                    return;
                }
            }
            // Check that scopes is an array object (also throws error if scopes == null)
            if (!Array.isArray(scopes)) {
                throw ClientConfigurationError$1.createScopesNonArrayError(scopes);
            }
            // Check that scopes is not an empty array
            if (scopes.length < 1 && scopesRequired) {
                throw ClientConfigurationError$1.createEmptyScopesArrayError(scopes.toString());
            }
        };
        /**
         * @hidden
         *
         * Extracts scope value from the state sent with the authentication request.
         * @param {string} state
         * @returns {string} scope.
         * @ignore
         */
        ScopeSet.getScopeFromState = function (state) {
            if (state) {
                var splitIndex = state.indexOf(Constants$2.resourceDelimiter);
                if (splitIndex > -1 && splitIndex + 1 < state.length) {
                    return state.substring(splitIndex + 1);
                }
            }
            return "";
        };
        /**
         * @ignore
         * Appends extraScopesToConsent if passed
         * @param {@link AuthenticationParameters}
         */
        ScopeSet.appendScopes = function (reqScopes, reqExtraScopesToConsent) {
            if (reqScopes) {
                var convertedExtraScopes = reqExtraScopesToConsent ? this.trimAndConvertArrayToLowerCase(reqExtraScopesToConsent.slice()) : null;
                var convertedReqScopes = this.trimAndConvertArrayToLowerCase(reqScopes.slice());
                return convertedExtraScopes ? convertedReqScopes.concat(convertedExtraScopes) : convertedReqScopes;
            }
            return null;
        };
        // #endregion
        /**
         * @ignore
         * Returns true if the scopes array only contains openid and/or profile
         */
        ScopeSet.onlyContainsOidcScopes = function (scopes) {
            var scopesCount = scopes.length;
            var oidcScopesFound = 0;
            if (scopes.indexOf(Constants$2.openidScope) > -1) {
                oidcScopesFound += 1;
            }
            if (scopes.indexOf(Constants$2.profileScope) > -1) {
                oidcScopesFound += 1;
            }
            return (scopesCount > 0 && scopesCount === oidcScopesFound);
        };
        /**
         * @ignore
         * Returns true if the scopes array only contains openid and/or profile
         */
        ScopeSet.containsAnyOidcScopes = function (scopes) {
            var containsOpenIdScope = scopes.indexOf(Constants$2.openidScope) > -1;
            var containsProfileScope = scopes.indexOf(Constants$2.profileScope) > -1;
            return (containsOpenIdScope || containsProfileScope);
        };
        /**
         * @ignore
         * Returns true if the clientId is the only scope in the array
         */
        ScopeSet.onlyContainsClientId = function (scopes, clientId) {
            // Double negation to force false value returned in case scopes is null
            return !!scopes && (scopes.indexOf(clientId) > -1 && scopes.length === 1);
        };
        /**
         * @ignore
         * Adds missing OIDC scopes to scopes array without duplication. Since STS requires OIDC scopes for
         * all implicit flow requests, 'openid' and 'profile' should always be included in the final request
         */
        ScopeSet.appendDefaultScopes = function (scopes) {
            var extendedScopes = scopes;
            if (extendedScopes.indexOf(Constants$2.openidScope) === -1) {
                extendedScopes.push(Constants$2.openidScope);
            }
            if (extendedScopes.indexOf(Constants$2.profileScope) === -1) {
                extendedScopes.push(Constants$2.profileScope);
            }
            return extendedScopes;
        };
        /**
         * @ignore
         * Removes present OIDC scopes from scopes array.
         */
        ScopeSet.removeDefaultScopes = function (scopes) {
            return scopes.filter(function (scope) {
                return (scope !== Constants$2.openidScope && scope !== Constants$2.profileScope);
            });
        };
        /**
         * @ignore
         * Removes clientId from scopes array if included as only scope. If it's not the only scope, it is treated as a resource scope.
         * @param scopes Array<string>: Pre-normalized scopes array
         * @param clientId string: The application's clientId that is searched for in the scopes array
         */
        ScopeSet.translateClientIdIfSingleScope = function (scopes, clientId) {
            return this.onlyContainsClientId(scopes, clientId) ? Constants$2.oidcScopes : scopes;
        };
        return ScopeSet;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var UrlUtils = /** @class */ (function () {
        function UrlUtils() {
        }
        /**
         * generates the URL with QueryString Parameters
         * @param scopes
         */
        UrlUtils.createNavigateUrl = function (serverRequestParams) {
            var str = this.createNavigationUrlString(serverRequestParams);
            var authEndpoint = serverRequestParams.authorityInstance.AuthorizationEndpoint;
            // if the endpoint already has queryparams, lets add to it, otherwise add the first one
            if (authEndpoint.indexOf("?") < 0) {
                authEndpoint += "?";
            }
            else {
                authEndpoint += "&";
            }
            var requestUrl = "" + authEndpoint + str.join("&");
            return requestUrl;
        };
        /**
         * Generate the array of all QueryStringParams to be sent to the server
         * @param scopes
         */
        UrlUtils.createNavigationUrlString = function (serverRequestParams) {
            var scopes = ScopeSet$1.appendDefaultScopes(serverRequestParams.scopes);
            var str = [];
            str.push("response_type=" + serverRequestParams.responseType);
            str.push("scope=" + encodeURIComponent(ScopeSet$1.parseScope(scopes)));
            str.push("client_id=" + encodeURIComponent(serverRequestParams.clientId));
            str.push("redirect_uri=" + encodeURIComponent(serverRequestParams.redirectUri));
            str.push("state=" + encodeURIComponent(serverRequestParams.state));
            str.push("nonce=" + encodeURIComponent(serverRequestParams.nonce));
            str.push("client_info=1");
            str.push("x-client-SKU=" + serverRequestParams.xClientSku);
            str.push("x-client-Ver=" + serverRequestParams.xClientVer);
            if (serverRequestParams.promptValue) {
                str.push("prompt=" + encodeURIComponent(serverRequestParams.promptValue));
            }
            if (serverRequestParams.claimsValue) {
                str.push("claims=" + encodeURIComponent(serverRequestParams.claimsValue));
            }
            if (serverRequestParams.queryParameters) {
                str.push(serverRequestParams.queryParameters);
            }
            if (serverRequestParams.extraQueryParameters) {
                str.push(serverRequestParams.extraQueryParameters);
            }
            str.push("client-request-id=" + encodeURIComponent(serverRequestParams.correlationId));
            return str;
        };
        /**
         * Returns current window URL as redirect uri
         */
        UrlUtils.getCurrentUrl = function () {
            return window.location.href.split("?")[0].split("#")[0];
        };
        /**
         * Returns given URL with query string removed
         */
        UrlUtils.removeHashFromUrl = function (url) {
            return url.split("#")[0];
        };
        /**
         * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d
         * @param href The url
         * @param tenantId The tenant id to replace
         */
        UrlUtils.replaceTenantPath = function (url, tenantId) {
            var lowerCaseUrl = url.toLowerCase();
            var urlObject = this.GetUrlComponents(lowerCaseUrl);
            var pathArray = urlObject.PathSegments;
            if (tenantId && (pathArray.length !== 0 && (pathArray[0] === Constants$2.common || pathArray[0] === SSOTypes$1.ORGANIZATIONS))) {
                pathArray[0] = tenantId;
            }
            return this.constructAuthorityUriFromObject(urlObject, pathArray);
        };
        UrlUtils.constructAuthorityUriFromObject = function (urlObject, pathArray) {
            return this.CanonicalizeUri(urlObject.Protocol + "//" + urlObject.HostNameAndPort + "/" + pathArray.join("/"));
        };
        /**
         * Checks if an authority is common (ex. https://a:b/common/)
         * @param url The url
         * @returns true if authority is common and false otherwise
         */
        UrlUtils.isCommonAuthority = function (url) {
            var authority = this.CanonicalizeUri(url);
            var pathArray = this.GetUrlComponents(authority).PathSegments;
            return (pathArray.length !== 0 && pathArray[0] === Constants$2.common);
        };
        /**
         * Checks if an authority is for organizations (ex. https://a:b/organizations/)
         * @param url The url
         * @returns true if authority is for  and false otherwise
         */
        UrlUtils.isOrganizationsAuthority = function (url) {
            var authority = this.CanonicalizeUri(url);
            var pathArray = this.GetUrlComponents(authority).PathSegments;
            return (pathArray.length !== 0 && pathArray[0] === SSOTypes$1.ORGANIZATIONS);
        };
        /**
         * Parses out the components from a url string.
         * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.
         */
        UrlUtils.GetUrlComponents = function (url) {
            if (!url) {
                throw "Url required";
            }
            // https://gist.github.com/curtisz/11139b2cfcaef4a261e0
            var regEx = RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?");
            var match = url.match(regEx);
            if (!match || match.length < 6) {
                throw "Valid url required";
            }
            var urlComponents = {
                Protocol: match[1],
                HostNameAndPort: match[4],
                AbsolutePath: match[5]
            };
            var pathSegments = urlComponents.AbsolutePath.split("/");
            pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements
            urlComponents.PathSegments = pathSegments;
            if (match[6]) {
                urlComponents.Search = match[6];
            }
            if (match[8]) {
                urlComponents.Hash = match[8];
            }
            return urlComponents;
        };
        /**
         * Given a url or path, append a trailing slash if one doesnt exist
         *
         * @param url
         */
        UrlUtils.CanonicalizeUri = function (url) {
            if (url) {
                url = url.toLowerCase();
            }
            if (url && !UrlUtils.endsWith(url, "/")) {
                url += "/";
            }
            return url;
        };
        /**
         * Checks to see if the url ends with the suffix
         * Required because we are compiling for es5 instead of es6
         * @param url
         * @param str
         */
        // TODO: Rename this, not clear what it is supposed to do
        UrlUtils.endsWith = function (url, suffix) {
            if (!url || !suffix) {
                return false;
            }
            return url.indexOf(suffix, url.length - suffix.length) !== -1;
        };
        /**
         * Utils function to remove the login_hint and domain_hint from the i/p extraQueryParameters
         * @param url
         * @param name
         */
        UrlUtils.urlRemoveQueryStringParameter = function (url, name) {
            if (StringUtils$1.isEmpty(url)) {
                return url;
            }
            var regex = new RegExp("(\\&" + name + "=)[^\&]+");
            url = url.replace(regex, "");
            // name=value&
            regex = new RegExp("(" + name + "=)[^\&]+&");
            url = url.replace(regex, "");
            // name=value
            regex = new RegExp("(" + name + "=)[^\&]+");
            url = url.replace(regex, "");
            return url;
        };
        /**
         * @hidden
         * @ignore
         *
         * Returns the anchor part(#) of the URL
         */
        UrlUtils.getHashFromUrl = function (urlStringOrFragment) {
            var hashIndex1 = urlStringOrFragment.indexOf("#");
            var hashIndex2 = urlStringOrFragment.indexOf("#/");
            if (hashIndex2 > -1) {
                return urlStringOrFragment.substring(hashIndex2 + 2);
            }
            else if (hashIndex1 > -1) {
                return urlStringOrFragment.substring(hashIndex1 + 1);
            }
            return urlStringOrFragment;
        };
        /**
         * @hidden
         * Check if the url contains a hash with known properties
         * @ignore
         */
        UrlUtils.urlContainsHash = function (urlString) {
            var parameters = UrlUtils.deserializeHash(urlString);
            return (parameters.hasOwnProperty(ServerHashParamKeys.ERROR_DESCRIPTION) ||
                parameters.hasOwnProperty(ServerHashParamKeys.ERROR) ||
                parameters.hasOwnProperty(ServerHashParamKeys.ACCESS_TOKEN) ||
                parameters.hasOwnProperty(ServerHashParamKeys.ID_TOKEN));
        };
        /**
         * @hidden
         * Returns deserialized portion of URL hash
         * @ignore
         */
        UrlUtils.deserializeHash = function (urlFragment) {
            var hash = UrlUtils.getHashFromUrl(urlFragment);
            return CryptoUtils.deserialize(hash);
        };
        /**
         * @ignore
         * @param {string} URI
         * @returns {string} host from the URI
         *
         * extract URI from the host
         */
        UrlUtils.getHostFromUri = function (uri) {
            // remove http:// or https:// from uri
            var extractedUri = String(uri).replace(/^(https?:)\/\//, "");
            extractedUri = extractedUri.split("/")[0];
            return extractedUri;
        };
        return UrlUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var AccessTokenKey = /** @class */ (function () {
        function AccessTokenKey(authority, clientId, scopes, uid, utid) {
            this.authority = UrlUtils.CanonicalizeUri(authority);
            this.clientId = clientId;
            this.scopes = scopes;
            this.homeAccountIdentifier = CryptoUtils.base64Encode(uid) + "." + CryptoUtils.base64Encode(utid);
        }
        return AccessTokenKey;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var AccessTokenValue = /** @class */ (function () {
        function AccessTokenValue(accessToken, idToken, expiresIn, homeAccountIdentifier) {
            this.accessToken = accessToken;
            this.idToken = idToken;
            this.expiresIn = expiresIn;
            this.homeAccountIdentifier = homeAccountIdentifier;
        }
        return AccessTokenValue;
    }());

    /* eslint-disable header/header */
    var name$2 = "msal";
    var version$2 = "1.4.6";

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Nonce: OIDC Nonce definition: https://openid.net/specs/openid-connect-core-1_0.html#IDToken
     * State: OAuth Spec: https://tools.ietf.org/html/rfc6749#section-10.12
     * @hidden
     */
    var ServerRequestParameters = /** @class */ (function () {
        /**
         * Constructor
         * @param authority
         * @param clientId
         * @param scope
         * @param responseType
         * @param redirectUri
         * @param state
         */
        function ServerRequestParameters(authority, clientId, responseType, redirectUri, scopes, state, correlationId) {
            this.authorityInstance = authority;
            this.clientId = clientId;
            this.nonce = CryptoUtils.createNewGuid();
            // set scope to clientId if null
            this.scopes = scopes ? scopes.slice() : Constants$2.oidcScopes;
            this.scopes = ScopeSet$1.trimScopes(this.scopes);
            // set state (already set at top level)
            this.state = state;
            // set correlationId
            this.correlationId = correlationId;
            // telemetry information
            this.xClientSku = "MSAL.JS";
            this.xClientVer = name$2;
            this.responseType = responseType;
            this.redirectUri = redirectUri;
        }
        Object.defineProperty(ServerRequestParameters.prototype, "authority", {
            get: function () {
                return this.authorityInstance ? this.authorityInstance.CanonicalAuthority : null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @hidden
         * @ignore
         *
         * Utility to populate QueryParameters and ExtraQueryParameters to ServerRequestParamerers
         * @param request
         * @param serverAuthenticationRequest
         */
        ServerRequestParameters.prototype.populateQueryParams = function (account, request, adalIdTokenObject, silentCall) {
            var queryParameters = {};
            if (request) {
                // add the prompt parameter to serverRequestParameters if passed
                if (request.prompt) {
                    this.promptValue = request.prompt;
                }
                // Add claims challenge to serverRequestParameters if passed
                if (request.claimsRequest) {
                    this.claimsValue = request.claimsRequest;
                }
                // if the developer provides one of these, give preference to developer choice
                if (ServerRequestParameters.isSSOParam(request)) {
                    queryParameters = this.constructUnifiedCacheQueryParameter(request, null);
                }
            }
            if (adalIdTokenObject) {
                queryParameters = this.constructUnifiedCacheQueryParameter(null, adalIdTokenObject);
            }
            /*
             * adds sid/login_hint if not populated
             * this.logger.verbose("Calling addHint parameters");
             */
            queryParameters = this.addHintParameters(account, queryParameters);
            // sanity check for developer passed extraQueryParameters
            var eQParams = request ? request.extraQueryParameters : null;
            // Populate the extraQueryParameters to be sent to the server
            this.queryParameters = ServerRequestParameters.generateQueryParametersString(queryParameters);
            this.extraQueryParameters = ServerRequestParameters.generateQueryParametersString(eQParams, silentCall);
        };
        // #region QueryParam helpers
        /**
         * Constructs extraQueryParameters to be sent to the server for the AuthenticationParameters set by the developer
         * in any login() or acquireToken() calls
         * @param idTokenObject
         * @param extraQueryParameters
         * @param sid
         * @param loginHint
         */
        // TODO: check how this behaves when domain_hint only is sent in extraparameters and idToken has no upn.
        ServerRequestParameters.prototype.constructUnifiedCacheQueryParameter = function (request, idTokenObject) {
            // preference order: account > sid > login_hint
            var ssoType;
            var ssoData;
            var serverReqParam = {};
            // if account info is passed, account.sid > account.login_hint
            if (request) {
                if (request.account) {
                    var account = request.account;
                    if (account.sid) {
                        ssoType = SSOTypes$1.SID;
                        ssoData = account.sid;
                    }
                    else if (account.userName) {
                        ssoType = SSOTypes$1.LOGIN_HINT;
                        ssoData = account.userName;
                    }
                }
                // sid from request
                else if (request.sid) {
                    ssoType = SSOTypes$1.SID;
                    ssoData = request.sid;
                }
                // loginHint from request
                else if (request.loginHint) {
                    ssoType = SSOTypes$1.LOGIN_HINT;
                    ssoData = request.loginHint;
                }
            }
            // adalIdToken retrieved from cache
            else if (idTokenObject) {
                if (idTokenObject.hasOwnProperty(Constants$2.upn)) {
                    ssoType = SSOTypes$1.ID_TOKEN;
                    ssoData = idTokenObject.upn;
                }
            }
            serverReqParam = this.addSSOParameter(ssoType, ssoData);
            return serverReqParam;
        };
        /**
         * @hidden
         *
         * Adds login_hint to authorization URL which is used to pre-fill the username field of sign in page for the user if known ahead of time
         * domain_hint if added skips the email based discovery process of the user - only supported for interactive calls in implicit_flow
         * domain_req utid received as part of the clientInfo
         * login_req uid received as part of clientInfo
         * Also does a sanity check for extraQueryParameters passed by the user to ensure no repeat queryParameters
         *
         * @param {@link Account} account - Account for which the token is requested
         * @param queryparams
         * @param {@link ServerRequestParameters}
         * @ignore
         */
        ServerRequestParameters.prototype.addHintParameters = function (account, qParams) {
            /*
             * This is a final check for all queryParams added so far; preference order: sid > login_hint
             * sid cannot be passed along with login_hint or domain_hint, hence we check both are not populated yet in queryParameters
             */
            if (account && !qParams[SSOTypes$1.SID]) {
                // sid - populate only if login_hint is not already populated and the account has sid
                var populateSID = !qParams[SSOTypes$1.LOGIN_HINT] && account.sid && this.promptValue === PromptState.NONE;
                if (populateSID) {
                    qParams = this.addSSOParameter(SSOTypes$1.SID, account.sid, qParams);
                }
                // login_hint - account.userName
                else {
                    var populateLoginHint = !qParams[SSOTypes$1.LOGIN_HINT] && account.userName && !StringUtils$1.isEmpty(account.userName);
                    if (populateLoginHint) {
                        qParams = this.addSSOParameter(SSOTypes$1.LOGIN_HINT, account.userName, qParams);
                    }
                }
            }
            return qParams;
        };
        /**
         * Add SID to extraQueryParameters
         * @param sid
         */
        ServerRequestParameters.prototype.addSSOParameter = function (ssoType, ssoData, ssoParam) {
            if (!ssoParam) {
                ssoParam = {};
            }
            if (!ssoData) {
                return ssoParam;
            }
            switch (ssoType) {
                case SSOTypes$1.SID: {
                    ssoParam[SSOTypes$1.SID] = ssoData;
                    break;
                }
                case SSOTypes$1.ID_TOKEN: {
                    ssoParam[SSOTypes$1.LOGIN_HINT] = ssoData;
                    break;
                }
                case SSOTypes$1.LOGIN_HINT: {
                    ssoParam[SSOTypes$1.LOGIN_HINT] = ssoData;
                    break;
                }
            }
            return ssoParam;
        };
        /**
         * Utility to generate a QueryParameterString from a Key-Value mapping of extraQueryParameters passed
         * @param extraQueryParameters
         */
        ServerRequestParameters.generateQueryParametersString = function (queryParameters, silentCall) {
            var paramsString = null;
            if (queryParameters) {
                Object.keys(queryParameters).forEach(function (key) {
                    // sid cannot be passed along with login_hint or domain_hint
                    if (key === Constants$2.domain_hint && (silentCall || queryParameters[SSOTypes$1.SID])) {
                        return;
                    }
                    if (!paramsString) {
                        paramsString = key + "=" + encodeURIComponent(queryParameters[key]);
                    }
                    else {
                        paramsString += "&" + key + "=" + encodeURIComponent(queryParameters[key]);
                    }
                });
            }
            return paramsString;
        };
        // #endregion
        /**
         * Check to see if there are SSO params set in the Request
         * @param request
         */
        ServerRequestParameters.isSSOParam = function (request) {
            return request && (request.account || request.sid || request.loginHint);
        };
        /**
         * Returns the correct response_type string attribute for an acquireToken request configuration
         * @param accountsMatch boolean: Determines whether the account in the request matches the cached account
         * @param scopes Array<string>: AuthenticationRequest scopes configuration
         * @param loginScopesOnly boolean: True if the scopes array ONLY contains the clientId or any combination of OIDC scopes, without resource scopes
         */
        ServerRequestParameters.determineResponseType = function (accountsMatch, scopes) {
            // Supports getting an id_token by sending in clientId as only scope or OIDC scopes as only scopes
            if (ScopeSet$1.onlyContainsOidcScopes(scopes)) {
                return ResponseTypes.id_token;
            }
            // If accounts match, check if OIDC scopes are included, otherwise return id_token_token
            return (accountsMatch) ? this.responseTypeForMatchingAccounts(scopes) : ResponseTypes.id_token_token;
        };
        /**
         * Returns the correct response_type string attribute for an acquireToken request configuration that contains an
         * account that matches the account in the MSAL cache.
         * @param scopes Array<string>: AuthenticationRequest scopes configuration
         */
        ServerRequestParameters.responseTypeForMatchingAccounts = function (scopes) {
            // Opt-into also requesting an ID token by sending in 'openid', 'profile' or both along with resource scopes when login is not necessary.
            return (ScopeSet$1.containsAnyOidcScopes(scopes)) ? ResponseTypes.id_token_token : ResponseTypes.token;
        };
        return ServerRequestParameters;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * XHR client for JSON endpoints
     * https://www.npmjs.com/package/async-promise
     * @hidden
     */
    var XhrClient$1 = /** @class */ (function () {
        function XhrClient() {
        }
        XhrClient.prototype.sendRequestAsync = function (url, method, enableCaching) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var xhr = new XMLHttpRequest();
                xhr.open(method, url, /* async: */ true);
                xhr.onload = function () {
                    if (xhr.status < 200 || xhr.status >= 300) {
                        reject(_this.handleError(xhr.responseText));
                    }
                    var jsonResponse;
                    try {
                        jsonResponse = JSON.parse(xhr.responseText);
                    }
                    catch (e) {
                        reject(_this.handleError(xhr.responseText));
                    }
                    var response = {
                        statusCode: xhr.status,
                        body: jsonResponse
                    };
                    resolve(response);
                };
                xhr.onerror = function () {
                    reject(xhr.status);
                };
                if (method === NetworkRequestType.GET) {
                    xhr.send();
                }
                else {
                    throw "not implemented";
                }
            });
        };
        XhrClient.prototype.handleError = function (responseText) {
            var jsonResponse;
            try {
                jsonResponse = JSON.parse(responseText);
                if (jsonResponse.error) {
                    return jsonResponse.error;
                }
                else {
                    throw responseText;
                }
            }
            catch (e) {
                return responseText;
            }
        };
        return XhrClient;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var TrustedAuthority$1 = /** @class */ (function () {
        function TrustedAuthority() {
        }
        /**
         *
         * @param validateAuthority
         * @param knownAuthorities
         */
        TrustedAuthority.setTrustedAuthoritiesFromConfig = function (validateAuthority, knownAuthorities) {
            if (validateAuthority && !this.getTrustedHostList().length) {
                knownAuthorities.forEach(function (authority) {
                    TrustedAuthority.TrustedHostList.push(authority.toLowerCase());
                });
            }
        };
        /**
         *
         * @param telemetryManager
         * @param correlationId
         */
        TrustedAuthority.getAliases = function (authorityToVerify, telemetryManager, correlationId) {
            return __awaiter$2(this, void 0, void 0, function () {
                var client, httpMethod, instanceDiscoveryEndpoint, httpEvent;
                return __generator$2(this, function (_a) {
                    client = new XhrClient$1();
                    httpMethod = NetworkRequestType.GET;
                    instanceDiscoveryEndpoint = "" + AAD_INSTANCE_DISCOVERY_ENDPOINT + authorityToVerify + "oauth2/v2.0/authorize";
                    httpEvent = telemetryManager.createAndStartHttpEvent(correlationId, httpMethod, instanceDiscoveryEndpoint, "getAliases");
                    return [2 /*return*/, client.sendRequestAsync(instanceDiscoveryEndpoint, httpMethod, true)
                            .then(function (response) {
                            httpEvent.httpResponseStatus = response.statusCode;
                            telemetryManager.stopEvent(httpEvent);
                            return response.body.metadata;
                        })
                            .catch(function (err) {
                            httpEvent.serverErrorCode = err;
                            telemetryManager.stopEvent(httpEvent);
                            throw err;
                        })];
                });
            });
        };
        /**
         *
         * @param telemetryManager
         * @param correlationId
         */
        TrustedAuthority.setTrustedAuthoritiesFromNetwork = function (authorityToVerify, telemetryManager, correlationId) {
            return __awaiter$2(this, void 0, void 0, function () {
                var metadata, host;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getAliases(authorityToVerify, telemetryManager, correlationId)];
                        case 1:
                            metadata = _a.sent();
                            metadata.forEach(function (entry) {
                                var authorities = entry.aliases;
                                authorities.forEach(function (authority) {
                                    TrustedAuthority.TrustedHostList.push(authority.toLowerCase());
                                });
                            });
                            host = UrlUtils.GetUrlComponents(authorityToVerify).HostNameAndPort;
                            if (TrustedAuthority.getTrustedHostList().length && !TrustedAuthority.IsInTrustedHostList(host)) {
                                // Custom Domain scenario, host is trusted because Instance Discovery call succeeded
                                TrustedAuthority.TrustedHostList.push(host.toLowerCase());
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        TrustedAuthority.getTrustedHostList = function () {
            return this.TrustedHostList;
        };
        /**
         * Checks to see if the host is in a list of trusted hosts
         * @param host
         */
        TrustedAuthority.IsInTrustedHostList = function (host) {
            return this.TrustedHostList.indexOf(host.toLowerCase()) > -1;
        };
        TrustedAuthority.TrustedHostList = [];
        return TrustedAuthority;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var AuthorityType$1;
    (function (AuthorityType) {
        AuthorityType[AuthorityType["Default"] = 0] = "Default";
        AuthorityType[AuthorityType["Adfs"] = 1] = "Adfs";
    })(AuthorityType$1 || (AuthorityType$1 = {}));
    /**
     * @hidden
     */
    var Authority$1 = /** @class */ (function () {
        function Authority(authority, validateAuthority, authorityMetadata) {
            this.IsValidationEnabled = validateAuthority;
            this.CanonicalAuthority = authority;
            this.validateAsUri();
            this.tenantDiscoveryResponse = authorityMetadata;
        }
        Authority.isAdfs = function (authorityUrl) {
            var components = UrlUtils.GetUrlComponents(authorityUrl);
            var pathSegments = components.PathSegments;
            return (pathSegments.length && pathSegments[0].toLowerCase() === Constants$2.ADFS);
        };
        Object.defineProperty(Authority.prototype, "AuthorityType", {
            get: function () {
                return Authority.isAdfs(this.canonicalAuthority) ? AuthorityType$1.Adfs : AuthorityType$1.Default;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "Tenant", {
            get: function () {
                return this.CanonicalAuthorityUrlComponents.PathSegments[0];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "AuthorizationEndpoint", {
            get: function () {
                this.validateResolved();
                return this.tenantDiscoveryResponse.AuthorizationEndpoint.replace(/{tenant}|{tenantid}/g, this.Tenant);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "EndSessionEndpoint", {
            get: function () {
                this.validateResolved();
                return this.tenantDiscoveryResponse.EndSessionEndpoint.replace(/{tenant}|{tenantid}/g, this.Tenant);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "SelfSignedJwtAudience", {
            get: function () {
                this.validateResolved();
                return this.tenantDiscoveryResponse.Issuer.replace(/{tenant}|{tenantid}/g, this.Tenant);
            },
            enumerable: true,
            configurable: true
        });
        Authority.prototype.validateResolved = function () {
            if (!this.hasCachedMetadata()) {
                throw "Please call ResolveEndpointsAsync first";
            }
        };
        Object.defineProperty(Authority.prototype, "CanonicalAuthority", {
            /**
             * A URL that is the authority set by the developer
             */
            get: function () {
                return this.canonicalAuthority;
            },
            set: function (url) {
                this.canonicalAuthority = UrlUtils.CanonicalizeUri(url);
                this.canonicalAuthorityUrlComponents = null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "CanonicalAuthorityUrlComponents", {
            get: function () {
                if (!this.canonicalAuthorityUrlComponents) {
                    this.canonicalAuthorityUrlComponents = UrlUtils.GetUrlComponents(this.CanonicalAuthority);
                }
                return this.canonicalAuthorityUrlComponents;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "DefaultOpenIdConfigurationEndpoint", {
            // http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata
            get: function () {
                return (this.AuthorityType === AuthorityType$1.Adfs) ? "" + this.CanonicalAuthority + WELL_KNOWN_SUFFIX : this.CanonicalAuthority + "v2.0/" + WELL_KNOWN_SUFFIX;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Given a string, validate that it is of the form https://domain/path
         */
        Authority.prototype.validateAsUri = function () {
            var components;
            try {
                components = this.CanonicalAuthorityUrlComponents;
            }
            catch (e) {
                throw ClientConfigurationErrorMessage$1.invalidAuthorityType;
            }
            if (!components.Protocol || components.Protocol.toLowerCase() !== "https:") {
                throw ClientConfigurationErrorMessage$1.authorityUriInsecure;
            }
            if (!components.PathSegments || components.PathSegments.length < 1) {
                throw ClientConfigurationErrorMessage$1.authorityUriInvalidPath;
            }
        };
        /**
         * Calls the OIDC endpoint and returns the response
         */
        Authority.prototype.DiscoverEndpoints = function (openIdConfigurationEndpoint, telemetryManager, correlationId) {
            var client = new XhrClient$1();
            var httpMethod = NetworkRequestType.GET;
            var httpEvent = telemetryManager.createAndStartHttpEvent(correlationId, httpMethod, openIdConfigurationEndpoint, "openIdConfigurationEndpoint");
            return client.sendRequestAsync(openIdConfigurationEndpoint, httpMethod, /* enableCaching: */ true)
                .then(function (response) {
                httpEvent.httpResponseStatus = response.statusCode;
                telemetryManager.stopEvent(httpEvent);
                return {
                    AuthorizationEndpoint: response.body.authorization_endpoint,
                    EndSessionEndpoint: response.body.end_session_endpoint,
                    Issuer: response.body.issuer
                };
            })
                .catch(function (err) {
                httpEvent.serverErrorCode = err;
                telemetryManager.stopEvent(httpEvent);
                throw err;
            });
        };
        /**
         * Returns a promise.
         * Checks to see if the authority is in the cache
         * Discover endpoints via openid-configuration
         * If successful, caches the endpoint for later use in OIDC
         */
        Authority.prototype.resolveEndpointsAsync = function (telemetryManager, correlationId) {
            return __awaiter$2(this, void 0, void 0, function () {
                var host, openIdConfigurationEndpointResponse, _a;
                return __generator$2(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!this.IsValidationEnabled) return [3 /*break*/, 3];
                            host = this.canonicalAuthorityUrlComponents.HostNameAndPort;
                            if (!(TrustedAuthority$1.getTrustedHostList().length === 0)) return [3 /*break*/, 2];
                            return [4 /*yield*/, TrustedAuthority$1.setTrustedAuthoritiesFromNetwork(this.canonicalAuthority, telemetryManager, correlationId)];
                        case 1:
                            _b.sent();
                            _b.label = 2;
                        case 2:
                            if (!TrustedAuthority$1.IsInTrustedHostList(host)) {
                                throw ClientConfigurationError$1.createUntrustedAuthorityError(host);
                            }
                            _b.label = 3;
                        case 3:
                            openIdConfigurationEndpointResponse = this.GetOpenIdConfigurationEndpoint();
                            _a = this;
                            return [4 /*yield*/, this.DiscoverEndpoints(openIdConfigurationEndpointResponse, telemetryManager, correlationId)];
                        case 4:
                            _a.tenantDiscoveryResponse = _b.sent();
                            return [2 /*return*/, this.tenantDiscoveryResponse];
                    }
                });
            });
        };
        /**
         * Checks if there is a cached tenant discovery response with required fields.
         */
        Authority.prototype.hasCachedMetadata = function () {
            return !!(this.tenantDiscoveryResponse &&
                this.tenantDiscoveryResponse.AuthorizationEndpoint &&
                this.tenantDiscoveryResponse.EndSessionEndpoint &&
                this.tenantDiscoveryResponse.Issuer);
        };
        /**
         * Returns a promise which resolves to the OIDC endpoint
         * Only responds with the endpoint
         */
        Authority.prototype.GetOpenIdConfigurationEndpoint = function () {
            return this.DefaultOpenIdConfigurationEndpoint;
        };
        return Authority;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var ClientInfo$1 = /** @class */ (function () {
        function ClientInfo(rawClientInfo, authority) {
            if (!rawClientInfo || StringUtils$1.isEmpty(rawClientInfo)) {
                this.uid = "";
                this.utid = "";
                return;
            }
            try {
                var decodedClientInfo = CryptoUtils.base64Decode(rawClientInfo);
                var clientInfo = JSON.parse(decodedClientInfo);
                if (clientInfo) {
                    if (clientInfo.hasOwnProperty("uid")) {
                        this.uid = authority ? ClientInfo.stripPolicyFromUid(clientInfo.uid, authority) : clientInfo.uid;
                    }
                    if (clientInfo.hasOwnProperty("utid")) {
                        this.utid = clientInfo.utid;
                    }
                }
            }
            catch (e) {
                throw ClientAuthError$1.createClientInfoDecodingError(e);
            }
        }
        Object.defineProperty(ClientInfo.prototype, "uid", {
            get: function () {
                return this._uid ? this._uid : "";
            },
            set: function (uid) {
                this._uid = uid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClientInfo.prototype, "utid", {
            get: function () {
                return this._utid ? this._utid : "";
            },
            set: function (utid) {
                this._utid = utid;
            },
            enumerable: true,
            configurable: true
        });
        ClientInfo.createClientInfoFromIdToken = function (idToken, authority) {
            var clientInfo = {
                uid: idToken.subject,
                utid: ""
            };
            return new ClientInfo(CryptoUtils.base64Encode(JSON.stringify(clientInfo)), authority);
        };
        ClientInfo.stripPolicyFromUid = function (uid, authority) {
            var uidSegments = uid.split("-");
            // Reverse the url segments so the last one is more easily accessible
            var urlSegments = authority.split("/").reverse();
            var policy = "";
            if (!StringUtils$1.isEmpty(urlSegments[0])) {
                policy = urlSegments[0];
            }
            else if (urlSegments.length > 1) {
                // If the original url had a trailing slash, urlSegments[0] would be "" so take the next element
                policy = urlSegments[1];
            }
            if (uidSegments[uidSegments.length - 1] === policy) {
                // If the last segment of uid matches the last segment of authority url, remove the last segment of uid
                return uidSegments.slice(0, uidSegments.length - 1).join("-");
            }
            return uid;
        };
        ClientInfo.prototype.encodeClientInfo = function () {
            var clientInfo = JSON.stringify({ uid: this.uid, utid: this.utid });
            return CryptoUtils.base64Encode(clientInfo);
        };
        return ClientInfo;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var TimeUtils$1 = /** @class */ (function () {
        function TimeUtils() {
        }
        /**
         * Returns time in seconds for expiration based on string value passed in.
         *
         * @param expiresIn
         */
        TimeUtils.parseExpiresIn = function (expiresIn) {
            // if AAD did not send "expires_in" property, use default expiration of 3599 seconds, for some reason AAD sends 3599 as "expires_in" value instead of 3600
            if (!expiresIn) {
                expiresIn = "3599";
            }
            return parseInt(expiresIn, 10);
        };
        /**
         * Return the current time in Unix time (seconds). Date.getTime() returns in milliseconds.
         */
        TimeUtils.now = function () {
            return Math.round(new Date().getTime() / 1000.0);
        };
        /**
         * Returns the amount of time in milliseconds since the page loaded.
         */
        TimeUtils.relativeNowMs = function () {
            return window.performance.now();
        };
        return TimeUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var TokenUtils = /** @class */ (function () {
        function TokenUtils() {
        }
        /**
         * decode a JWT
         *
         * @param jwtToken
         */
        TokenUtils.decodeJwt = function (jwtToken) {
            if (StringUtils$1.isEmpty(jwtToken)) {
                return null;
            }
            var idTokenPartsRegex = /^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/;
            var matches = idTokenPartsRegex.exec(jwtToken);
            if (!matches || matches.length < 4) {
                // this._requestContext.logger.warn("The returned id_token is not parseable.");
                return null;
            }
            var crackedToken = {
                header: matches[1],
                JWSPayload: matches[2],
                JWSSig: matches[3]
            };
            return crackedToken;
        };
        /**
         * Evaluates whether token cache item expiration is within expiration offset range
         * @param tokenCacheItem
         */
        TokenUtils.validateExpirationIsWithinOffset = function (expiration, tokenRenewalOffsetSeconds) {
            var offset = tokenRenewalOffsetSeconds || 300;
            return expiration && (expiration > TimeUtils$1.now() + offset);
        };
        /**
         * Extract IdToken by decoding the RAWIdToken
         *
         * @param encodedIdToken
         */
        TokenUtils.extractIdToken = function (encodedIdToken) {
            // id token will be decoded to get the username
            var decodedToken = this.decodeJwt(encodedIdToken);
            if (!decodedToken) {
                return null;
            }
            try {
                var base64IdToken = decodedToken.JWSPayload;
                var base64Decoded = CryptoUtils.base64Decode(base64IdToken);
                if (!base64Decoded) {
                    // this._requestContext.logger.info("The returned id_token could not be base64 url safe decoded.");
                    return null;
                }
                // ECMA script has JSON built-in support
                return JSON.parse(base64Decoded);
            }
            catch (err) {
                // this._requestContext.logger.error("The returned id_token could not be decoded" + err);
            }
            return null;
        };
        return TokenUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var IdToken = /** @class */ (function () {
        /* tslint:disable:no-string-literal */
        function IdToken(rawIdToken) {
            if (StringUtils$1.isEmpty(rawIdToken)) {
                throw ClientAuthError$1.createIdTokenNullOrEmptyError(rawIdToken);
            }
            try {
                this.rawIdToken = rawIdToken;
                this.claims = TokenUtils.extractIdToken(rawIdToken);
                if (this.claims) {
                    if (this.claims.hasOwnProperty("iss")) {
                        this.issuer = this.claims["iss"];
                    }
                    if (this.claims.hasOwnProperty("oid")) {
                        this.objectId = this.claims["oid"];
                    }
                    if (this.claims.hasOwnProperty("sub")) {
                        this.subject = this.claims["sub"];
                    }
                    if (this.claims.hasOwnProperty("tid")) {
                        this.tenantId = this.claims["tid"];
                    }
                    if (this.claims.hasOwnProperty("ver")) {
                        this.version = this.claims["ver"];
                    }
                    if (this.claims.hasOwnProperty("preferred_username")) {
                        this.preferredName = this.claims["preferred_username"];
                    }
                    else if (this.claims.hasOwnProperty("upn")) {
                        this.preferredName = this.claims["upn"];
                    }
                    if (this.claims.hasOwnProperty("name")) {
                        this.name = this.claims["name"];
                    }
                    if (this.claims.hasOwnProperty("nonce")) {
                        this.nonce = this.claims["nonce"];
                    }
                    if (this.claims.hasOwnProperty("exp")) {
                        this.expiration = this.claims["exp"];
                    }
                    if (this.claims.hasOwnProperty("home_oid")) {
                        this.homeObjectId = this.claims["home_oid"];
                    }
                    if (this.claims.hasOwnProperty("sid")) {
                        this.sid = this.claims["sid"];
                    }
                    if (this.claims.hasOwnProperty("cloud_instance_host_name")) {
                        this.cloudInstance = this.claims["cloud_instance_host_name"];
                    }
                    /* tslint:enable:no-string-literal */
                }
            }
            catch (e) {
                /*
                 * TODO: This error here won't really every be thrown, since extractIdToken() returns null if the decodeJwt() fails.
                 * Need to add better error handling here to account for being unable to decode jwts.
                 */
                throw ClientAuthError$1.createIdTokenParsingError(e);
            }
        }
        return IdToken;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var AccessTokenCacheItem = /** @class */ (function () {
        function AccessTokenCacheItem(key, value) {
            this.key = key;
            this.value = value;
        }
        return AccessTokenCacheItem;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var BrowserStorage$1 = /** @class */ (function () {
        function BrowserStorage(cacheLocation) {
            if (!window) {
                throw AuthError$1.createNoWindowObjectError("Browser storage class could not find window object");
            }
            var storageSupported = typeof window[cacheLocation] !== "undefined" && window[cacheLocation] !== null;
            if (!storageSupported) {
                throw ClientConfigurationError$1.createStorageNotSupportedError(cacheLocation);
            }
            this.cacheLocation = cacheLocation;
        }
        /**
         * add value to storage
         * @param key
         * @param value
         * @param enableCookieStorage
         */
        BrowserStorage.prototype.setItem = function (key, value, enableCookieStorage) {
            window[this.cacheLocation].setItem(key, value);
            if (enableCookieStorage) {
                this.setItemCookie(key, value);
            }
        };
        /**
         * get one item by key from storage
         * @param key
         * @param enableCookieStorage
         */
        BrowserStorage.prototype.getItem = function (key, enableCookieStorage) {
            if (enableCookieStorage && this.getItemCookie(key)) {
                return this.getItemCookie(key);
            }
            return window[this.cacheLocation].getItem(key);
        };
        /**
         * remove value from storage
         * @param key
         */
        BrowserStorage.prototype.removeItem = function (key) {
            return window[this.cacheLocation].removeItem(key);
        };
        /**
         * clear storage (remove all items from it)
         */
        BrowserStorage.prototype.clear = function () {
            return window[this.cacheLocation].clear();
        };
        /**
         * add value to cookies
         * @param cName
         * @param cValue
         * @param expires
         */
        BrowserStorage.prototype.setItemCookie = function (cName, cValue, expires) {
            var cookieStr = cName + "=" + cValue + ";path=/;";
            if (expires) {
                var expireTime = this.getCookieExpirationTime(expires);
                cookieStr += "expires=" + expireTime + ";";
            }
            document.cookie = cookieStr;
        };
        /**
         * get one item by key from cookies
         * @param cName
         */
        BrowserStorage.prototype.getItemCookie = function (cName) {
            var name = cName + "=";
            var ca = document.cookie.split(";");
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) === " ") {
                    c = c.substring(1);
                }
                if (c.indexOf(name) === 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return "";
        };
        /**
         * Clear an item in the cookies by key
         * @param cName
         */
        BrowserStorage.prototype.clearItemCookie = function (cName) {
            this.setItemCookie(cName, "", -1);
        };
        /**
         * Get cookie expiration time
         * @param cookieLifeDays
         */
        BrowserStorage.prototype.getCookieExpirationTime = function (cookieLifeDays) {
            var today = new Date();
            var expr = new Date(today.getTime() + cookieLifeDays * 24 * 60 * 60 * 1000);
            return expr.toUTCString();
        };
        return BrowserStorage;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var RequestUtils = /** @class */ (function () {
        function RequestUtils() {
        }
        /**
         * @ignore
         *
         * @param request
         * @param isLoginCall
         * @param cacheStorage
         * @param clientId
         *
         * validates all request parameters and generates a consumable request object
         */
        RequestUtils.validateRequest = function (request, isLoginCall, clientId, interactionType) {
            // Throw error if request is empty for acquire * calls
            if (!isLoginCall && !request) {
                throw ClientConfigurationError$1.createEmptyRequestError();
            }
            var scopes;
            var extraQueryParameters;
            if (request) {
                // if extraScopesToConsent is passed in loginCall, append them to the login request; Validate and filter scopes (the validate function will throw if validation fails)
                scopes = isLoginCall ? ScopeSet$1.appendScopes(request.scopes, request.extraScopesToConsent) : request.scopes;
                ScopeSet$1.validateInputScope(scopes, !isLoginCall);
                scopes = ScopeSet$1.translateClientIdIfSingleScope(scopes, clientId);
                // validate prompt parameter
                this.validatePromptParameter(request.prompt);
                // validate extraQueryParameters
                extraQueryParameters = this.validateEQParameters(request.extraQueryParameters, request.claimsRequest);
                // validate claimsRequest
                this.validateClaimsRequest(request.claimsRequest);
            }
            // validate and generate state and correlationId
            var state = this.validateAndGenerateState(request && request.state, interactionType);
            var correlationId = this.validateAndGenerateCorrelationId(request && request.correlationId);
            var validatedRequest = __assign$2({}, request, { extraQueryParameters: extraQueryParameters,
                scopes: scopes,
                state: state,
                correlationId: correlationId });
            return validatedRequest;
        };
        /**
         * @ignore
         *
         * Utility to test if valid prompt value is passed in the request
         * @param request
         */
        RequestUtils.validatePromptParameter = function (prompt) {
            if (prompt) {
                if ([PromptState.LOGIN, PromptState.SELECT_ACCOUNT, PromptState.CONSENT, PromptState.NONE].indexOf(prompt) < 0) {
                    throw ClientConfigurationError$1.createInvalidPromptError(prompt);
                }
            }
        };
        /**
         * @ignore
         *
         * Removes unnecessary or duplicate query parameters from extraQueryParameters
         * @param request
         */
        RequestUtils.validateEQParameters = function (extraQueryParameters, claimsRequest) {
            var eQParams = __assign$2({}, extraQueryParameters);
            if (!eQParams) {
                return null;
            }
            if (claimsRequest) {
                // this.logger.warning("Removed duplicate claims from extraQueryParameters. Please use either the claimsRequest field OR pass as extraQueryParameter - not both.");
                delete eQParams[Constants$2.claims];
            }
            BlacklistedEQParams$1.forEach(function (param) {
                if (eQParams[param]) {
                    // this.logger.warning("Removed duplicate " + param + " from extraQueryParameters. Please use the " + param + " field in request object.");
                    delete eQParams[param];
                }
            });
            return eQParams;
        };
        /**
         * @ignore
         *
         * Validates the claims passed in request is a JSON
         * TODO: More validation will be added when the server team tells us how they have actually implemented claims
         * @param claimsRequest
         */
        RequestUtils.validateClaimsRequest = function (claimsRequest) {
            if (!claimsRequest) {
                return;
            }
            try {
                JSON.parse(claimsRequest);
            }
            catch (e) {
                throw ClientConfigurationError$1.createClaimsRequestParsingError(e);
            }
        };
        /**
         * @ignore
         *
         * generate unique state per request
         * @param userState User-provided state value
         * @returns State string include library state and user state
         */
        RequestUtils.validateAndGenerateState = function (userState, interactionType) {
            return !StringUtils$1.isEmpty(userState) ? "" + RequestUtils.generateLibraryState(interactionType) + Constants$2.resourceDelimiter + userState : RequestUtils.generateLibraryState(interactionType);
        };
        /**
         * Generates the state value used by the library.
         *
         * @returns Base64 encoded string representing the state
         */
        RequestUtils.generateLibraryState = function (interactionType) {
            var stateObject = {
                id: CryptoUtils.createNewGuid(),
                ts: TimeUtils$1.now(),
                method: interactionType
            };
            var stateString = JSON.stringify(stateObject);
            return CryptoUtils.base64Encode(stateString);
        };
        /**
         * Decodes the state value into a StateObject
         *
         * @param state State value returned in the request
         * @returns Parsed values from the encoded state value
         */
        RequestUtils.parseLibraryState = function (state) {
            var libraryState = decodeURIComponent(state).split(Constants$2.resourceDelimiter)[0];
            if (CryptoUtils.isGuid(libraryState)) {
                // If state is guid, assume timestamp is now and is redirect, as redirect should be only method where this can happen.
                return {
                    id: libraryState,
                    ts: TimeUtils$1.now(),
                    method: Constants$2.interactionTypeRedirect
                };
            }
            try {
                var stateString = CryptoUtils.base64Decode(libraryState);
                var stateObject = JSON.parse(stateString);
                return stateObject;
            }
            catch (e) {
                throw ClientAuthError$1.createInvalidStateError(state, null);
            }
        };
        /**
         * @ignore
         *
         * validate correlationId and generate if not valid or not set by the user
         * @param correlationId
         */
        RequestUtils.validateAndGenerateCorrelationId = function (correlationId) {
            // validate user set correlationId or set one for the user if null
            if (correlationId && !CryptoUtils.isGuid(correlationId)) {
                throw ClientConfigurationError$1.createInvalidCorrelationIdError();
            }
            return CryptoUtils.isGuid(correlationId) ? correlationId : CryptoUtils.createNewGuid();
        };
        /**
         * Create a request signature
         * @param request
         */
        RequestUtils.createRequestSignature = function (request) {
            return "" + request.scopes.join(" ").toLowerCase() + Constants$2.resourceDelimiter + request.authority;
        };
        return RequestUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var AuthCache = /** @class */ (function (_super) {
        __extends$2(AuthCache, _super);
        function AuthCache(clientId, cacheLocation, storeAuthStateInCookie) {
            var _this = _super.call(this, cacheLocation) || this;
            _this.clientId = clientId;
            // This is hardcoded to true for now. We may make this configurable in the future
            _this.rollbackEnabled = true;
            _this.migrateCacheEntries(storeAuthStateInCookie);
            return _this;
        }
        /**
         * Support roll back to old cache schema until the next major release: true by default now
         * @param storeAuthStateInCookie
         */
        AuthCache.prototype.migrateCacheEntries = function (storeAuthStateInCookie) {
            var _this = this;
            var idTokenKey = Constants$2.cachePrefix + "." + PersistentCacheKeys$1.IDTOKEN;
            var clientInfoKey = Constants$2.cachePrefix + "." + PersistentCacheKeys$1.CLIENT_INFO;
            var errorKey = Constants$2.cachePrefix + "." + ErrorCacheKeys.ERROR;
            var errorDescKey = Constants$2.cachePrefix + "." + ErrorCacheKeys.ERROR_DESC;
            var idTokenValue = _super.prototype.getItem.call(this, idTokenKey);
            var clientInfoValue = _super.prototype.getItem.call(this, clientInfoKey);
            var errorValue = _super.prototype.getItem.call(this, errorKey);
            var errorDescValue = _super.prototype.getItem.call(this, errorDescKey);
            var values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];
            var keysToMigrate = [PersistentCacheKeys$1.IDTOKEN, PersistentCacheKeys$1.CLIENT_INFO, ErrorCacheKeys.ERROR, ErrorCacheKeys.ERROR_DESC];
            keysToMigrate.forEach(function (cacheKey, index) { return _this.duplicateCacheEntry(cacheKey, values[index], storeAuthStateInCookie); });
        };
        /**
         * Utility function to help with roll back keys
         * @param newKey
         * @param value
         * @param storeAuthStateInCookie
         */
        AuthCache.prototype.duplicateCacheEntry = function (newKey, value, storeAuthStateInCookie) {
            if (value) {
                this.setItem(newKey, value, storeAuthStateInCookie);
            }
        };
        /**
         * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)
         * @param key
         * @param addInstanceId
         */
        AuthCache.prototype.generateCacheKey = function (key, addInstanceId) {
            try {
                // Defined schemas do not need the key appended
                JSON.parse(key);
                return key;
            }
            catch (e) {
                if (key.indexOf("" + Constants$2.cachePrefix) === 0 || key.indexOf(Constants$2.adalIdToken) === 0) {
                    return key;
                }
                return addInstanceId ? Constants$2.cachePrefix + "." + this.clientId + "." + key : Constants$2.cachePrefix + "." + key;
            }
        };
        /**
         * Validates that the input cache key contains the account search terms (clientId and homeAccountIdentifier) and
         * then whether or not it contains the "scopes", depending on the token type being searched for. With matching account
         * search terms, Access Token search tries to match the "scopes" keyword, while Id Token search expects "scopes" to not be included.
         * @param key
         * @param clientId
         * @param homeAccountIdentifier
         * @param tokenType
         */
        AuthCache.prototype.matchKeyForType = function (key, clientId, homeAccountIdentifier, tokenType) {
            // All valid token cache item keys are valid JSON objects, ignore keys that aren't
            var parsedKey = StringUtils$1.validateAndParseJsonCacheKey(key);
            if (!parsedKey) {
                return null;
            }
            // Does the cache item match the request account
            var accountMatches = key.match(clientId) && key.match(homeAccountIdentifier);
            // Does the cache item match the requested token type
            var tokenTypeMatches = false;
            switch (tokenType) {
                case ServerHashParamKeys.ACCESS_TOKEN:
                    // Cache item is an access token if scopes are included in the cache item key
                    tokenTypeMatches = !!key.match(Constants$2.scopes);
                    break;
                case ServerHashParamKeys.ID_TOKEN:
                    // Cache may be an ID token if scopes are NOT included in the cache item key
                    tokenTypeMatches = !key.match(Constants$2.scopes);
                    break;
            }
            return (accountMatches && tokenTypeMatches) ? parsedKey : null;
        };
        /**
         * add value to storage
         * @param key
         * @param value
         * @param enableCookieStorage
         */
        AuthCache.prototype.setItem = function (key, value, enableCookieStorage) {
            _super.prototype.setItem.call(this, this.generateCacheKey(key, true), value, enableCookieStorage);
            // Values stored in cookies will have rollback disabled to minimize cookie length
            if (this.rollbackEnabled && !enableCookieStorage) {
                _super.prototype.setItem.call(this, this.generateCacheKey(key, false), value, enableCookieStorage);
            }
        };
        /**
         * get one item by key from storage
         * @param key
         * @param enableCookieStorage
         */
        AuthCache.prototype.getItem = function (key, enableCookieStorage) {
            return _super.prototype.getItem.call(this, this.generateCacheKey(key, true), enableCookieStorage);
        };
        /**
         * remove value from storage
         * @param key
         */
        AuthCache.prototype.removeItem = function (key) {
            _super.prototype.removeItem.call(this, this.generateCacheKey(key, true));
            if (this.rollbackEnabled) {
                _super.prototype.removeItem.call(this, this.generateCacheKey(key, false));
            }
        };
        /**
         * Reset the cache items
         */
        AuthCache.prototype.resetCacheItems = function () {
            var storage = window[this.cacheLocation];
            var key;
            for (key in storage) {
                // Check if key contains msal prefix; For now, we are clearing all cache items created by MSAL.js
                if (storage.hasOwnProperty(key) && (key.indexOf(Constants$2.cachePrefix) !== -1)) {
                    _super.prototype.removeItem.call(this, key);
                    // TODO: Clear cache based on client id (clarify use cases where this is needed)
                }
            }
        };
        /**
         * Reset all temporary cache items
         */
        AuthCache.prototype.resetTempCacheItems = function (state) {
            var _this = this;
            var stateId = state && RequestUtils.parseLibraryState(state).id;
            var isTokenRenewalInProgress = this.tokenRenewalInProgress(state);
            var storage = window[this.cacheLocation];
            // check state and remove associated cache
            if (stateId && !isTokenRenewalInProgress) {
                Object.keys(storage).forEach(function (key) {
                    if (key.indexOf(stateId) !== -1) {
                        _this.removeItem(key);
                        _super.prototype.clearItemCookie.call(_this, key);
                    }
                });
            }
            // delete the interaction status cache
            this.removeItem(TemporaryCacheKeys$1.INTERACTION_STATUS);
            this.removeItem(TemporaryCacheKeys$1.REDIRECT_REQUEST);
        };
        /**
         * Set cookies for IE
         * @param cName
         * @param cValue
         * @param expires
         */
        AuthCache.prototype.setItemCookie = function (cName, cValue, expires) {
            _super.prototype.setItemCookie.call(this, this.generateCacheKey(cName, true), cValue, expires);
            if (this.rollbackEnabled) {
                _super.prototype.setItemCookie.call(this, this.generateCacheKey(cName, false), cValue, expires);
            }
        };
        AuthCache.prototype.clearItemCookie = function (cName) {
            _super.prototype.clearItemCookie.call(this, this.generateCacheKey(cName, true));
            if (this.rollbackEnabled) {
                _super.prototype.clearItemCookie.call(this, this.generateCacheKey(cName, false));
            }
        };
        /**
         * get one item by key from cookies
         * @param cName
         */
        AuthCache.prototype.getItemCookie = function (cName) {
            return _super.prototype.getItemCookie.call(this, this.generateCacheKey(cName, true));
        };
        /**
         * Get all tokens of a certain type from the cache
         * @param clientId
         * @param homeAccountIdentifier
         * @param tokenType
         */
        AuthCache.prototype.getAllTokensByType = function (clientId, homeAccountIdentifier, tokenType) {
            var _this = this;
            var results = Object.keys(window[this.cacheLocation]).reduce(function (tokens, key) {
                var matchedTokenKey = _this.matchKeyForType(key, clientId, homeAccountIdentifier, tokenType);
                if (matchedTokenKey) {
                    var value = _this.getItem(key);
                    if (value) {
                        try {
                            var newAccessTokenCacheItem = new AccessTokenCacheItem(matchedTokenKey, JSON.parse(value));
                            return tokens.concat([newAccessTokenCacheItem]);
                        }
                        catch (err) {
                            // Skip cache items with non-valid JSON values
                            return tokens;
                        }
                    }
                }
                return tokens;
            }, []);
            return results;
        };
        /**
         * Get all access tokens in the cache
         * @param clientId
         * @param homeAccountIdentifier
         */
        AuthCache.prototype.getAllAccessTokens = function (clientId, homeAccountIdentifier) {
            return this.getAllTokensByType(clientId, homeAccountIdentifier, ServerHashParamKeys.ACCESS_TOKEN);
        };
        /**
         * Get all id tokens in the cache in the form of AccessTokenCacheItem objects so they are
         * in a normalized format and can make use of the existing cached access token validation logic
         */
        AuthCache.prototype.getAllIdTokens = function (clientId, homeAccountIdentifier) {
            return this.getAllTokensByType(clientId, homeAccountIdentifier, ServerHashParamKeys.ID_TOKEN);
        };
        /**
         * Get all access and ID tokens in the cache
         * @param clientId
         * @param homeAccountIdentifier
         */
        AuthCache.prototype.getAllTokens = function (clientId, homeAccountIdentifier) {
            var accessTokens = this.getAllAccessTokens(clientId, homeAccountIdentifier);
            var idTokens = this.getAllIdTokens(clientId, homeAccountIdentifier);
            return accessTokens.concat(idTokens);
        };
        /**
         * Return if the token renewal is still in progress
         *
         * @param stateValue
         */
        AuthCache.prototype.tokenRenewalInProgress = function (stateValue) {
            var renewStatus = this.getItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.RENEW_STATUS, stateValue));
            return !!(renewStatus && renewStatus === Constants$2.inProgress);
        };
        /**
         * Clear all cookies
         */
        AuthCache.prototype.clearMsalCookie = function (state) {
            var _this = this;
            /*
             * If state is truthy, remove values associated with that request.
             * Otherwise, remove all MSAL cookies.
             */
            if (state) {
                this.clearItemCookie(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.NONCE_IDTOKEN, state));
                this.clearItemCookie(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.STATE_LOGIN, state));
                this.clearItemCookie(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.LOGIN_REQUEST, state));
                this.clearItemCookie(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.STATE_ACQ_TOKEN, state));
            }
            else {
                var cookies = document.cookie.split(";");
                cookies.forEach(function (cookieString) {
                    var cookieName = cookieString.trim().split("=")[0];
                    if (cookieName.indexOf(Constants$2.cachePrefix) > -1) {
                        _super.prototype.clearItemCookie.call(_this, cookieName);
                    }
                });
            }
        };
        /**
         * Create acquireTokenAccountKey to cache account object
         * @param accountId
         * @param state
         */
        AuthCache.generateAcquireTokenAccountKey = function (accountId, state) {
            var stateId = RequestUtils.parseLibraryState(state).id;
            return "" + TemporaryCacheKeys$1.ACQUIRE_TOKEN_ACCOUNT + Constants$2.resourceDelimiter + accountId + Constants$2.resourceDelimiter + stateId;
        };
        /**
         * Create authorityKey to cache authority
         * @param state
         */
        AuthCache.generateAuthorityKey = function (state) {
            return AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.AUTHORITY, state);
        };
        /**
         * Generates the cache key for temporary cache items, using request state
         * @param tempCacheKey Cache key prefix
         * @param state Request state value
         */
        AuthCache.generateTemporaryCacheKey = function (tempCacheKey, state) {
            // Use the state id (a guid), in the interest of shorter key names, which is important for cookies.
            var stateId = RequestUtils.parseLibraryState(state).id;
            return "" + tempCacheKey + Constants$2.resourceDelimiter + stateId;
        };
        return AuthCache;
    }(BrowserStorage$1));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * accountIdentifier       combination of idToken.uid and idToken.utid
     * homeAccountIdentifier   combination of clientInfo.uid and clientInfo.utid
     * userName                idToken.preferred_username
     * name                    idToken.name
     * idToken                 idToken
     * sid                     idToken.sid - session identifier
     * environment             idtoken.issuer (the authority that issues the token)
     */
    var Account = /** @class */ (function () {
        /**
         * Creates an Account Object
         * @praram accountIdentifier
         * @param homeAccountIdentifier
         * @param userName
         * @param name
         * @param idToken
         * @param sid
         * @param environment
         */
        function Account(accountIdentifier, homeAccountIdentifier, userName, name, idTokenClaims, sid, environment) {
            this.accountIdentifier = accountIdentifier;
            this.homeAccountIdentifier = homeAccountIdentifier;
            this.userName = userName;
            this.name = name;
            // will be deprecated soon
            this.idToken = idTokenClaims;
            this.idTokenClaims = idTokenClaims;
            this.sid = sid;
            this.environment = environment;
        }
        /**
         * @hidden
         * @param idToken
         * @param clientInfo
         */
        Account.createAccount = function (idToken, clientInfo) {
            // create accountIdentifier
            var accountIdentifier = idToken.objectId || idToken.subject;
            // create homeAccountIdentifier
            var uid = clientInfo ? clientInfo.uid : "";
            var utid = clientInfo ? clientInfo.utid : "";
            var homeAccountIdentifier;
            if (!StringUtils$1.isEmpty(uid)) {
                homeAccountIdentifier = StringUtils$1.isEmpty(utid) ? CryptoUtils.base64Encode(uid) : CryptoUtils.base64Encode(uid) + "." + CryptoUtils.base64Encode(utid);
            }
            return new Account(accountIdentifier, homeAccountIdentifier, idToken.preferredName, idToken.name, idToken.claims, idToken.sid, idToken.issuer);
        };
        /**
         * Utils function to compare two Account objects - used to check if the same user account is logged in
         *
         * @param a1: Account object
         * @param a2: Account object
         */
        Account.compareAccounts = function (a1, a2) {
            if (!a1 || !a2) {
                return false;
            }
            if (a1.homeAccountIdentifier && a2.homeAccountIdentifier) {
                if (a1.homeAccountIdentifier === a2.homeAccountIdentifier) {
                    return true;
                }
            }
            return false;
        };
        return Account;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var WindowUtils = /** @class */ (function () {
        function WindowUtils() {
        }
        /**
         * @hidden
         * Checks if the current page is running in an iframe.
         * @ignore
         */
        WindowUtils.isInIframe = function () {
            return window.parent !== window;
        };
        /**
         * @hidden
         * Check if the current page is running in a popup.
         * @ignore
         */
        WindowUtils.isInPopup = function () {
            return !!(window.opener && window.opener !== window);
        };
        /**
         * @hidden
         * @param prefix
         * @param scopes
         * @param authority
         */
        WindowUtils.generateFrameName = function (prefix, requestSignature) {
            return "" + prefix + Constants$2.resourceDelimiter + requestSignature;
        };
        /**
         * @hidden
         * Polls an iframe until it loads a url with a hash
         * @ignore
         */
        WindowUtils.monitorIframeForHash = function (contentWindow, timeout, urlNavigate, logger) {
            return new Promise(function (resolve, reject) {
                /*
                 * Polling for iframes can be purely timing based,
                 * since we don't need to account for interaction.
                 */
                var nowMark = TimeUtils$1.relativeNowMs();
                var timeoutMark = nowMark + timeout;
                logger.verbose("monitorWindowForIframe polling started");
                var intervalId = setInterval(function () {
                    if (TimeUtils$1.relativeNowMs() > timeoutMark) {
                        logger.error("monitorIframeForHash unable to find hash in url, timing out");
                        logger.errorPii("monitorIframeForHash polling timed out for url: " + urlNavigate);
                        clearInterval(intervalId);
                        reject(ClientAuthError$1.createTokenRenewalTimeoutError());
                        return;
                    }
                    var href;
                    try {
                        /*
                         * Will throw if cross origin,
                         * which should be caught and ignored
                         * since we need the interval to keep running while on STS UI.
                         */
                        href = contentWindow.location.href;
                    }
                    catch (e) { }
                    if (href && UrlUtils.urlContainsHash(href)) {
                        logger.verbose("monitorIframeForHash found url in hash");
                        clearInterval(intervalId);
                        resolve(contentWindow.location.hash);
                    }
                }, WindowUtils.POLLING_INTERVAL_MS);
            });
        };
        /**
         * @hidden
         * Polls a popup until it loads a url with a hash
         * @ignore
         */
        WindowUtils.monitorPopupForHash = function (contentWindow, timeout, urlNavigate, logger) {
            return new Promise(function (resolve, reject) {
                /*
                 * Polling for popups needs to be tick-based,
                 * since a non-trivial amount of time can be spent on interaction (which should not count against the timeout).
                 */
                var maxTicks = timeout / WindowUtils.POLLING_INTERVAL_MS;
                var ticks = 0;
                logger.verbose("monitorWindowForHash polling started");
                var intervalId = setInterval(function () {
                    if (contentWindow.closed) {
                        logger.error("monitorWindowForHash window closed");
                        clearInterval(intervalId);
                        reject(ClientAuthError$1.createUserCancelledError());
                        return;
                    }
                    var href;
                    try {
                        /*
                         * Will throw if cross origin,
                         * which should be caught and ignored
                         * since we need the interval to keep running while on STS UI.
                         */
                        href = contentWindow.location.href;
                    }
                    catch (e) { }
                    // Don't process blank pages or cross domain
                    if (!href || href === "about:blank") {
                        return;
                    }
                    /*
                     * Only run clock when we are on same domain for popups
                     * as popup operations can take a long time.
                     */
                    ticks++;
                    if (href && UrlUtils.urlContainsHash(href)) {
                        logger.verbose("monitorPopupForHash found url in hash");
                        clearInterval(intervalId);
                        resolve(contentWindow.location.hash);
                    }
                    else if (ticks > maxTicks) {
                        logger.error("monitorPopupForHash unable to find hash in url, timing out");
                        logger.errorPii("monitorPopupForHash polling timed out for url: " + urlNavigate);
                        clearInterval(intervalId);
                        reject(ClientAuthError$1.createTokenRenewalTimeoutError());
                    }
                }, WindowUtils.POLLING_INTERVAL_MS);
            });
        };
        /**
         * @hidden
         * Loads iframe with authorization endpoint URL
         * @ignore
         */
        WindowUtils.loadFrame = function (urlNavigate, frameName, timeoutMs, logger) {
            var _this = this;
            /*
             * This trick overcomes iframe navigation in IE
             * IE does not load the page consistently in iframe
             */
            logger.infoPii("LoadFrame: " + frameName);
            return new Promise(function (resolve, reject) {
                setTimeout(function () {
                    var frameHandle = _this.loadFrameSync(urlNavigate, frameName, logger);
                    if (!frameHandle) {
                        reject("Unable to load iframe with name: " + frameName);
                        return;
                    }
                    resolve(frameHandle);
                }, timeoutMs);
            });
        };
        /**
         * @hidden
         * Loads the iframe synchronously when the navigateTimeFrame is set to `0`
         * @param urlNavigate
         * @param frameName
         * @param logger
         */
        WindowUtils.loadFrameSync = function (urlNavigate, frameName, logger) {
            var frameHandle = WindowUtils.addHiddenIFrame(frameName, logger);
            // returning to handle null in loadFrame, also to avoid null object access errors
            if (!frameHandle) {
                return null;
            }
            else if (frameHandle.src === "" || frameHandle.src === "about:blank") {
                frameHandle.src = urlNavigate;
                logger.infoPii("Frame Name : " + frameName + " Navigated to: " + urlNavigate);
            }
            return frameHandle;
        };
        /**
         * @hidden
         * Adds the hidden iframe for silent token renewal.
         * @ignore
         */
        WindowUtils.addHiddenIFrame = function (iframeId, logger) {
            if (typeof iframeId === "undefined") {
                return null;
            }
            logger.infoPii("Add msal frame to document:" + iframeId);
            var adalFrame = document.getElementById(iframeId);
            if (!adalFrame) {
                if (document.createElement &&
                    document.documentElement &&
                    (window.navigator.userAgent.indexOf("MSIE 5.0") === -1)) {
                    var ifr = document.createElement("iframe");
                    ifr.setAttribute("id", iframeId);
                    ifr.setAttribute("aria-hidden", "true");
                    ifr.style.visibility = "hidden";
                    ifr.style.position = "absolute";
                    ifr.style.width = ifr.style.height = "0";
                    ifr.style.border = "0";
                    ifr.setAttribute("sandbox", "allow-scripts allow-same-origin allow-forms");
                    adalFrame = document.getElementsByTagName("body")[0].appendChild(ifr);
                }
                else if (document.body && document.body.insertAdjacentHTML) {
                    document.body.insertAdjacentHTML("beforeend", "<iframe name='" + iframeId + "' id='" + iframeId + "' style='display:none'></iframe>");
                }
                if (window.frames && window.frames[iframeId]) {
                    adalFrame = window.frames[iframeId];
                }
            }
            return adalFrame;
        };
        /**
         * @hidden
         * Removes a hidden iframe from the page.
         * @ignore
         */
        WindowUtils.removeHiddenIframe = function (iframe) {
            if (document.body === iframe.parentNode) {
                document.body.removeChild(iframe);
            }
        };
        /**
         * @hidden
         * Find and return the iframe element with the given hash
         * @ignore
         */
        WindowUtils.getIframeWithHash = function (hash) {
            var iframes = document.getElementsByTagName("iframe");
            var iframeArray = Array.apply(null, Array(iframes.length)).map(function (iframe, index) { return iframes.item(index); }); // eslint-disable-line prefer-spread
            return iframeArray.filter(function (iframe) {
                try {
                    return iframe.contentWindow.location.hash === hash;
                }
                catch (e) {
                    return false;
                }
            })[0];
        };
        /**
         * @hidden
         * Returns an array of all the popups opened by MSAL
         * @ignore
         */
        WindowUtils.getPopups = function () {
            if (!window.openedWindows) {
                window.openedWindows = [];
            }
            return window.openedWindows;
        };
        /**
         * @hidden
         * Find and return the popup with the given hash
         * @ignore
         */
        WindowUtils.getPopUpWithHash = function (hash) {
            return WindowUtils.getPopups().filter(function (popup) {
                try {
                    return popup.location.hash === hash;
                }
                catch (e) {
                    return false;
                }
            })[0];
        };
        /**
         * @hidden
         * Add the popup to the known list of popups
         * @ignore
         */
        WindowUtils.trackPopup = function (popup) {
            WindowUtils.getPopups().push(popup);
        };
        /**
         * @hidden
         * Close all popups
         * @ignore
         */
        WindowUtils.closePopups = function () {
            WindowUtils.getPopups().forEach(function (popup) { return popup.close(); });
        };
        /**
         * @ignore
         *
         * blocks any login/acquireToken calls to reload from within a hidden iframe (generated for silent calls)
         */
        WindowUtils.blockReloadInHiddenIframes = function () {
            // return an error if called from the hidden iframe created by the msal js silent calls
            if (UrlUtils.urlContainsHash(window.location.hash) && WindowUtils.isInIframe()) {
                throw ClientAuthError$1.createBlockTokenRequestsInHiddenIframeError();
            }
        };
        /**
         *
         * @param cacheStorage
         */
        WindowUtils.checkIfBackButtonIsPressed = function (cacheStorage) {
            var redirectCache = cacheStorage.getItem(TemporaryCacheKeys$1.REDIRECT_REQUEST);
            // if redirect request is set and there is no hash
            if (redirectCache && !UrlUtils.urlContainsHash(window.location.hash)) {
                var splitCache = redirectCache.split(Constants$2.resourceDelimiter);
                splitCache.shift();
                var state = splitCache.length > 0 ? splitCache.join(Constants$2.resourceDelimiter) : null;
                cacheStorage.resetTempCacheItems(state);
            }
        };
        /**
         * Removes url fragment from browser url
         */
        WindowUtils.clearUrlFragment = function () {
            // Office.js sets history.replaceState to null
            if (typeof history.replaceState === "function") {
                // Full removes "#" from url
                history.replaceState(null, null, "" + window.location.pathname + window.location.search);
            }
            else {
                window.location.hash = "";
            }
        };
        /**
         * @hidden
         * Interval in milliseconds that we poll a window
         * @ignore
         */
        WindowUtils.POLLING_INTERVAL_MS = 50;
        return WindowUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var ResponseUtils = /** @class */ (function () {
        function ResponseUtils() {
        }
        ResponseUtils.setResponseIdToken = function (originalResponse, idTokenObj) {
            if (!originalResponse) {
                return null;
            }
            else if (!idTokenObj) {
                return originalResponse;
            }
            var exp = Number(idTokenObj.expiration);
            if (exp && !originalResponse.expiresOn) {
                originalResponse.expiresOn = new Date(exp * 1000);
            }
            return __assign$2({}, originalResponse, { idToken: idTokenObj, idTokenClaims: idTokenObj.claims, uniqueId: idTokenObj.objectId || idTokenObj.subject, tenantId: idTokenObj.tenantId });
        };
        ResponseUtils.buildAuthResponse = function (idToken, authResponse, serverAuthenticationRequest, account, scopes, accountState) {
            switch (serverAuthenticationRequest.responseType) {
                case ResponseTypes.id_token:
                    authResponse = __assign$2({}, authResponse, { tokenType: ServerHashParamKeys.ID_TOKEN, account: account, scopes: scopes, accountState: accountState });
                    authResponse = ResponseUtils.setResponseIdToken(authResponse, idToken);
                    return (authResponse.idToken) ? authResponse : null;
                case ResponseTypes.id_token_token:
                    authResponse = ResponseUtils.setResponseIdToken(authResponse, idToken);
                    return (authResponse && authResponse.accessToken && authResponse.idToken) ? authResponse : null;
                case ResponseTypes.token:
                    authResponse = ResponseUtils.setResponseIdToken(authResponse, idToken);
                    return authResponse;
                default:
                    return null;
            }
        };
        return ResponseUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var AuthorityFactory$1 = /** @class */ (function () {
        function AuthorityFactory() {
        }
        AuthorityFactory.saveMetadataFromNetwork = function (authorityInstance, telemetryManager, correlationId) {
            return __awaiter$2(this, void 0, void 0, function () {
                var metadata;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, authorityInstance.resolveEndpointsAsync(telemetryManager, correlationId)];
                        case 1:
                            metadata = _a.sent();
                            this.metadataMap.set(authorityInstance.CanonicalAuthority, metadata);
                            return [2 /*return*/, metadata];
                    }
                });
            });
        };
        AuthorityFactory.getMetadata = function (authorityUrl) {
            return this.metadataMap.get(authorityUrl);
        };
        AuthorityFactory.saveMetadataFromConfig = function (authorityUrl, authorityMetadataJson) {
            try {
                if (authorityMetadataJson) {
                    var parsedMetadata = JSON.parse(authorityMetadataJson);
                    if (!parsedMetadata.authorization_endpoint || !parsedMetadata.end_session_endpoint || !parsedMetadata.issuer) {
                        throw ClientConfigurationError$1.createInvalidAuthorityMetadataError();
                    }
                    this.metadataMap.set(authorityUrl, {
                        AuthorizationEndpoint: parsedMetadata.authorization_endpoint,
                        EndSessionEndpoint: parsedMetadata.end_session_endpoint,
                        Issuer: parsedMetadata.issuer
                    });
                }
            }
            catch (e) {
                throw ClientConfigurationError$1.createInvalidAuthorityMetadataError();
            }
        };
        /**
         * Create an authority object of the correct type based on the url
         * Performs basic authority validation - checks to see if the authority is of a valid type (eg aad, b2c)
         */
        AuthorityFactory.CreateInstance = function (authorityUrl, validateAuthority, authorityMetadata) {
            if (StringUtils$1.isEmpty(authorityUrl)) {
                return null;
            }
            if (authorityMetadata) {
                // todo: log statements
                this.saveMetadataFromConfig(authorityUrl, authorityMetadata);
            }
            return new Authority$1(authorityUrl, validateAuthority, this.metadataMap.get(authorityUrl));
        };
        AuthorityFactory.metadataMap = new Map();
        return AuthorityFactory;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var LogLevel$1;
    (function (LogLevel) {
        LogLevel[LogLevel["Error"] = 0] = "Error";
        LogLevel[LogLevel["Warning"] = 1] = "Warning";
        LogLevel[LogLevel["Info"] = 2] = "Info";
        LogLevel[LogLevel["Verbose"] = 3] = "Verbose";
    })(LogLevel$1 || (LogLevel$1 = {}));
    var Logger$2 = /** @class */ (function () {
        function Logger(localCallback, options) {
            if (options === void 0) { options = {}; }
            /**
             * @hidden
             */
            this.level = LogLevel$1.Info;
            var _a = options.correlationId, correlationId = _a === void 0 ? "" : _a, _b = options.level, level = _b === void 0 ? LogLevel$1.Info : _b, _c = options.piiLoggingEnabled, piiLoggingEnabled = _c === void 0 ? false : _c;
            this.localCallback = localCallback;
            this.correlationId = correlationId;
            this.level = level;
            this.piiLoggingEnabled = piiLoggingEnabled;
        }
        /**
         * @hidden
         */
        Logger.prototype.logMessage = function (logLevel, logMessage, containsPii) {
            if ((logLevel > this.level) || (!this.piiLoggingEnabled && containsPii)) {
                return;
            }
            var timestamp = new Date().toUTCString();
            var log;
            if (!StringUtils$1.isEmpty(this.correlationId)) {
                log = timestamp + ":" + this.correlationId + "-" + version$2 + "-" + LogLevel$1[logLevel] + (containsPii ? "-pii" : "") + " " + logMessage;
            }
            else {
                log = timestamp + ":" + version$2 + "-" + LogLevel$1[logLevel] + (containsPii ? "-pii" : "") + " " + logMessage;
            }
            this.executeCallback(logLevel, log, containsPii);
        };
        /**
         * @hidden
         */
        Logger.prototype.executeCallback = function (level, message, containsPii) {
            if (this.localCallback) {
                this.localCallback(level, message, containsPii);
            }
        };
        /**
         * @hidden
         */
        Logger.prototype.error = function (message) {
            this.logMessage(LogLevel$1.Error, message, false);
        };
        /**
         * @hidden
         */
        Logger.prototype.errorPii = function (message) {
            this.logMessage(LogLevel$1.Error, message, true);
        };
        /**
         * @hidden
         */
        Logger.prototype.warning = function (message) {
            this.logMessage(LogLevel$1.Warning, message, false);
        };
        /**
         * @hidden
         */
        Logger.prototype.warningPii = function (message) {
            this.logMessage(LogLevel$1.Warning, message, true);
        };
        /**
         * @hidden
         */
        Logger.prototype.info = function (message) {
            this.logMessage(LogLevel$1.Info, message, false);
        };
        /**
         * @hidden
         */
        Logger.prototype.infoPii = function (message) {
            this.logMessage(LogLevel$1.Info, message, true);
        };
        /**
         * @hidden
         */
        Logger.prototype.verbose = function (message) {
            this.logMessage(LogLevel$1.Verbose, message, false);
        };
        /**
         * @hidden
         */
        Logger.prototype.verbosePii = function (message) {
            this.logMessage(LogLevel$1.Verbose, message, true);
        };
        Logger.prototype.isPiiLoggingEnabled = function () {
            return this.piiLoggingEnabled;
        };
        return Logger;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Defaults for the Configuration Options
     */
    var FRAME_TIMEOUT = 6000;
    var OFFSET = 300;
    var NAVIGATE_FRAME_WAIT = 500;
    var DEFAULT_AUTH_OPTIONS = {
        clientId: "",
        authority: null,
        validateAuthority: true,
        authorityMetadata: "",
        knownAuthorities: [],
        redirectUri: function () { return UrlUtils.getCurrentUrl(); },
        postLogoutRedirectUri: function () { return UrlUtils.getCurrentUrl(); },
        navigateToLoginRequestUrl: true
    };
    var DEFAULT_CACHE_OPTIONS = {
        cacheLocation: "sessionStorage",
        storeAuthStateInCookie: false
    };
    var DEFAULT_SYSTEM_OPTIONS$1 = {
        logger: new Logger$2(null),
        loadFrameTimeout: FRAME_TIMEOUT,
        tokenRenewalOffsetSeconds: OFFSET,
        navigateFrameWait: NAVIGATE_FRAME_WAIT
    };
    var DEFAULT_FRAMEWORK_OPTIONS = {
        isAngular: false,
        unprotectedResources: new Array(),
        protectedResourceMap: new Map()
    };
    /**
     * MSAL function that sets the default options when not explicitly configured from app developer
     *
     * @param TAuthOptions
     * @param TCacheOptions
     * @param TSystemOptions
     * @param TFrameworkOptions
     * @param TAuthorityDataOptions
     *
     * @returns TConfiguration object
     */
    function buildConfiguration$1(_a) {
        var auth = _a.auth, _b = _a.cache, cache = _b === void 0 ? {} : _b, _c = _a.system, system = _c === void 0 ? {} : _c, _d = _a.framework, framework = _d === void 0 ? {} : _d;
        var overlayedConfig = {
            auth: __assign$2({}, DEFAULT_AUTH_OPTIONS, auth),
            cache: __assign$2({}, DEFAULT_CACHE_OPTIONS, cache),
            system: __assign$2({}, DEFAULT_SYSTEM_OPTIONS$1, system),
            framework: __assign$2({}, DEFAULT_FRAMEWORK_OPTIONS, framework)
        };
        return overlayedConfig;
    }

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ServerErrorMessage = {
        serverUnavailable: {
            code: "server_unavailable",
            desc: "Server is temporarily unavailable."
        },
        unknownServerError: {
            code: "unknown_server_error"
        },
    };
    /**
     * Error thrown when there is an error with the server code, for example, unavailability.
     */
    var ServerError$1 = /** @class */ (function (_super) {
        __extends$2(ServerError, _super);
        function ServerError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            _this.name = "ServerError";
            Object.setPrototypeOf(_this, ServerError.prototype);
            return _this;
        }
        ServerError.createServerUnavailableError = function () {
            return new ServerError(ServerErrorMessage.serverUnavailable.code, ServerErrorMessage.serverUnavailable.desc);
        };
        ServerError.createUnknownServerError = function (errorDesc) {
            return new ServerError(ServerErrorMessage.unknownServerError.code, errorDesc);
        };
        return ServerError;
    }(AuthError$1));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var InteractionRequiredAuthErrorMessage$1 = {
        interactionRequired: {
            code: "interaction_required"
        },
        consentRequired: {
            code: "consent_required"
        },
        loginRequired: {
            code: "login_required"
        },
    };
    /**
     * Error thrown when the user is required to perform an interactive token request.
     */
    var InteractionRequiredAuthError$1 = /** @class */ (function (_super) {
        __extends$2(InteractionRequiredAuthError, _super);
        function InteractionRequiredAuthError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            _this.name = "InteractionRequiredAuthError";
            Object.setPrototypeOf(_this, InteractionRequiredAuthError.prototype);
            return _this;
        }
        InteractionRequiredAuthError.isInteractionRequiredError = function (errorString) {
            var interactionRequiredCodes = [
                InteractionRequiredAuthErrorMessage$1.interactionRequired.code,
                InteractionRequiredAuthErrorMessage$1.consentRequired.code,
                InteractionRequiredAuthErrorMessage$1.loginRequired.code
            ];
            return errorString && interactionRequiredCodes.indexOf(errorString) > -1;
        };
        InteractionRequiredAuthError.createLoginRequiredAuthError = function (errorDesc) {
            return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage$1.loginRequired.code, errorDesc);
        };
        InteractionRequiredAuthError.createInteractionRequiredAuthError = function (errorDesc) {
            return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage$1.interactionRequired.code, errorDesc);
        };
        InteractionRequiredAuthError.createConsentRequiredAuthError = function (errorDesc) {
            return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage$1.consentRequired.code, errorDesc);
        };
        return InteractionRequiredAuthError;
    }(ServerError$1));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    function buildResponseStateOnly(state) {
        return {
            uniqueId: "",
            tenantId: "",
            tokenType: "",
            idToken: null,
            idTokenClaims: null,
            accessToken: "",
            scopes: null,
            expiresOn: null,
            account: null,
            accountState: state,
            fromCache: false
        };
    }

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var EVENT_NAME_PREFIX = "msal.";
    var EVENT_NAME_KEY = "event_name";
    var START_TIME_KEY = "start_time";
    var ELAPSED_TIME_KEY = "elapsed_time";
    var TELEMETRY_BLOB_EVENT_NAMES = {
        MsalCorrelationIdConstStrKey: "Microsoft.MSAL.correlation_id",
        ApiTelemIdConstStrKey: "msal.api_telem_id",
        ApiIdConstStrKey: "msal.api_id",
        BrokerAppConstStrKey: "Microsoft_MSAL_broker_app",
        CacheEventCountConstStrKey: "Microsoft_MSAL_cache_event_count",
        HttpEventCountTelemetryBatchKey: "Microsoft_MSAL_http_event_count",
        IdpConstStrKey: "Microsoft_MSAL_idp",
        IsSilentTelemetryBatchKey: "",
        IsSuccessfulConstStrKey: "Microsoft_MSAL_is_successful",
        ResponseTimeConstStrKey: "Microsoft_MSAL_response_time",
        TenantIdConstStrKey: "Microsoft_MSAL_tenant_id",
        UiEventCountTelemetryBatchKey: "Microsoft_MSAL_ui_event_count"
    };
    // This is used to replace the real tenant in telemetry info
    var TENANT_PLACEHOLDER = "<tenant>";

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var scrubTenantFromUri = function (uri) {
        var url = UrlUtils.GetUrlComponents(uri);
        // validate trusted host
        if (Authority$1.isAdfs(uri)) {
            /**
             * returning what was passed because the library needs to work with uris that are non
             * AAD trusted but passed by users such as B2C or others.
             * HTTP Events for instance can take a url to the open id config endpoint
             */
            return uri;
        }
        var pathParams = url.PathSegments;
        if (pathParams && pathParams.length >= 2) {
            var tenantPosition = pathParams[1] === "tfp" ? 2 : 1;
            if (tenantPosition < pathParams.length) {
                pathParams[tenantPosition] = TENANT_PLACEHOLDER;
            }
        }
        return url.Protocol + "//" + url.HostNameAndPort + "/" + pathParams.join("/");
    };
    var hashPersonalIdentifier = function (valueToHash) {
        /*
         * TODO sha256 this
         * Current test runner is being funny with node libs that are webpacked anyway
         * need a different solution
         */
        return CryptoUtils.base64Encode(valueToHash);
    };
    var prependEventNamePrefix = function (suffix) { return "" + EVENT_NAME_PREFIX + (suffix || ""); };
    var supportsBrowserPerformance = function () { return !!(typeof window !== "undefined" &&
        "performance" in window &&
        window.performance.mark &&
        window.performance.measure); };
    var endBrowserPerformanceMeasurement = function (measureName, startMark, endMark) {
        if (supportsBrowserPerformance()) {
            window.performance.mark(endMark);
            window.performance.measure(measureName, startMark, endMark);
            window.performance.clearMeasures(measureName);
            window.performance.clearMarks(startMark);
            window.performance.clearMarks(endMark);
        }
    };
    var startBrowserPerformanceMeasurement = function (startMark) {
        if (supportsBrowserPerformance()) {
            window.performance.mark(startMark);
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var TelemetryEvent = /** @class */ (function () {
        function TelemetryEvent(eventName, correlationId, eventLabel) {
            var _a;
            this.eventId = CryptoUtils.createNewGuid();
            this.label = eventLabel;
            this.event = (_a = {},
                _a[prependEventNamePrefix(EVENT_NAME_KEY)] = eventName,
                _a[prependEventNamePrefix(ELAPSED_TIME_KEY)] = -1,
                _a["" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = correlationId,
                _a);
        }
        TelemetryEvent.prototype.setElapsedTime = function (time) {
            this.event[prependEventNamePrefix(ELAPSED_TIME_KEY)] = time;
        };
        TelemetryEvent.prototype.stop = function () {
            // Set duration of event
            this.setElapsedTime(+Date.now() - +this.startTimestamp);
            endBrowserPerformanceMeasurement(this.displayName, this.perfStartMark, this.perfEndMark);
        };
        TelemetryEvent.prototype.start = function () {
            this.startTimestamp = Date.now();
            this.event[prependEventNamePrefix(START_TIME_KEY)] = this.startTimestamp;
            startBrowserPerformanceMeasurement(this.perfStartMark);
        };
        Object.defineProperty(TelemetryEvent.prototype, "telemetryCorrelationId", {
            get: function () {
                return this.event["" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey];
            },
            set: function (value) {
                this.event["" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TelemetryEvent.prototype, "eventName", {
            get: function () {
                return this.event[prependEventNamePrefix(EVENT_NAME_KEY)];
            },
            enumerable: true,
            configurable: true
        });
        TelemetryEvent.prototype.get = function () {
            return __assign$2({}, this.event, { eventId: this.eventId });
        };
        Object.defineProperty(TelemetryEvent.prototype, "key", {
            get: function () {
                return this.telemetryCorrelationId + "_" + this.eventId + "-" + this.eventName;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TelemetryEvent.prototype, "displayName", {
            get: function () {
                return "Msal-" + this.label + "-" + this.telemetryCorrelationId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TelemetryEvent.prototype, "perfStartMark", {
            get: function () {
                return "start-" + this.key;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TelemetryEvent.prototype, "perfEndMark", {
            get: function () {
                return "end-" + this.key;
            },
            enumerable: true,
            configurable: true
        });
        return TelemetryEvent;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var DefaultEvent = /** @class */ (function (_super) {
        __extends$2(DefaultEvent, _super);
        // TODO Platform Type
        function DefaultEvent(platform, correlationId, clientId, eventCount) {
            var _this = _super.call(this, prependEventNamePrefix("default_event"), correlationId, "DefaultEvent") || this;
            _this.event[prependEventNamePrefix("client_id")] = clientId;
            _this.event[prependEventNamePrefix("sdk_plaform")] = platform.sdk;
            _this.event[prependEventNamePrefix("sdk_version")] = platform.sdkVersion;
            _this.event[prependEventNamePrefix("application_name")] = platform.applicationName;
            _this.event[prependEventNamePrefix("application_version")] = platform.applicationVersion;
            _this.event[prependEventNamePrefix("effective_connection_speed")] = platform.networkInformation && platform.networkInformation.connectionSpeed;
            _this.event["" + TELEMETRY_BLOB_EVENT_NAMES.UiEventCountTelemetryBatchKey] = _this.getEventCount(prependEventNamePrefix("ui_event"), eventCount);
            _this.event["" + TELEMETRY_BLOB_EVENT_NAMES.HttpEventCountTelemetryBatchKey] = _this.getEventCount(prependEventNamePrefix("http_event"), eventCount);
            _this.event["" + TELEMETRY_BLOB_EVENT_NAMES.CacheEventCountConstStrKey] = _this.getEventCount(prependEventNamePrefix("cache_event"), eventCount);
            return _this;
            // / Device id?
        }
        DefaultEvent.prototype.getEventCount = function (eventName, eventCount) {
            if (!eventCount[eventName]) {
                return 0;
            }
            return eventCount[eventName];
        };
        return DefaultEvent;
    }(TelemetryEvent));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var _a;
    var EVENT_KEYS = {
        AUTHORITY: prependEventNamePrefix("authority"),
        AUTHORITY_TYPE: prependEventNamePrefix("authority_type"),
        PROMPT: prependEventNamePrefix("ui_behavior"),
        TENANT_ID: prependEventNamePrefix("tenant_id"),
        USER_ID: prependEventNamePrefix("user_id"),
        WAS_SUCESSFUL: prependEventNamePrefix("was_successful"),
        API_ERROR_CODE: prependEventNamePrefix("api_error_code"),
        LOGIN_HINT: prependEventNamePrefix("login_hint")
    };
    var API_CODE;
    (function (API_CODE) {
        API_CODE[API_CODE["AcquireTokenRedirect"] = 2001] = "AcquireTokenRedirect";
        API_CODE[API_CODE["AcquireTokenSilent"] = 2002] = "AcquireTokenSilent";
        API_CODE[API_CODE["AcquireTokenPopup"] = 2003] = "AcquireTokenPopup";
        API_CODE[API_CODE["LoginRedirect"] = 2004] = "LoginRedirect";
        API_CODE[API_CODE["LoginPopup"] = 2005] = "LoginPopup";
        API_CODE[API_CODE["Logout"] = 2006] = "Logout";
    })(API_CODE || (API_CODE = {}));
    var API_EVENT_IDENTIFIER;
    (function (API_EVENT_IDENTIFIER) {
        API_EVENT_IDENTIFIER["AcquireTokenRedirect"] = "AcquireTokenRedirect";
        API_EVENT_IDENTIFIER["AcquireTokenSilent"] = "AcquireTokenSilent";
        API_EVENT_IDENTIFIER["AcquireTokenPopup"] = "AcquireTokenPopup";
        API_EVENT_IDENTIFIER["LoginRedirect"] = "LoginRedirect";
        API_EVENT_IDENTIFIER["LoginPopup"] = "LoginPopup";
        API_EVENT_IDENTIFIER["Logout"] = "Logout";
    })(API_EVENT_IDENTIFIER || (API_EVENT_IDENTIFIER = {}));
    var mapEventIdentiferToCode = (_a = {},
        _a[API_EVENT_IDENTIFIER.AcquireTokenSilent] = API_CODE.AcquireTokenSilent,
        _a[API_EVENT_IDENTIFIER.AcquireTokenPopup] = API_CODE.AcquireTokenPopup,
        _a[API_EVENT_IDENTIFIER.AcquireTokenRedirect] = API_CODE.AcquireTokenRedirect,
        _a[API_EVENT_IDENTIFIER.LoginPopup] = API_CODE.LoginPopup,
        _a[API_EVENT_IDENTIFIER.LoginRedirect] = API_CODE.LoginRedirect,
        _a[API_EVENT_IDENTIFIER.Logout] = API_CODE.Logout,
        _a);
    var ApiEvent = /** @class */ (function (_super) {
        __extends$2(ApiEvent, _super);
        function ApiEvent(correlationId, piiEnabled, apiEventIdentifier) {
            var _this = _super.call(this, prependEventNamePrefix("api_event"), correlationId, apiEventIdentifier) || this;
            if (apiEventIdentifier) {
                _this.apiCode = mapEventIdentiferToCode[apiEventIdentifier];
                _this.apiEventIdentifier = apiEventIdentifier;
            }
            _this.piiEnabled = piiEnabled;
            return _this;
        }
        Object.defineProperty(ApiEvent.prototype, "apiEventIdentifier", {
            set: function (apiEventIdentifier) {
                this.event[TELEMETRY_BLOB_EVENT_NAMES.ApiTelemIdConstStrKey] = apiEventIdentifier;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApiEvent.prototype, "apiCode", {
            set: function (apiCode) {
                this.event[TELEMETRY_BLOB_EVENT_NAMES.ApiIdConstStrKey] = apiCode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApiEvent.prototype, "authority", {
            set: function (uri) {
                this.event[EVENT_KEYS.AUTHORITY] = scrubTenantFromUri(uri).toLowerCase();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApiEvent.prototype, "apiErrorCode", {
            set: function (errorCode) {
                this.event[EVENT_KEYS.API_ERROR_CODE] = errorCode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApiEvent.prototype, "tenantId", {
            set: function (tenantId) {
                this.event[EVENT_KEYS.TENANT_ID] = this.piiEnabled && tenantId ?
                    hashPersonalIdentifier(tenantId)
                    : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApiEvent.prototype, "accountId", {
            set: function (accountId) {
                this.event[EVENT_KEYS.USER_ID] = this.piiEnabled && accountId ?
                    hashPersonalIdentifier(accountId)
                    : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApiEvent.prototype, "wasSuccessful", {
            get: function () {
                return this.event[EVENT_KEYS.WAS_SUCESSFUL] === true;
            },
            set: function (wasSuccessful) {
                this.event[EVENT_KEYS.WAS_SUCESSFUL] = wasSuccessful;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApiEvent.prototype, "loginHint", {
            set: function (loginHint) {
                this.event[EVENT_KEYS.LOGIN_HINT] = this.piiEnabled && loginHint ?
                    hashPersonalIdentifier(loginHint)
                    : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApiEvent.prototype, "authorityType", {
            set: function (authorityType) {
                this.event[EVENT_KEYS.AUTHORITY_TYPE] = authorityType.toLowerCase();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApiEvent.prototype, "promptType", {
            set: function (promptType) {
                this.event[EVENT_KEYS.PROMPT] = promptType.toLowerCase();
            },
            enumerable: true,
            configurable: true
        });
        return ApiEvent;
    }(TelemetryEvent));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var EVENT_KEYS$1 = {
        HTTP_PATH: prependEventNamePrefix("http_path"),
        USER_AGENT: prependEventNamePrefix("user_agent"),
        QUERY_PARAMETERS: prependEventNamePrefix("query_parameters"),
        API_VERSION: prependEventNamePrefix("api_version"),
        RESPONSE_CODE: prependEventNamePrefix("response_code"),
        O_AUTH_ERROR_CODE: prependEventNamePrefix("oauth_error_code"),
        HTTP_METHOD: prependEventNamePrefix("http_method"),
        REQUEST_ID_HEADER: prependEventNamePrefix("request_id_header"),
        SPE_INFO: prependEventNamePrefix("spe_info"),
        SERVER_ERROR_CODE: prependEventNamePrefix("server_error_code"),
        SERVER_SUB_ERROR_CODE: prependEventNamePrefix("server_sub_error_code"),
        URL: prependEventNamePrefix("url")
    };
    var HttpEvent = /** @class */ (function (_super) {
        __extends$2(HttpEvent, _super);
        function HttpEvent(correlationId, eventLabel) {
            return _super.call(this, prependEventNamePrefix("http_event"), correlationId, eventLabel) || this;
        }
        Object.defineProperty(HttpEvent.prototype, "url", {
            set: function (url) {
                var scrubbedUri = scrubTenantFromUri(url);
                this.event[EVENT_KEYS$1.URL] = scrubbedUri && scrubbedUri.toLowerCase();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpEvent.prototype, "httpPath", {
            set: function (httpPath) {
                this.event[EVENT_KEYS$1.HTTP_PATH] = scrubTenantFromUri(httpPath).toLowerCase();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpEvent.prototype, "userAgent", {
            set: function (userAgent) {
                this.event[EVENT_KEYS$1.USER_AGENT] = userAgent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpEvent.prototype, "queryParams", {
            set: function (queryParams) {
                this.event[EVENT_KEYS$1.QUERY_PARAMETERS] = ServerRequestParameters.generateQueryParametersString(queryParams);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpEvent.prototype, "apiVersion", {
            set: function (apiVersion) {
                this.event[EVENT_KEYS$1.API_VERSION] = apiVersion.toLowerCase();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpEvent.prototype, "httpResponseStatus", {
            set: function (statusCode) {
                this.event[EVENT_KEYS$1.RESPONSE_CODE] = statusCode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpEvent.prototype, "oAuthErrorCode", {
            set: function (errorCode) {
                this.event[EVENT_KEYS$1.O_AUTH_ERROR_CODE] = errorCode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpEvent.prototype, "httpMethod", {
            set: function (httpMethod) {
                this.event[EVENT_KEYS$1.HTTP_METHOD] = httpMethod;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpEvent.prototype, "requestIdHeader", {
            set: function (requestIdHeader) {
                this.event[EVENT_KEYS$1.REQUEST_ID_HEADER] = requestIdHeader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpEvent.prototype, "speInfo", {
            /**
             * Indicates whether the request was executed on a ring serving SPE traffic.
             * An empty string indicates this occurred on an outer ring, and the string "I"
             * indicates the request occurred on the inner ring
             */
            set: function (speInfo) {
                this.event[EVENT_KEYS$1.SPE_INFO] = speInfo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpEvent.prototype, "serverErrorCode", {
            set: function (errorCode) {
                this.event[EVENT_KEYS$1.SERVER_ERROR_CODE] = errorCode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpEvent.prototype, "serverSubErrorCode", {
            set: function (subErrorCode) {
                this.event[EVENT_KEYS$1.SERVER_SUB_ERROR_CODE] = subErrorCode;
            },
            enumerable: true,
            configurable: true
        });
        return HttpEvent;
    }(TelemetryEvent));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var TelemetryManager = /** @class */ (function () {
        function TelemetryManager(config, telemetryEmitter, logger) {
            // correlation Id to list of events
            this.completedEvents = {};
            // event key to event
            this.inProgressEvents = {};
            // correlation id to map of eventname to count
            this.eventCountByCorrelationId = {};
            // Implement after API EVENT
            this.onlySendFailureTelemetry = false;
            // TODO THROW if bad options
            this.telemetryPlatform = __assign$2({ sdk: Constants$2.libraryName, sdkVersion: version$2, networkInformation: {
                    // @ts-ignore
                    connectionSpeed: typeof navigator !== "undefined" && navigator.connection && navigator.connection.effectiveType
                } }, config.platform);
            this.clientId = config.clientId;
            this.onlySendFailureTelemetry = config.onlySendFailureTelemetry;
            /*
             * TODO, when i get to wiring this through, think about what it means if
             * a developer does not implement telem at all, we still instrument, but telemetryEmitter can be
             * optional?
             */
            this.telemetryEmitter = telemetryEmitter;
            this.logger = logger;
        }
        TelemetryManager.getTelemetrymanagerStub = function (clientId, logger) {
            var applicationName = "UnSetStub";
            var applicationVersion = "0.0";
            var telemetryEmitter = function () { };
            var telemetryPlatform = {
                applicationName: applicationName,
                applicationVersion: applicationVersion
            };
            var telemetryManagerConfig = {
                platform: telemetryPlatform,
                clientId: clientId
            };
            return new this(telemetryManagerConfig, telemetryEmitter, logger);
        };
        TelemetryManager.prototype.startEvent = function (event) {
            this.logger.verbose("Telemetry Event started: " + event.key);
            if (!this.telemetryEmitter) {
                return;
            }
            event.start();
            this.inProgressEvents[event.key] = event;
        };
        TelemetryManager.prototype.stopEvent = function (event) {
            this.logger.verbose("Telemetry Event stopped: " + event.key);
            if (!this.telemetryEmitter || !this.inProgressEvents[event.key]) {
                return;
            }
            event.stop();
            this.incrementEventCount(event);
            var completedEvents = this.completedEvents[event.telemetryCorrelationId];
            this.completedEvents[event.telemetryCorrelationId] = (completedEvents || []).concat([event]);
            delete this.inProgressEvents[event.key];
        };
        TelemetryManager.prototype.flush = function (correlationId) {
            var _this = this;
            this.logger.verbose("Flushing telemetry events: " + correlationId);
            // If there is only unfinished events should this still return them?
            if (!this.telemetryEmitter || !this.completedEvents[correlationId]) {
                return;
            }
            var orphanedEvents = this.getOrphanedEvents(correlationId);
            orphanedEvents.forEach(function (event) { return _this.incrementEventCount(event); });
            var eventsToFlush = this.completedEvents[correlationId].concat(orphanedEvents);
            delete this.completedEvents[correlationId];
            var eventCountsToFlush = this.eventCountByCorrelationId[correlationId];
            delete this.eventCountByCorrelationId[correlationId];
            // TODO add funcitonality for onlyFlushFailures after implementing api event? ??
            if (!eventsToFlush || !eventsToFlush.length) {
                return;
            }
            var defaultEvent = new DefaultEvent(this.telemetryPlatform, correlationId, this.clientId, eventCountsToFlush);
            var eventsWithDefaultEvent = eventsToFlush.concat([defaultEvent]);
            this.telemetryEmitter(eventsWithDefaultEvent.map(function (e) { return e.get(); }));
        };
        TelemetryManager.prototype.createAndStartApiEvent = function (correlationId, apiEventIdentifier) {
            var apiEvent = new ApiEvent(correlationId, this.logger.isPiiLoggingEnabled(), apiEventIdentifier);
            this.startEvent(apiEvent);
            return apiEvent;
        };
        TelemetryManager.prototype.stopAndFlushApiEvent = function (correlationId, apiEvent, wasSuccessful, errorCode) {
            apiEvent.wasSuccessful = wasSuccessful;
            if (errorCode) {
                apiEvent.apiErrorCode = errorCode;
            }
            this.stopEvent(apiEvent);
            this.flush(correlationId);
        };
        TelemetryManager.prototype.createAndStartHttpEvent = function (correlation, httpMethod, url, eventLabel) {
            var httpEvent = new HttpEvent(correlation, eventLabel);
            httpEvent.url = url;
            httpEvent.httpMethod = httpMethod;
            this.startEvent(httpEvent);
            return httpEvent;
        };
        TelemetryManager.prototype.incrementEventCount = function (event) {
            var _a;
            /*
             * TODO, name cache event different?
             * if type is cache event, change name
             */
            var eventName = event.eventName;
            var eventCount = this.eventCountByCorrelationId[event.telemetryCorrelationId];
            if (!eventCount) {
                this.eventCountByCorrelationId[event.telemetryCorrelationId] = (_a = {},
                    _a[eventName] = 1,
                    _a);
            }
            else {
                eventCount[eventName] = eventCount[eventName] ? eventCount[eventName] + 1 : 1;
            }
        };
        TelemetryManager.prototype.getOrphanedEvents = function (correlationId) {
            var _this = this;
            return Object.keys(this.inProgressEvents)
                .reduce(function (memo, eventKey) {
                if (eventKey.indexOf(correlationId) !== -1) {
                    var event_1 = _this.inProgressEvents[eventKey];
                    delete _this.inProgressEvents[eventKey];
                    return memo.concat([event_1]);
                }
                return memo;
            }, []);
        };
        return TelemetryManager;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var AuthCacheUtils = /** @class */ (function () {
        function AuthCacheUtils() {
        }
        AuthCacheUtils.filterTokenCacheItemsByScope = function (tokenCacheItems, requestScopes) {
            return tokenCacheItems.filter(function (cacheItem) {
                var cachedScopes = cacheItem.key.scopes.split(" ");
                var searchScopes = ScopeSet$1.removeDefaultScopes(requestScopes);
                // If requestScopes contain only default scopes search for default scopes otherwise search for everything but default scopes
                return searchScopes.length === 0 ? ScopeSet$1.containsScope(cachedScopes, requestScopes) : ScopeSet$1.containsScope(cachedScopes, searchScopes);
            });
        };
        AuthCacheUtils.filterTokenCacheItemsByAuthority = function (tokenCacheItems, authority) {
            return tokenCacheItems.filter(function (cacheItem) { return UrlUtils.CanonicalizeUri(cacheItem.key.authority) === authority; });
        };
        AuthCacheUtils.filterTokenCacheItemsByDomain = function (tokenCacheItems, requestDomain) {
            return tokenCacheItems.filter(function (cacheItem) {
                var cacheItemDomain = UrlUtils.GetUrlComponents(cacheItem.key.authority).HostNameAndPort;
                return cacheItemDomain === requestDomain;
            });
        };
        return AuthCacheUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    // default authority
    var DEFAULT_AUTHORITY$1 = "https://login.microsoftonline.com/common";
    /**
     * UserAgentApplication class
     *
     * Object Instance that the developer can use to make loginXX OR acquireTokenXX functions
     */
    var UserAgentApplication = /** @class */ (function () {
        /**
         * @constructor
         * Constructor for the UserAgentApplication used to instantiate the UserAgentApplication object
         *
         * Important attributes in the Configuration object for auth are:
         * - clientID: the application ID of your application.
         * You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
         * - authority: the authority URL for your application.
         *
         * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
         * It is of the form https://login.microsoftonline.com/&lt;Enter_the_Tenant_Info_Here&gt;.
         * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
         * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
         * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
         * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
         *
         *
         * In Azure B2C, authority is of the form https://&lt;instance&gt;/tfp/&lt;tenant&gt;/&lt;policyName&gt;/
         *
         * @param {@link (Configuration:type)} configuration object for the MSAL UserAgentApplication instance
         */
        function UserAgentApplication(configuration) {
            // callbacks for token/error
            this.authResponseCallback = null;
            this.tokenReceivedCallback = null;
            this.errorReceivedCallback = null;
            // Set the Configuration
            this.config = buildConfiguration$1(configuration);
            this.logger = this.config.system.logger;
            this.clientId = this.config.auth.clientId;
            this.inCookie = this.config.cache.storeAuthStateInCookie;
            this.telemetryManager = this.getTelemetryManagerFromConfig(this.config.system.telemetry, this.clientId);
            TrustedAuthority$1.setTrustedAuthoritiesFromConfig(this.config.auth.validateAuthority, this.config.auth.knownAuthorities);
            AuthorityFactory$1.saveMetadataFromConfig(this.config.auth.authority, this.config.auth.authorityMetadata);
            // if no authority is passed, set the default: "https://login.microsoftonline.com/common"
            this.authority = this.config.auth.authority || DEFAULT_AUTHORITY$1;
            // cache keys msal - typescript throws an error if any value other than "localStorage" or "sessionStorage" is passed
            this.cacheStorage = new AuthCache(this.clientId, this.config.cache.cacheLocation, this.inCookie);
            // Initialize window handling code
            window.activeRenewals = {};
            window.renewStates = [];
            window.callbackMappedToRenewStates = {};
            window.promiseMappedToRenewStates = {};
            window.msal = this;
            var urlHash = window.location.hash;
            var urlContainsHash = UrlUtils.urlContainsHash(urlHash);
            // check if back button is pressed
            WindowUtils.checkIfBackButtonIsPressed(this.cacheStorage);
            // On the server 302 - Redirect, handle this
            if (urlContainsHash) {
                var stateInfo = this.getResponseState(urlHash);
                if (stateInfo.method === Constants$2.interactionTypeRedirect) {
                    this.handleRedirectAuthenticationResponse(urlHash);
                }
            }
        }
        Object.defineProperty(UserAgentApplication.prototype, "authority", {
            /**
             * Method to manage the authority URL.
             *
             * @returns {string} authority
             */
            get: function () {
                return this.authorityInstance.CanonicalAuthority;
            },
            /**
             * setter for the authority URL
             * @param {string} authority
             */
            // If the developer passes an authority, create an instance
            set: function (val) {
                this.authorityInstance = AuthorityFactory$1.CreateInstance(val, this.config.auth.validateAuthority);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Get the current authority instance from the MSAL configuration object
         *
         * @returns {@link Authority} authority instance
         */
        UserAgentApplication.prototype.getAuthorityInstance = function () {
            return this.authorityInstance;
        };
        UserAgentApplication.prototype.handleRedirectCallback = function (authOrTokenCallback, errorReceivedCallback) {
            if (!authOrTokenCallback) {
                throw ClientConfigurationError$1.createInvalidCallbackObjectError(authOrTokenCallback);
            }
            // Set callbacks
            if (errorReceivedCallback) {
                this.tokenReceivedCallback = authOrTokenCallback;
                this.errorReceivedCallback = errorReceivedCallback;
                this.logger.warning("This overload for callback is deprecated - please change the format of the callbacks to a single callback as shown: (err: AuthError, response: AuthResponse).");
            }
            else {
                this.authResponseCallback = authOrTokenCallback;
            }
            if (this.redirectError) {
                this.authErrorHandler(Constants$2.interactionTypeRedirect, this.redirectError, this.redirectResponse);
            }
            else if (this.redirectResponse) {
                this.authResponseHandler(Constants$2.interactionTypeRedirect, this.redirectResponse);
            }
        };
        /**
         * Public API to verify if the URL contains the hash with known properties
         * @param hash
         */
        UserAgentApplication.prototype.urlContainsHash = function (hash) {
            this.logger.verbose("UrlContainsHash has been called");
            return UrlUtils.urlContainsHash(hash);
        };
        UserAgentApplication.prototype.authResponseHandler = function (interactionType, response, resolve) {
            this.logger.verbose("AuthResponseHandler has been called");
            if (interactionType === Constants$2.interactionTypeRedirect) {
                this.logger.verbose("Interaction type is redirect");
                if (this.errorReceivedCallback) {
                    this.logger.verbose("Two callbacks were provided to handleRedirectCallback, calling success callback with response");
                    this.tokenReceivedCallback(response);
                }
                else if (this.authResponseCallback) {
                    this.logger.verbose("One callback was provided to handleRedirectCallback, calling authResponseCallback with response");
                    this.authResponseCallback(null, response);
                }
            }
            else if (interactionType === Constants$2.interactionTypePopup) {
                this.logger.verbose("Interaction type is popup, resolving");
                resolve(response);
            }
            else {
                throw ClientAuthError$1.createInvalidInteractionTypeError();
            }
        };
        UserAgentApplication.prototype.authErrorHandler = function (interactionType, authErr, response, reject) {
            this.logger.verbose("AuthErrorHandler has been called");
            // set interaction_status to complete
            this.cacheStorage.removeItem(TemporaryCacheKeys$1.INTERACTION_STATUS);
            if (interactionType === Constants$2.interactionTypeRedirect) {
                this.logger.verbose("Interaction type is redirect");
                if (this.errorReceivedCallback) {
                    this.logger.verbose("Two callbacks were provided to handleRedirectCallback, calling error callback");
                    this.errorReceivedCallback(authErr, response.accountState);
                }
                else if (this.authResponseCallback) {
                    this.logger.verbose("One callback was provided to handleRedirectCallback, calling authResponseCallback with error");
                    this.authResponseCallback(authErr, response);
                }
                else {
                    this.logger.verbose("handleRedirectCallback has not been called and no callbacks are registered, throwing error");
                    throw authErr;
                }
            }
            else if (interactionType === Constants$2.interactionTypePopup) {
                this.logger.verbose("Interaction type is popup, rejecting");
                reject(authErr);
            }
            else {
                throw ClientAuthError$1.createInvalidInteractionTypeError();
            }
        };
        // #endregion
        /**
         * Use when initiating the login process by redirecting the user's browser to the authorization endpoint.
         * @param {@link (AuthenticationParameters:type)}
         */
        UserAgentApplication.prototype.loginRedirect = function (userRequest) {
            this.logger.verbose("LoginRedirect has been called");
            // validate request
            var request = RequestUtils.validateRequest(userRequest, true, this.clientId, Constants$2.interactionTypeRedirect);
            this.acquireTokenInteractive(Constants$2.interactionTypeRedirect, true, request, null, null);
        };
        /**
         * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint.
         * @param {@link (AuthenticationParameters:type)}
         *
         * To renew idToken, please pass clientId as the only scope in the Authentication Parameters
         */
        UserAgentApplication.prototype.acquireTokenRedirect = function (userRequest) {
            this.logger.verbose("AcquireTokenRedirect has been called");
            // validate request
            var request = RequestUtils.validateRequest(userRequest, false, this.clientId, Constants$2.interactionTypeRedirect);
            this.acquireTokenInteractive(Constants$2.interactionTypeRedirect, false, request, null, null);
        };
        /**
         * Use when initiating the login process via opening a popup window in the user's browser
         *
         * @param {@link (AuthenticationParameters:type)}
         *
         * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
         */
        UserAgentApplication.prototype.loginPopup = function (userRequest) {
            var _this = this;
            this.logger.verbose("LoginPopup has been called");
            // validate request
            var request = RequestUtils.validateRequest(userRequest, true, this.clientId, Constants$2.interactionTypePopup);
            var apiEvent = this.telemetryManager.createAndStartApiEvent(request.correlationId, API_EVENT_IDENTIFIER.LoginPopup);
            return new Promise(function (resolve, reject) {
                _this.acquireTokenInteractive(Constants$2.interactionTypePopup, true, request, resolve, reject);
            })
                .then(function (resp) {
                _this.logger.verbose("Successfully logged in");
                _this.telemetryManager.stopAndFlushApiEvent(request.correlationId, apiEvent, true);
                return resp;
            })
                .catch(function (error) {
                _this.cacheStorage.resetTempCacheItems(request.state);
                _this.telemetryManager.stopAndFlushApiEvent(request.correlationId, apiEvent, false, error.errorCode);
                throw error;
            });
        };
        /**
         * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser
         * @param {@link AuthenticationParameters}
         *
         * To renew idToken, please pass clientId as the only scope in the Authentication Parameters
         * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
         */
        UserAgentApplication.prototype.acquireTokenPopup = function (userRequest) {
            var _this = this;
            this.logger.verbose("AcquireTokenPopup has been called");
            // validate request
            var request = RequestUtils.validateRequest(userRequest, false, this.clientId, Constants$2.interactionTypePopup);
            var apiEvent = this.telemetryManager.createAndStartApiEvent(request.correlationId, API_EVENT_IDENTIFIER.AcquireTokenPopup);
            return new Promise(function (resolve, reject) {
                _this.acquireTokenInteractive(Constants$2.interactionTypePopup, false, request, resolve, reject);
            })
                .then(function (resp) {
                _this.logger.verbose("Successfully acquired token");
                _this.telemetryManager.stopAndFlushApiEvent(request.correlationId, apiEvent, true);
                return resp;
            })
                .catch(function (error) {
                _this.cacheStorage.resetTempCacheItems(request.state);
                _this.telemetryManager.stopAndFlushApiEvent(request.correlationId, apiEvent, false, error.errorCode);
                throw error;
            });
        };
        // #region Acquire Token
        /**
         * Use when initiating the login process or when you want to obtain an access_token for your API,
         * either by redirecting the user's browser window to the authorization endpoint or via opening a popup window in the user's browser.
         * @param {@link (AuthenticationParameters:type)}
         *
         * To renew idToken, please pass clientId as the only scope in the Authentication Parameters
         */
        UserAgentApplication.prototype.acquireTokenInteractive = function (interactionType, isLoginCall, request, resolve, reject) {
            var _this = this;
            this.logger.verbose("AcquireTokenInteractive has been called");
            // block the request if made from the hidden iframe
            WindowUtils.blockReloadInHiddenIframes();
            var interactionProgress = this.cacheStorage.getItem(TemporaryCacheKeys$1.INTERACTION_STATUS);
            if (interactionType === Constants$2.interactionTypeRedirect) {
                this.cacheStorage.setItem(TemporaryCacheKeys$1.REDIRECT_REQUEST, "" + Constants$2.inProgress + Constants$2.resourceDelimiter + request.state);
            }
            // If already in progress, do not proceed
            if (interactionProgress === Constants$2.inProgress) {
                var thrownError = isLoginCall ? ClientAuthError$1.createLoginInProgressError() : ClientAuthError$1.createAcquireTokenInProgressError();
                var stateOnlyResponse = buildResponseStateOnly(this.getAccountState(request.state));
                this.cacheStorage.resetTempCacheItems(request.state);
                this.authErrorHandler(interactionType, thrownError, stateOnlyResponse, reject);
                return;
            }
            // Get the account object if a session exists
            var account;
            if (request && request.account && !isLoginCall) {
                account = request.account;
                this.logger.verbose("Account set from request");
            }
            else {
                account = this.getAccount();
                this.logger.verbose("Account set from MSAL Cache");
            }
            // If no session exists, prompt the user to login.
            if (!account && !ServerRequestParameters.isSSOParam(request)) {
                if (isLoginCall) {
                    // extract ADAL id_token if exists
                    var adalIdToken = this.extractADALIdToken();
                    // silent login if ADAL id_token is retrieved successfully - SSO
                    if (adalIdToken && !request.scopes) {
                        this.logger.info("ADAL's idToken exists. Extracting login information from ADAL's idToken");
                        var tokenRequest = this.buildIDTokenRequest(request);
                        this.silentLogin = true;
                        this.acquireTokenSilent(tokenRequest).then(function (response) {
                            _this.silentLogin = false;
                            _this.logger.info("Unified cache call is successful");
                            _this.authResponseHandler(interactionType, response, resolve);
                            return;
                        }, function (error) {
                            _this.silentLogin = false;
                            _this.logger.error("Error occurred during unified cache ATS: " + error);
                            // proceed to login since ATS failed
                            _this.acquireTokenHelper(null, interactionType, isLoginCall, request, resolve, reject);
                        });
                    }
                    // No ADAL token found, proceed to login
                    else {
                        this.logger.verbose("Login call but no token found, proceed to login");
                        this.acquireTokenHelper(null, interactionType, isLoginCall, request, resolve, reject);
                    }
                }
                // AcquireToken call, but no account or context given, so throw error
                else {
                    this.logger.verbose("AcquireToken call, no context or account given");
                    this.logger.info("User login is required");
                    var stateOnlyResponse = buildResponseStateOnly(this.getAccountState(request.state));
                    this.cacheStorage.resetTempCacheItems(request.state);
                    this.authErrorHandler(interactionType, ClientAuthError$1.createUserLoginRequiredError(), stateOnlyResponse, reject);
                    return;
                }
            }
            // User session exists
            else {
                this.logger.verbose("User session exists, login not required");
                this.acquireTokenHelper(account, interactionType, isLoginCall, request, resolve, reject);
            }
        };
        /**
         * @hidden
         * @ignore
         * Helper function to acquireToken
         *
         */
        UserAgentApplication.prototype.acquireTokenHelper = function (account, interactionType, isLoginCall, request, resolve, reject) {
            return __awaiter$2(this, void 0, void 0, function () {
                var requestSignature, serverAuthenticationRequest, acquireTokenAuthority, popUpWindow, responseType, loginStartPage, urlNavigate, hash, error_1, navigate, err_1;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.verbose("AcquireTokenHelper has been called");
                            this.logger.verbose("Interaction type: " + interactionType + ". isLoginCall: " + isLoginCall);
                            // Track the acquireToken progress
                            this.cacheStorage.setItem(TemporaryCacheKeys$1.INTERACTION_STATUS, Constants$2.inProgress);
                            requestSignature = request.scopes ? request.scopes.join(" ").toLowerCase() : Constants$2.oidcScopes.join(" ");
                            this.logger.verbosePii("Request signature: " + requestSignature);
                            acquireTokenAuthority = (request && request.authority) ? AuthorityFactory$1.CreateInstance(request.authority, this.config.auth.validateAuthority, request.authorityMetadata) : this.authorityInstance;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 11, , 12]);
                            if (!!acquireTokenAuthority.hasCachedMetadata()) return [3 /*break*/, 3];
                            this.logger.verbose("No cached metadata for authority");
                            return [4 /*yield*/, AuthorityFactory$1.saveMetadataFromNetwork(acquireTokenAuthority, this.telemetryManager, request.correlationId)];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            this.logger.verbose("Cached metadata found for authority");
                            _a.label = 4;
                        case 4:
                            responseType = isLoginCall ? ResponseTypes.id_token : this.getTokenType(account, request.scopes);
                            loginStartPage = request.redirectStartPage || window.location.href;
                            serverAuthenticationRequest = new ServerRequestParameters(acquireTokenAuthority, this.clientId, responseType, this.getRedirectUri(request && request.redirectUri), request.scopes, request.state, request.correlationId);
                            this.logger.verbose("Finished building server authentication request");
                            this.updateCacheEntries(serverAuthenticationRequest, account, isLoginCall, loginStartPage);
                            this.logger.verbose("Updating cache entries");
                            // populate QueryParameters (sid/login_hint) and any other extraQueryParameters set by the developer
                            serverAuthenticationRequest.populateQueryParams(account, request);
                            this.logger.verbose("Query parameters populated from account");
                            urlNavigate = UrlUtils.createNavigateUrl(serverAuthenticationRequest) + Constants$2.response_mode_fragment;
                            // set state in cache
                            if (interactionType === Constants$2.interactionTypeRedirect) {
                                if (!isLoginCall) {
                                    this.cacheStorage.setItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.STATE_ACQ_TOKEN, request.state), serverAuthenticationRequest.state, this.inCookie);
                                    this.logger.verbose("State cached for redirect");
                                    this.logger.verbosePii("State cached: " + serverAuthenticationRequest.state);
                                }
                                else {
                                    this.logger.verbose("Interaction type redirect but login call is true. State not cached");
                                }
                            }
                            else if (interactionType === Constants$2.interactionTypePopup) {
                                window.renewStates.push(serverAuthenticationRequest.state);
                                window.requestType = isLoginCall ? Constants$2.login : Constants$2.renewToken;
                                this.logger.verbose("State saved to window");
                                this.logger.verbosePii("State saved: " + serverAuthenticationRequest.state);
                                // Register callback to capture results from server
                                this.registerCallback(serverAuthenticationRequest.state, requestSignature, resolve, reject);
                            }
                            else {
                                this.logger.verbose("Invalid interaction error. State not cached");
                                throw ClientAuthError$1.createInvalidInteractionTypeError();
                            }
                            if (!(interactionType === Constants$2.interactionTypePopup)) return [3 /*break*/, 9];
                            this.logger.verbose("Interaction type is popup. Generating popup window");
                            // Generate a popup window
                            try {
                                popUpWindow = this.openPopup(urlNavigate, "msal", Constants$2.popUpWidth, Constants$2.popUpHeight);
                                // Push popup window handle onto stack for tracking
                                WindowUtils.trackPopup(popUpWindow);
                            }
                            catch (e) {
                                this.logger.info(ClientAuthErrorMessage$1.popUpWindowError.code + ":" + ClientAuthErrorMessage$1.popUpWindowError.desc);
                                this.cacheStorage.setItem(ErrorCacheKeys.ERROR, ClientAuthErrorMessage$1.popUpWindowError.code);
                                this.cacheStorage.setItem(ErrorCacheKeys.ERROR_DESC, ClientAuthErrorMessage$1.popUpWindowError.desc);
                                if (reject) {
                                    reject(ClientAuthError$1.createPopupWindowError());
                                    return [2 /*return*/];
                                }
                            }
                            if (!popUpWindow) return [3 /*break*/, 8];
                            _a.label = 5;
                        case 5:
                            _a.trys.push([5, 7, , 8]);
                            return [4 /*yield*/, WindowUtils.monitorPopupForHash(popUpWindow, this.config.system.loadFrameTimeout, urlNavigate, this.logger)];
                        case 6:
                            hash = _a.sent();
                            this.handleAuthenticationResponse(hash);
                            // Request completed successfully, set to completed
                            this.cacheStorage.removeItem(TemporaryCacheKeys$1.INTERACTION_STATUS);
                            this.logger.info("Closing popup window");
                            // TODO: Check how this can be extracted for any framework specific code?
                            if (this.config.framework.isAngular) {
                                this.broadcast("msal:popUpHashChanged", hash);
                            }
                            WindowUtils.closePopups();
                            return [3 /*break*/, 8];
                        case 7:
                            error_1 = _a.sent();
                            if (reject) {
                                reject(error_1);
                            }
                            if (this.config.framework.isAngular) {
                                this.broadcast("msal:popUpClosed", error_1.errorCode + Constants$2.resourceDelimiter + error_1.errorMessage);
                            }
                            else {
                                // Request failed, set to canceled
                                this.cacheStorage.removeItem(TemporaryCacheKeys$1.INTERACTION_STATUS);
                                popUpWindow.close();
                            }
                            return [3 /*break*/, 8];
                        case 8: return [3 /*break*/, 10];
                        case 9:
                            // If onRedirectNavigate is implemented, invoke it and provide urlNavigate
                            if (request.onRedirectNavigate) {
                                this.logger.verbose("Invoking onRedirectNavigate callback");
                                navigate = request.onRedirectNavigate(urlNavigate);
                                // Returning false from onRedirectNavigate will stop navigation
                                if (navigate !== false) {
                                    this.logger.verbose("onRedirectNavigate did not return false, navigating");
                                    this.navigateWindow(urlNavigate);
                                }
                                else {
                                    this.logger.verbose("onRedirectNavigate returned false, stopping navigation");
                                }
                            }
                            else {
                                // Otherwise, perform navigation
                                this.logger.verbose("Navigating window to urlNavigate");
                                this.navigateWindow(urlNavigate);
                            }
                            _a.label = 10;
                        case 10: return [3 /*break*/, 12];
                        case 11:
                            err_1 = _a.sent();
                            this.logger.error(err_1);
                            this.cacheStorage.resetTempCacheItems(request.state);
                            this.authErrorHandler(interactionType, ClientAuthError$1.createEndpointResolutionError(err_1.toString), buildResponseStateOnly(request.state), reject);
                            if (popUpWindow) {
                                popUpWindow.close();
                            }
                            return [3 /*break*/, 12];
                        case 12: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * API interfacing idToken request when applications already have a session/hint acquired by authorization client applications
         * @param request
         */
        UserAgentApplication.prototype.ssoSilent = function (request) {
            this.logger.verbose("ssoSilent has been called");
            // throw an error on an empty request
            if (!request) {
                throw ClientConfigurationError$1.createEmptyRequestError();
            }
            // throw an error on no hints passed
            if (!request.sid && !request.loginHint) {
                throw ClientConfigurationError$1.createSsoSilentError();
            }
            return this.acquireTokenSilent(__assign$2({}, request, { scopes: Constants$2.oidcScopes }));
        };
        /**
         * Use this function to obtain a token before every call to the API / resource provider
         *
         * MSAL return's a cached token when available
         * Or it send's a request to the STS to obtain a new token using a hidden iframe.
         *
         * @param {@link AuthenticationParameters}
         *
         * To renew idToken, please pass clientId as the only scope in the Authentication Parameters
         * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
         *
         */
        UserAgentApplication.prototype.acquireTokenSilent = function (userRequest) {
            var _this = this;
            this.logger.verbose("AcquireTokenSilent has been called");
            // validate the request
            var request = RequestUtils.validateRequest(userRequest, false, this.clientId, Constants$2.interactionTypeSilent);
            var apiEvent = this.telemetryManager.createAndStartApiEvent(request.correlationId, API_EVENT_IDENTIFIER.AcquireTokenSilent);
            var requestSignature = RequestUtils.createRequestSignature(request);
            return new Promise(function (resolve, reject) { return __awaiter$2(_this, void 0, void 0, function () {
                var scope, account, adalIdToken, responseType, serverAuthenticationRequest, adalIdTokenObject, userContainedClaims, authErr, cacheResultResponse, logMessage, err_2;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // block the request if made from the hidden iframe
                            WindowUtils.blockReloadInHiddenIframes();
                            scope = request.scopes.join(" ").toLowerCase();
                            this.logger.verbosePii("Serialized scopes: " + scope);
                            if (request.account) {
                                account = request.account;
                                this.logger.verbose("Account set from request");
                            }
                            else {
                                account = this.getAccount();
                                this.logger.verbose("Account set from MSAL Cache");
                            }
                            adalIdToken = this.cacheStorage.getItem(Constants$2.adalIdToken);
                            // In the event of no account being passed in the config, no session id, and no pre-existing adalIdToken, user will need to log in
                            if (!account && !(request.sid || request.loginHint) && StringUtils$1.isEmpty(adalIdToken)) {
                                this.logger.info("User login is required");
                                // The promise rejects with a UserLoginRequiredError, which should be caught and user should be prompted to log in interactively
                                return [2 /*return*/, reject(ClientAuthError$1.createUserLoginRequiredError())];
                            }
                            responseType = this.getTokenType(account, request.scopes);
                            this.logger.verbose("Response type: " + responseType);
                            serverAuthenticationRequest = new ServerRequestParameters(AuthorityFactory$1.CreateInstance(request.authority, this.config.auth.validateAuthority, request.authorityMetadata), this.clientId, responseType, this.getRedirectUri(request.redirectUri), request.scopes, request.state, request.correlationId);
                            this.logger.verbose("Finished building server authentication request");
                            // populate QueryParameters (sid/login_hint) and any other extraQueryParameters set by the developer
                            if (ServerRequestParameters.isSSOParam(request) || account) {
                                serverAuthenticationRequest.populateQueryParams(account, request, null, true);
                                this.logger.verbose("Query parameters populated from existing SSO or account");
                            }
                            // if user didn't pass login_hint/sid and adal's idtoken is present, extract the login_hint from the adalIdToken
                            else if (!account && !StringUtils$1.isEmpty(adalIdToken)) {
                                adalIdTokenObject = TokenUtils.extractIdToken(adalIdToken);
                                this.logger.verbose("ADAL's idToken exists. Extracting login information from ADAL's idToken to populate query parameters");
                                serverAuthenticationRequest.populateQueryParams(account, null, adalIdTokenObject, true);
                            }
                            else {
                                this.logger.verbose("No additional query parameters added");
                            }
                            userContainedClaims = request.claimsRequest || serverAuthenticationRequest.claimsValue;
                            // If request.forceRefresh is set to true, force a request for a new token instead of getting it from the cache
                            if (!userContainedClaims && !request.forceRefresh) {
                                try {
                                    cacheResultResponse = this.getCachedToken(serverAuthenticationRequest, account);
                                }
                                catch (e) {
                                    authErr = e;
                                }
                            }
                            if (!cacheResultResponse) return [3 /*break*/, 1];
                            this.logger.verbose("Token found in cache lookup");
                            this.logger.verbosePii("Scopes found: " + JSON.stringify(cacheResultResponse.scopes));
                            resolve(cacheResultResponse);
                            return [2 /*return*/, null];
                        case 1:
                            if (!authErr) return [3 /*break*/, 2];
                            this.logger.infoPii(authErr.errorCode + ":" + authErr.errorMessage);
                            reject(authErr);
                            return [2 /*return*/, null];
                        case 2:
                            logMessage = void 0;
                            if (userContainedClaims) {
                                logMessage = "Skipped cache lookup since claims were given";
                            }
                            else if (request.forceRefresh) {
                                logMessage = "Skipped cache lookup since request.forceRefresh option was set to true";
                            }
                            else {
                                logMessage = "No valid token found in cache lookup";
                            }
                            this.logger.verbose(logMessage);
                            // Cache result can return null if cache is empty. In that case, set authority to default value if no authority is passed to the API.
                            if (!serverAuthenticationRequest.authorityInstance) {
                                serverAuthenticationRequest.authorityInstance = request.authority ?
                                    AuthorityFactory$1.CreateInstance(request.authority, this.config.auth.validateAuthority, request.authorityMetadata)
                                    : this.authorityInstance;
                            }
                            this.logger.verbosePii("Authority instance: " + serverAuthenticationRequest.authority);
                            _a.label = 3;
                        case 3:
                            _a.trys.push([3, 7, , 8]);
                            if (!!serverAuthenticationRequest.authorityInstance.hasCachedMetadata()) return [3 /*break*/, 5];
                            this.logger.verbose("No cached metadata for authority");
                            return [4 /*yield*/, AuthorityFactory$1.saveMetadataFromNetwork(serverAuthenticationRequest.authorityInstance, this.telemetryManager, request.correlationId)];
                        case 4:
                            _a.sent();
                            this.logger.verbose("Authority has been updated with endpoint discovery response");
                            return [3 /*break*/, 6];
                        case 5:
                            this.logger.verbose("Cached metadata found for authority");
                            _a.label = 6;
                        case 6:
                            /*
                             * refresh attempt with iframe
                             * Already renewing for this scope, callback when we get the token.
                             */
                            if (window.activeRenewals[requestSignature]) {
                                this.logger.verbose("Renewing token in progress. Registering callback");
                                // Active renewals contains the state for each renewal.
                                this.registerCallback(window.activeRenewals[requestSignature], requestSignature, resolve, reject);
                            }
                            else {
                                if (request.scopes && ScopeSet$1.onlyContainsOidcScopes(request.scopes)) {
                                    /*
                                     * App uses idToken to send to api endpoints
                                     * Default scope is tracked as OIDC scopes to store this token
                                     */
                                    this.logger.verbose("OpenID Connect scopes only, renewing idToken");
                                    this.silentLogin = true;
                                    this.renewIdToken(requestSignature, resolve, reject, account, serverAuthenticationRequest);
                                }
                                else {
                                    // renew access token
                                    this.logger.verbose("Renewing access token");
                                    this.renewToken(requestSignature, resolve, reject, account, serverAuthenticationRequest);
                                }
                            }
                            return [3 /*break*/, 8];
                        case 7:
                            err_2 = _a.sent();
                            this.logger.error(err_2);
                            reject(ClientAuthError$1.createEndpointResolutionError(err_2.toString()));
                            return [2 /*return*/, null];
                        case 8: return [2 /*return*/];
                    }
                });
            }); })
                .then(function (res) {
                _this.logger.verbose("Successfully acquired token");
                _this.telemetryManager.stopAndFlushApiEvent(request.correlationId, apiEvent, true);
                return res;
            })
                .catch(function (error) {
                _this.cacheStorage.resetTempCacheItems(request.state);
                _this.telemetryManager.stopAndFlushApiEvent(request.correlationId, apiEvent, false, error.errorCode);
                throw error;
            });
        };
        // #endregion
        // #region Popup Window Creation
        /**
         * @hidden
         *
         * Configures popup window for login.
         *
         * @param urlNavigate
         * @param title
         * @param popUpWidth
         * @param popUpHeight
         * @ignore
         * @hidden
         */
        UserAgentApplication.prototype.openPopup = function (urlNavigate, title, popUpWidth, popUpHeight) {
            this.logger.verbose("OpenPopup has been called");
            try {
                /**
                 * adding winLeft and winTop to account for dual monitor
                 * using screenLeft and screenTop for IE8 and earlier
                 */
                var winLeft = window.screenLeft ? window.screenLeft : window.screenX;
                var winTop = window.screenTop ? window.screenTop : window.screenY;
                /**
                 * window.innerWidth displays browser window"s height and width excluding toolbars
                 * using document.documentElement.clientWidth for IE8 and earlier
                 */
                var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
                var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
                var left = ((width / 2) - (popUpWidth / 2)) + winLeft;
                var top_1 = ((height / 2) - (popUpHeight / 2)) + winTop;
                // open the window
                var popupWindow = window.open(urlNavigate, title, "width=" + popUpWidth + ", height=" + popUpHeight + ", top=" + top_1 + ", left=" + left + ", scrollbars=yes");
                if (!popupWindow) {
                    throw ClientAuthError$1.createPopupWindowError();
                }
                if (popupWindow.focus) {
                    popupWindow.focus();
                }
                return popupWindow;
            }
            catch (e) {
                this.cacheStorage.removeItem(TemporaryCacheKeys$1.INTERACTION_STATUS);
                throw ClientAuthError$1.createPopupWindowError(e.toString());
            }
        };
        // #endregion
        // #region Iframe Management
        /**
         * @hidden
         * Calling _loadFrame but with a timeout to signal failure in loadframeStatus. Callbacks are left.
         * registered when network errors occur and subsequent token requests for same resource are registered to the pending request.
         * @ignore
         */
        UserAgentApplication.prototype.loadIframeTimeout = function (urlNavigate, frameName, requestSignature) {
            return __awaiter$2(this, void 0, void 0, function () {
                var expectedState, iframe, _a, hash, error_2;
                return __generator$2(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            expectedState = window.activeRenewals[requestSignature];
                            this.logger.verbosePii("Set loading state to pending for: " + requestSignature + ":" + expectedState);
                            this.cacheStorage.setItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.RENEW_STATUS, expectedState), Constants$2.inProgress);
                            if (!this.config.system.navigateFrameWait) return [3 /*break*/, 2];
                            return [4 /*yield*/, WindowUtils.loadFrame(urlNavigate, frameName, this.config.system.navigateFrameWait, this.logger)];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            _a = WindowUtils.loadFrameSync(urlNavigate, frameName, this.logger);
                            _b.label = 3;
                        case 3:
                            iframe = _a;
                            _b.label = 4;
                        case 4:
                            _b.trys.push([4, 6, , 7]);
                            return [4 /*yield*/, WindowUtils.monitorIframeForHash(iframe.contentWindow, this.config.system.loadFrameTimeout, urlNavigate, this.logger)];
                        case 5:
                            hash = _b.sent();
                            if (hash) {
                                this.handleAuthenticationResponse(hash);
                            }
                            return [3 /*break*/, 7];
                        case 6:
                            error_2 = _b.sent();
                            if (this.cacheStorage.getItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.RENEW_STATUS, expectedState)) === Constants$2.inProgress) {
                                // fail the iframe session if it's in pending state
                                this.logger.verbose("Loading frame has timed out after: " + (this.config.system.loadFrameTimeout / 1000) + " seconds for scope/authority " + requestSignature + ":" + expectedState);
                                // Error after timeout
                                if (expectedState && window.callbackMappedToRenewStates[expectedState]) {
                                    window.callbackMappedToRenewStates[expectedState](null, error_2);
                                }
                                this.cacheStorage.removeItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.RENEW_STATUS, expectedState));
                            }
                            WindowUtils.removeHiddenIframe(iframe);
                            throw error_2;
                        case 7:
                            WindowUtils.removeHiddenIframe(iframe);
                            return [2 /*return*/];
                    }
                });
            });
        };
        // #endregion
        // #region General Helpers
        /**
         * @hidden
         * Used to redirect the browser to the STS authorization endpoint
         * @param {string} urlNavigate - URL of the authorization endpoint
         */
        UserAgentApplication.prototype.navigateWindow = function (urlNavigate, popupWindow) {
            // Navigate if valid URL
            if (urlNavigate && !StringUtils$1.isEmpty(urlNavigate)) {
                var navigateWindow = popupWindow ? popupWindow : window;
                var logMessage = popupWindow ? "Navigated Popup window to:" + urlNavigate : "Navigate to:" + urlNavigate;
                this.logger.infoPii(logMessage);
                navigateWindow.location.assign(urlNavigate);
            }
            else {
                this.logger.info("Navigate url is empty");
                throw AuthError$1.createUnexpectedError("Navigate url is empty");
            }
        };
        /**
         * @hidden
         * Used to add the developer requested callback to the array of callbacks for the specified scopes. The updated array is stored on the window object
         * @param {string} expectedState - Unique state identifier (guid).
         * @param {string} scope - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.
         * @param {Function} resolve - The resolve function of the promise object.
         * @param {Function} reject - The reject function of the promise object.
         * @ignore
         */
        UserAgentApplication.prototype.registerCallback = function (expectedState, requestSignature, resolve, reject) {
            var _this = this;
            // track active renewals
            window.activeRenewals[requestSignature] = expectedState;
            // initialize callbacks mapped array
            if (!window.promiseMappedToRenewStates[expectedState]) {
                window.promiseMappedToRenewStates[expectedState] = [];
            }
            // indexing on the current state, push the callback params to callbacks mapped
            window.promiseMappedToRenewStates[expectedState].push({ resolve: resolve, reject: reject });
            // Store the server response in the current window??
            if (!window.callbackMappedToRenewStates[expectedState]) {
                window.callbackMappedToRenewStates[expectedState] = function (response, error) {
                    // reset active renewals
                    window.activeRenewals[requestSignature] = null;
                    // for all promiseMappedtoRenewStates for a given 'state' - call the reject/resolve with error/token respectively
                    for (var i = 0; i < window.promiseMappedToRenewStates[expectedState].length; ++i) {
                        try {
                            if (error) {
                                window.promiseMappedToRenewStates[expectedState][i].reject(error);
                            }
                            else if (response) {
                                window.promiseMappedToRenewStates[expectedState][i].resolve(response);
                            }
                            else {
                                _this.cacheStorage.resetTempCacheItems(expectedState);
                                throw AuthError$1.createUnexpectedError("Error and response are both null");
                            }
                        }
                        catch (e) {
                            _this.logger.warning(e);
                        }
                    }
                    // reset
                    window.promiseMappedToRenewStates[expectedState] = null;
                    window.callbackMappedToRenewStates[expectedState] = null;
                };
            }
        };
        // #endregion
        // #region Logout
        /**
         * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
         * Default behaviour is to redirect the user to `window.location.href`.
         */
        UserAgentApplication.prototype.logout = function (correlationId) {
            this.logger.verbose("Logout has been called");
            this.logoutAsync(correlationId);
        };
        /**
         * Async version of logout(). Use to log out the current user.
         * @param correlationId Request correlationId
         */
        UserAgentApplication.prototype.logoutAsync = function (correlationId) {
            return __awaiter$2(this, void 0, void 0, function () {
                var requestCorrelationId, apiEvent, correlationIdParam, postLogoutQueryParam, urlNavigate, error_3;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            requestCorrelationId = correlationId || CryptoUtils.createNewGuid();
                            apiEvent = this.telemetryManager.createAndStartApiEvent(requestCorrelationId, API_EVENT_IDENTIFIER.Logout);
                            this.clearCache();
                            this.account = null;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 5, , 6]);
                            if (!!this.authorityInstance.hasCachedMetadata()) return [3 /*break*/, 3];
                            this.logger.verbose("No cached metadata for authority");
                            return [4 /*yield*/, AuthorityFactory$1.saveMetadataFromNetwork(this.authorityInstance, this.telemetryManager, correlationId)];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            this.logger.verbose("Cached metadata found for authority");
                            _a.label = 4;
                        case 4:
                            correlationIdParam = "client-request-id=" + requestCorrelationId;
                            postLogoutQueryParam = void 0;
                            if (this.getPostLogoutRedirectUri()) {
                                postLogoutQueryParam = "&post_logout_redirect_uri=" + encodeURIComponent(this.getPostLogoutRedirectUri());
                                this.logger.verbose("redirectUri found and set");
                            }
                            else {
                                postLogoutQueryParam = "";
                                this.logger.verbose("No redirectUri set for app. postLogoutQueryParam is empty");
                            }
                            urlNavigate = void 0;
                            if (this.authorityInstance.EndSessionEndpoint) {
                                urlNavigate = this.authorityInstance.EndSessionEndpoint + "?" + correlationIdParam + postLogoutQueryParam;
                                this.logger.verbose("EndSessionEndpoint found and urlNavigate set");
                                this.logger.verbosePii("urlNavigate set to: " + this.authorityInstance.EndSessionEndpoint);
                            }
                            else {
                                urlNavigate = this.authority + "oauth2/v2.0/logout?" + correlationIdParam + postLogoutQueryParam;
                                this.logger.verbose("No endpoint, urlNavigate set to default");
                            }
                            this.telemetryManager.stopAndFlushApiEvent(requestCorrelationId, apiEvent, true);
                            this.logger.verbose("Navigating window to urlNavigate");
                            this.navigateWindow(urlNavigate);
                            return [3 /*break*/, 6];
                        case 5:
                            error_3 = _a.sent();
                            this.telemetryManager.stopAndFlushApiEvent(requestCorrelationId, apiEvent, false, error_3.errorCode);
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @hidden
         * Clear all access tokens and ID tokens in the cache.
         * @ignore
         */
        UserAgentApplication.prototype.clearCache = function () {
            this.logger.verbose("Clearing cache");
            window.renewStates = [];
            var tokenCacheItems = this.cacheStorage.getAllTokens(Constants$2.clientId, Constants$2.homeAccountIdentifier);
            for (var i = 0; i < tokenCacheItems.length; i++) {
                this.cacheStorage.removeItem(JSON.stringify(tokenCacheItems[i].key));
            }
            this.cacheStorage.resetCacheItems();
            this.cacheStorage.clearMsalCookie();
            this.logger.verbose("Cache cleared");
        };
        /**
         * @hidden
         * Clear a given access token from the cache.
         *
         * @param accessToken
         */
        UserAgentApplication.prototype.clearCacheForScope = function (accessToken) {
            this.logger.verbose("Clearing access token from cache");
            var accessTokenItems = this.cacheStorage.getAllAccessTokens(Constants$2.clientId, Constants$2.homeAccountIdentifier);
            for (var i = 0; i < accessTokenItems.length; i++) {
                var token = accessTokenItems[i];
                if (token.value.accessToken === accessToken) {
                    this.cacheStorage.removeItem(JSON.stringify(token.key));
                    this.logger.verbosePii("Access token removed: " + token.key);
                }
            }
        };
        // #endregion
        // #region Response
        /**
         * @hidden
         * @ignore
         * Checks if the redirect response is received from the STS. In case of redirect, the url fragment has either id_token, access_token or error.
         * @param {string} hash - Hash passed from redirect page.
         * @returns {Boolean} - true if response contains id_token, access_token or error, false otherwise.
         */
        UserAgentApplication.prototype.isCallback = function (hash) {
            this.logger.info("isCallback will be deprecated in favor of urlContainsHash in MSAL.js v2.0.");
            this.logger.verbose("isCallback has been called");
            return UrlUtils.urlContainsHash(hash);
        };
        /**
         * @hidden
         * Used to call the constructor callback with the token/error
         * @param {string} [hash=window.location.hash] - Hash fragment of Url.
         */
        UserAgentApplication.prototype.processCallBack = function (hash, stateInfo, parentCallback) {
            this.logger.info("ProcessCallBack has been called. Processing callback from redirect response");
            // get the state info from the hash
            if (!stateInfo) {
                this.logger.verbose("StateInfo is null, getting stateInfo from hash");
                stateInfo = this.getResponseState(hash);
            }
            var response;
            var authErr;
            // Save the token info from the hash
            try {
                response = this.saveTokenFromHash(hash, stateInfo);
            }
            catch (err) {
                authErr = err;
            }
            try {
                // Clear the cookie in the hash
                this.cacheStorage.clearMsalCookie(stateInfo.state);
                var accountState = this.getAccountState(stateInfo.state);
                if (response) {
                    if ((stateInfo.requestType === Constants$2.renewToken) || response.accessToken) {
                        if (window.parent !== window) {
                            this.logger.verbose("Window is in iframe, acquiring token silently");
                        }
                        else {
                            this.logger.verbose("Acquiring token interactive in progress");
                        }
                        this.logger.verbose("Response tokenType set to " + ServerHashParamKeys.ACCESS_TOKEN);
                        response.tokenType = ServerHashParamKeys.ACCESS_TOKEN;
                    }
                    else if (stateInfo.requestType === Constants$2.login) {
                        this.logger.verbose("Response tokenType set to " + ServerHashParamKeys.ID_TOKEN);
                        response.tokenType = ServerHashParamKeys.ID_TOKEN;
                    }
                    if (!parentCallback) {
                        this.logger.verbose("Setting redirectResponse");
                        this.redirectResponse = response;
                        return;
                    }
                }
                else if (!parentCallback) {
                    this.logger.verbose("Response is null, setting redirectResponse with state");
                    this.redirectResponse = buildResponseStateOnly(accountState);
                    this.redirectError = authErr;
                    this.cacheStorage.resetTempCacheItems(stateInfo.state);
                    return;
                }
                this.logger.verbose("Calling callback provided to processCallback");
                parentCallback(response, authErr);
            }
            catch (err) {
                this.logger.error("Error occurred in token received callback function: " + err);
                throw ClientAuthError$1.createErrorInCallbackFunction(err.toString());
            }
        };
        /**
         * @hidden
         * This method must be called for processing the response received from the STS if using popups or iframes. It extracts the hash, processes the token or error
         * information and saves it in the cache. It then resolves the promises with the result.
         * @param {string} [hash=window.location.hash] - Hash fragment of Url.
         */
        UserAgentApplication.prototype.handleAuthenticationResponse = function (hash) {
            this.logger.verbose("HandleAuthenticationResponse has been called");
            // retrieve the hash
            var locationHash = hash || window.location.hash;
            // if (window.parent !== window), by using self, window.parent becomes equal to window in getResponseState method specifically
            var stateInfo = this.getResponseState(locationHash);
            this.logger.verbose("Obtained state from response");
            var tokenResponseCallback = window.callbackMappedToRenewStates[stateInfo.state];
            this.processCallBack(locationHash, stateInfo, tokenResponseCallback);
        };
        /**
         * @hidden
         * This method must be called for processing the response received from the STS when using redirect flows. It extracts the hash, processes the token or error
         * information and saves it in the cache. The result can then be accessed by user registered callbacks.
         * @param {string} [hash=window.location.hash] - Hash fragment of Url.
         */
        UserAgentApplication.prototype.handleRedirectAuthenticationResponse = function (hash) {
            this.logger.info("Returned from redirect url");
            this.logger.verbose("HandleRedirectAuthenticationResponse has been called");
            // clear hash from window
            WindowUtils.clearUrlFragment();
            this.logger.verbose("Window.location.hash cleared");
            // if (window.parent !== window), by using self, window.parent becomes equal to window in getResponseState method specifically
            var stateInfo = this.getResponseState(hash);
            // if set to navigate to loginRequest page post login
            if (this.config.auth.navigateToLoginRequestUrl && window.parent === window) {
                this.logger.verbose("Window.parent is equal to window, not in popup or iframe. Navigation to login request url after login turned on");
                var loginRequestUrl = this.cacheStorage.getItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.LOGIN_REQUEST, stateInfo.state), this.inCookie);
                // Redirect to home page if login request url is null (real null or the string null)
                if (!loginRequestUrl || loginRequestUrl === "null") {
                    this.logger.error("Unable to get valid login request url from cache, redirecting to home page");
                    window.location.assign("/");
                    return;
                }
                else {
                    this.logger.verbose("Valid login request url obtained from cache");
                    var currentUrl = UrlUtils.removeHashFromUrl(window.location.href);
                    var finalRedirectUrl = UrlUtils.removeHashFromUrl(loginRequestUrl);
                    if (currentUrl !== finalRedirectUrl) {
                        this.logger.verbose("Current url is not login request url, navigating");
                        this.logger.verbosePii("CurrentUrl: " + currentUrl + ", finalRedirectUrl: " + finalRedirectUrl);
                        window.location.assign("" + finalRedirectUrl + hash);
                        return;
                    }
                    else {
                        this.logger.verbose("Current url matches login request url");
                        var loginRequestUrlComponents = UrlUtils.GetUrlComponents(loginRequestUrl);
                        if (loginRequestUrlComponents.Hash) {
                            this.logger.verbose("Login request url contains hash, resetting non-msal hash");
                            window.location.hash = loginRequestUrlComponents.Hash;
                        }
                    }
                }
            }
            else if (!this.config.auth.navigateToLoginRequestUrl) {
                this.logger.verbose("Default navigation to start page after login turned off");
            }
            this.processCallBack(hash, stateInfo, null);
        };
        /**
         * @hidden
         * Creates a stateInfo object from the URL fragment and returns it.
         * @param {string} hash  -  Hash passed from redirect page
         * @returns {TokenResponse} an object created from the redirect response from AAD comprising of the keys - parameters, requestType, stateMatch, stateResponse and valid.
         * @ignore
         */
        UserAgentApplication.prototype.getResponseState = function (hash) {
            this.logger.verbose("GetResponseState has been called");
            var parameters = UrlUtils.deserializeHash(hash);
            var stateResponse;
            if (!parameters) {
                throw AuthError$1.createUnexpectedError("Hash was not parsed correctly.");
            }
            if (parameters.hasOwnProperty(ServerHashParamKeys.STATE)) {
                this.logger.verbose("Hash contains state. Creating stateInfo object");
                var parsedState = RequestUtils.parseLibraryState(parameters.state);
                stateResponse = {
                    requestType: Constants$2.unknown,
                    state: parameters.state,
                    timestamp: parsedState.ts,
                    method: parsedState.method,
                    stateMatch: false
                };
            }
            else {
                throw AuthError$1.createUnexpectedError("Hash does not contain state.");
            }
            /*
             * async calls can fire iframe and login request at the same time if developer does not use the API as expected
             * incoming callback needs to be looked up to find the request type
             */
            // loginRedirect
            if (stateResponse.state === this.cacheStorage.getItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.STATE_LOGIN, stateResponse.state), this.inCookie) || stateResponse.state === this.silentAuthenticationState) {
                this.logger.verbose("State matches cached state, setting requestType to login");
                stateResponse.requestType = Constants$2.login;
                stateResponse.stateMatch = true;
                return stateResponse;
            }
            // acquireTokenRedirect
            else if (stateResponse.state === this.cacheStorage.getItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.STATE_ACQ_TOKEN, stateResponse.state), this.inCookie)) {
                this.logger.verbose("State matches cached state, setting requestType to renewToken");
                stateResponse.requestType = Constants$2.renewToken;
                stateResponse.stateMatch = true;
                return stateResponse;
            }
            // external api requests may have many renewtoken requests for different resource
            if (!stateResponse.stateMatch) {
                this.logger.verbose("State does not match cached state, setting requestType to type from window");
                stateResponse.requestType = window.requestType;
                var statesInParentContext = window.renewStates;
                for (var i = 0; i < statesInParentContext.length; i++) {
                    if (statesInParentContext[i] === stateResponse.state) {
                        this.logger.verbose("Matching state found for request");
                        stateResponse.stateMatch = true;
                        break;
                    }
                }
                if (!stateResponse.stateMatch) {
                    this.logger.verbose("Matching state not found for request");
                }
            }
            return stateResponse;
        };
        // #endregion
        // #region Token Processing (Extract to TokenProcessing.ts)
        /**
         * @hidden
         * Used to get token for the specified set of scopes from the cache
         * @param {@link ServerRequestParameters} - Request sent to the STS to obtain an id_token/access_token
         * @param {Account} account - Account for which the scopes were requested
         */
        UserAgentApplication.prototype.getCachedToken = function (serverAuthenticationRequest, account) {
            this.logger.verbose("GetCachedToken has been called");
            var scopes = serverAuthenticationRequest.scopes;
            /**
             * Id Token should be returned in every acquireTokenSilent call. The only exception is a response_type = token
             * request when a valid ID Token is not present in the cache.
             */
            var idToken = this.getCachedIdToken(serverAuthenticationRequest, account);
            var authResponse = this.getCachedAccessToken(serverAuthenticationRequest, account, scopes);
            var accountState = this.getAccountState(serverAuthenticationRequest.state);
            return ResponseUtils.buildAuthResponse(idToken, authResponse, serverAuthenticationRequest, account, scopes, accountState);
        };
        /**
         * @hidden
         *
         * Uses passed in authority to further filter an array of tokenCacheItems until only the token being searched for remains, then returns that tokenCacheItem.
         * This method will throw if authority filtering still yields multiple matching tokens and will return null if not tokens match the authority passed in.
         *
         * @param authority
         * @param tokenCacheItems
         * @param request
         * @param requestScopes
         * @param tokenType
         */
        UserAgentApplication.prototype.getTokenCacheItemByAuthority = function (authority, tokenCacheItems, requestScopes, tokenType) {
            var _this = this;
            var filteredAuthorityItems;
            if (UrlUtils.isCommonAuthority(authority) || UrlUtils.isOrganizationsAuthority(authority)) {
                filteredAuthorityItems = AuthCacheUtils.filterTokenCacheItemsByDomain(tokenCacheItems, UrlUtils.GetUrlComponents(authority).HostNameAndPort);
            }
            else {
                filteredAuthorityItems = AuthCacheUtils.filterTokenCacheItemsByAuthority(tokenCacheItems, authority);
            }
            if (filteredAuthorityItems.length === 1) {
                return filteredAuthorityItems[0];
            }
            else if (filteredAuthorityItems.length > 1) {
                this.logger.warning("Multiple matching tokens found. Cleaning cache and requesting a new token.");
                filteredAuthorityItems.forEach(function (accessTokenCacheItem) {
                    _this.cacheStorage.removeItem(JSON.stringify(accessTokenCacheItem.key));
                });
                return null;
            }
            else {
                this.logger.verbose("No matching tokens of type " + tokenType + " found");
                return null;
            }
        };
        /**
         *
         * @hidden
         *
         * Searches the token cache for an ID Token that matches the request parameter and returns it as an IdToken object.
         *
         * @param serverAuthenticationRequest
         * @param account
         */
        UserAgentApplication.prototype.getCachedIdToken = function (serverAuthenticationRequest, account) {
            this.logger.verbose("Getting all cached tokens of type ID Token");
            var idTokenCacheItems = this.cacheStorage.getAllIdTokens(this.clientId, account ? account.homeAccountIdentifier : null);
            var matchAuthority = serverAuthenticationRequest.authority || this.authority;
            var idTokenCacheItem = this.getTokenCacheItemByAuthority(matchAuthority, idTokenCacheItems, null, ServerHashParamKeys.ID_TOKEN);
            if (idTokenCacheItem) {
                this.logger.verbose("Evaluating ID token found");
                var idTokenIsStillValid = this.evaluateTokenExpiration(idTokenCacheItem);
                if (idTokenIsStillValid) {
                    this.logger.verbose("ID token expiration is within offset, using ID token found in cache");
                    var idTokenValue = idTokenCacheItem.value;
                    if (idTokenValue) {
                        this.logger.verbose("ID Token found in cache is valid and unexpired");
                    }
                    else {
                        this.logger.verbose("ID Token found in cache is invalid");
                    }
                    return (idTokenValue) ? new IdToken(idTokenValue.idToken) : null;
                }
                else {
                    this.logger.verbose("Cached ID token is expired, removing from cache");
                    this.cacheStorage.removeItem(JSON.stringify(idTokenCacheItem.key));
                    return null;
                }
            }
            else {
                this.logger.verbose("No tokens found");
                return null;
            }
        };
        /**
         *
         * @hidden
         *
         * Searches the token cache for an access token that matches the request parameters and returns it as an AuthResponse.
         *
         * @param serverAuthenticationRequest
         * @param account
         * @param scopes
         */
        UserAgentApplication.prototype.getCachedAccessToken = function (serverAuthenticationRequest, account, scopes) {
            this.logger.verbose("Getting all cached tokens of type Access Token");
            var tokenCacheItems = this.cacheStorage.getAllAccessTokens(this.clientId, account ? account.homeAccountIdentifier : null);
            var scopeFilteredTokenCacheItems = AuthCacheUtils.filterTokenCacheItemsByScope(tokenCacheItems, scopes);
            var matchAuthority = serverAuthenticationRequest.authority || this.authority;
            // serverAuthenticationRequest.authority can only be common or organizations if not null
            var accessTokenCacheItem = this.getTokenCacheItemByAuthority(matchAuthority, scopeFilteredTokenCacheItems, scopes, ServerHashParamKeys.ACCESS_TOKEN);
            if (!accessTokenCacheItem) {
                this.logger.verbose("No matching token found when filtering by scope and authority");
                var authorityList = this.getUniqueAuthority(tokenCacheItems, "authority");
                if (authorityList.length > 1) {
                    throw ClientAuthError$1.createMultipleAuthoritiesInCacheError(scopes.toString());
                }
                this.logger.verbose("Single authority used, setting authorityInstance");
                serverAuthenticationRequest.authorityInstance = AuthorityFactory$1.CreateInstance(authorityList[0], this.config.auth.validateAuthority);
                return null;
            }
            else {
                serverAuthenticationRequest.authorityInstance = AuthorityFactory$1.CreateInstance(accessTokenCacheItem.key.authority, this.config.auth.validateAuthority);
                this.logger.verbose("Evaluating access token found");
                var tokenIsStillValid = this.evaluateTokenExpiration(accessTokenCacheItem);
                // The response value will stay null if token retrieved from the cache is expired, otherwise it will be populated with said token's data
                if (tokenIsStillValid) {
                    this.logger.verbose("Access token expiration is within offset, using access token found in cache");
                    if (!account) {
                        account = this.getAccount();
                        if (!account) {
                            throw AuthError$1.createUnexpectedError("Account should not be null here.");
                        }
                    }
                    var aState = this.getAccountState(serverAuthenticationRequest.state);
                    var response = {
                        uniqueId: "",
                        tenantId: "",
                        tokenType: ServerHashParamKeys.ACCESS_TOKEN,
                        idToken: null,
                        idTokenClaims: null,
                        accessToken: accessTokenCacheItem.value.accessToken,
                        scopes: accessTokenCacheItem.key.scopes.split(" "),
                        expiresOn: new Date(Number(accessTokenCacheItem.value.expiresIn) * 1000),
                        account: account,
                        accountState: aState,
                        fromCache: true
                    };
                    return response;
                }
                else {
                    this.logger.verbose("Access token expired, removing from cache");
                    this.cacheStorage.removeItem(JSON.stringify(accessTokenCacheItem.key));
                    return null;
                }
            }
        };
        /**
         * Returns true if the token passed in is within the acceptable expiration time offset, false if it is expired.
         * @param tokenCacheItem
         * @param serverAuthenticationRequest
         */
        UserAgentApplication.prototype.evaluateTokenExpiration = function (tokenCacheItem) {
            var expiration = Number(tokenCacheItem.value.expiresIn);
            return TokenUtils.validateExpirationIsWithinOffset(expiration, this.config.system.tokenRenewalOffsetSeconds);
        };
        /**
         * @hidden
         * Used to get a unique list of authorities from the cache
         * @param {Array<AccessTokenCacheItem>}  accessTokenCacheItems - accessTokenCacheItems saved in the cache
         * @ignore
         */
        UserAgentApplication.prototype.getUniqueAuthority = function (accessTokenCacheItems, property) {
            this.logger.verbose("GetUniqueAuthority has been called");
            var authorityList = [];
            var flags = [];
            accessTokenCacheItems.forEach(function (element) {
                if (element.key.hasOwnProperty(property) && (flags.indexOf(element.key[property]) === -1)) {
                    flags.push(element.key[property]);
                    authorityList.push(element.key[property]);
                }
            });
            return authorityList;
        };
        /**
         * @hidden
         * Check if ADAL id_token exists and return if exists.
         *
         */
        UserAgentApplication.prototype.extractADALIdToken = function () {
            this.logger.verbose("ExtractADALIdToken has been called");
            var adalIdToken = this.cacheStorage.getItem(Constants$2.adalIdToken);
            return (!StringUtils$1.isEmpty(adalIdToken)) ? TokenUtils.extractIdToken(adalIdToken) : null;
        };
        /**
         * @hidden
         * Acquires access token using a hidden iframe.
         * @ignore
         */
        UserAgentApplication.prototype.renewToken = function (requestSignature, resolve, reject, account, serverAuthenticationRequest) {
            this.logger.verbose("RenewToken has been called");
            this.logger.verbosePii("RenewToken scope and authority: " + requestSignature);
            var frameName = WindowUtils.generateFrameName(FramePrefix.TOKEN_FRAME, requestSignature);
            WindowUtils.addHiddenIFrame(frameName, this.logger);
            this.updateCacheEntries(serverAuthenticationRequest, account, false);
            this.logger.verbosePii("RenewToken expected state: " + serverAuthenticationRequest.state);
            // Build urlNavigate with "prompt=none" and navigate to URL in hidden iFrame
            var urlNavigate = UrlUtils.urlRemoveQueryStringParameter(UrlUtils.createNavigateUrl(serverAuthenticationRequest), Constants$2.prompt) + Constants$2.prompt_none + Constants$2.response_mode_fragment;
            window.renewStates.push(serverAuthenticationRequest.state);
            window.requestType = Constants$2.renewToken;
            this.logger.verbose("Set window.renewState and requestType");
            this.registerCallback(serverAuthenticationRequest.state, requestSignature, resolve, reject);
            this.logger.infoPii("Navigate to: " + urlNavigate);
            this.loadIframeTimeout(urlNavigate, frameName, requestSignature).catch(function (error) { return reject(error); });
        };
        /**
         * @hidden
         * Renews idtoken for app's own backend when clientId is passed as a single scope in the scopes array.
         * @ignore
         */
        UserAgentApplication.prototype.renewIdToken = function (requestSignature, resolve, reject, account, serverAuthenticationRequest) {
            this.logger.info("RenewIdToken has been called");
            var frameName = WindowUtils.generateFrameName(FramePrefix.ID_TOKEN_FRAME, requestSignature);
            WindowUtils.addHiddenIFrame(frameName, this.logger);
            this.updateCacheEntries(serverAuthenticationRequest, account, false);
            this.logger.verbose("RenewIdToken expected state: " + serverAuthenticationRequest.state);
            // Build urlNavigate with "prompt=none" and navigate to URL in hidden iFrame
            var urlNavigate = UrlUtils.urlRemoveQueryStringParameter(UrlUtils.createNavigateUrl(serverAuthenticationRequest), Constants$2.prompt) + Constants$2.prompt_none + Constants$2.response_mode_fragment;
            if (this.silentLogin) {
                this.logger.verbose("Silent login is true, set silentAuthenticationState");
                window.requestType = Constants$2.login;
                this.silentAuthenticationState = serverAuthenticationRequest.state;
            }
            else {
                this.logger.verbose("Not silent login, set window.renewState and requestType");
                window.requestType = Constants$2.renewToken;
                window.renewStates.push(serverAuthenticationRequest.state);
            }
            // note: scope here is clientId
            this.registerCallback(serverAuthenticationRequest.state, requestSignature, resolve, reject);
            this.logger.infoPii("Navigate to:\" " + urlNavigate);
            this.loadIframeTimeout(urlNavigate, frameName, requestSignature).catch(function (error) { return reject(error); });
        };
        /**
         * @hidden
         *
         * This method builds an Access Token Cache item and saves it to the cache, returning the original
         * AuthResponse augmented with a parsed expiresOn attribute.
         *
         * @param response The AuthResponse object that contains the token to be saved
         * @param authority The authority under which the ID token will be cached
         * @param scopes The scopes to be added to the cache item key (undefined for ID token cache items)
         * @param clientInfo Client Info object that is used to generate the homeAccountIdentifier
         * @param expiration Token expiration timestamp
         */
        UserAgentApplication.prototype.saveToken = function (response, authority, scopes, clientInfo, expiration) {
            var accessTokenKey = new AccessTokenKey(authority, this.clientId, scopes, clientInfo.uid, clientInfo.utid);
            var accessTokenValue = new AccessTokenValue(response.accessToken, response.idToken.rawIdToken, expiration.toString(), clientInfo.encodeClientInfo());
            this.cacheStorage.setItem(JSON.stringify(accessTokenKey), JSON.stringify(accessTokenValue));
            if (expiration) {
                this.logger.verbose("New expiration set for token");
                response.expiresOn = new Date(expiration * 1000);
            }
            else {
                this.logger.error("Could not parse expiresIn parameter for access token");
            }
            return response;
        };
        /**
         * @hidden
         *
         * This method sets up the elements of an ID Token cache item and calls saveToken to save it in
         * Access Token Cache item format for the client application to use.
         *
         * @param response The AuthResponse object that will be used to build the cache item
         * @param authority The authority under which the ID token will be cached
         * @param parameters The response's Hash Params, which contain the ID token returned from the server
         * @param clientInfo Client Info object that is used to generate the homeAccountIdentifier
         * @param idTokenObj ID Token object from which the ID token's expiration is extracted
         */
        /* tslint:disable:no-string-literal */
        UserAgentApplication.prototype.saveIdToken = function (response, authority, parameters, clientInfo, idTokenObj) {
            this.logger.verbose("SaveIdToken has been called");
            var idTokenResponse = __assign$2({}, response);
            // Scopes are undefined so they don't show up in ID token cache key
            var scopes;
            idTokenResponse.scopes = Constants$2.oidcScopes;
            idTokenResponse.accessToken = parameters[ServerHashParamKeys.ID_TOKEN];
            var expiration = Number(idTokenObj.expiration);
            // Set ID Token item in cache
            this.logger.verbose("Saving ID token to cache");
            return this.saveToken(idTokenResponse, authority, scopes, clientInfo, expiration);
        };
        /**
         * @hidden
         *
         * This method sets up the elements of an Access Token cache item and calls saveToken to save it to the cache
         *
         * @param response The AuthResponse object that will be used to build the cache item
         * @param authority The authority under which the access token will be cached
         * @param parameters The response's Hash Params, which contain the access token returned from the server
         * @param clientInfo Client Info object that is used to generate the homeAccountIdentifier
         */
        /* tslint:disable:no-string-literal */
        UserAgentApplication.prototype.saveAccessToken = function (response, authority, parameters, clientInfo) {
            this.logger.verbose("SaveAccessToken has been called");
            var accessTokenResponse = __assign$2({}, response);
            // read the scopes
            var scope = parameters[ServerHashParamKeys.SCOPE];
            var consentedScopes = scope.split(" ");
            // retrieve all access tokens from the cache, remove the dup scopes
            var accessTokenCacheItems = this.cacheStorage.getAllAccessTokens(this.clientId, authority);
            this.logger.verbose("Retrieving all access tokens from cache and removing duplicates");
            for (var i = 0; i < accessTokenCacheItems.length; i++) {
                var accessTokenCacheItem = accessTokenCacheItems[i];
                if (accessTokenCacheItem.key.homeAccountIdentifier === response.account.homeAccountIdentifier) {
                    var cachedScopes = accessTokenCacheItem.key.scopes.split(" ");
                    if (ScopeSet$1.isIntersectingScopes(cachedScopes, consentedScopes)) {
                        this.cacheStorage.removeItem(JSON.stringify(accessTokenCacheItem.key));
                    }
                }
            }
            accessTokenResponse.accessToken = parameters[ServerHashParamKeys.ACCESS_TOKEN];
            accessTokenResponse.scopes = consentedScopes;
            var expiresIn = TimeUtils$1.parseExpiresIn(parameters[ServerHashParamKeys.EXPIRES_IN]);
            var parsedState = RequestUtils.parseLibraryState(parameters[ServerHashParamKeys.STATE]);
            var expiration = parsedState.ts + expiresIn;
            this.logger.verbose("Saving access token to cache");
            return this.saveToken(accessTokenResponse, authority, scope, clientInfo, expiration);
        };
        /**
         * @hidden
         * Saves token or error received in the response from AAD in the cache. In case of id_token, it also creates the account object.
         * @ignore
         */
        UserAgentApplication.prototype.saveTokenFromHash = function (hash, stateInfo) {
            this.logger.verbose("SaveTokenFromHash has been called");
            this.logger.info("State status: " + stateInfo.stateMatch + "; Request type: " + stateInfo.requestType);
            var response = {
                uniqueId: "",
                tenantId: "",
                tokenType: "",
                idToken: null,
                idTokenClaims: null,
                accessToken: null,
                scopes: [],
                expiresOn: null,
                account: null,
                accountState: "",
                fromCache: false
            };
            var error;
            var hashParams = UrlUtils.deserializeHash(hash);
            var authorityKey = "";
            var acquireTokenAccountKey = "";
            var idTokenObj = null;
            // If server returns an error
            if (hashParams.hasOwnProperty(ServerHashParamKeys.ERROR_DESCRIPTION) || hashParams.hasOwnProperty(ServerHashParamKeys.ERROR)) {
                this.logger.verbose("Server returned an error");
                this.logger.infoPii("Error : " + hashParams[ServerHashParamKeys.ERROR] + "; Error description: " + hashParams[ServerHashParamKeys.ERROR_DESCRIPTION]);
                this.cacheStorage.setItem(ErrorCacheKeys.ERROR, hashParams[ServerHashParamKeys.ERROR]);
                this.cacheStorage.setItem(ErrorCacheKeys.ERROR_DESC, hashParams[ServerHashParamKeys.ERROR_DESCRIPTION]);
                // login
                if (stateInfo.requestType === Constants$2.login) {
                    this.logger.verbose("RequestType is login, caching login error, generating authorityKey");
                    this.cacheStorage.setItem(ErrorCacheKeys.LOGIN_ERROR, hashParams[ServerHashParamKeys.ERROR_DESCRIPTION] + ":" + hashParams[ServerHashParamKeys.ERROR]);
                    authorityKey = AuthCache.generateAuthorityKey(stateInfo.state);
                }
                // acquireToken
                if (stateInfo.requestType === Constants$2.renewToken) {
                    this.logger.verbose("RequestType is renewToken, generating acquireTokenAccountKey");
                    authorityKey = AuthCache.generateAuthorityKey(stateInfo.state);
                    var account = this.getAccount();
                    var accountId = void 0;
                    if (account && !StringUtils$1.isEmpty(account.homeAccountIdentifier)) {
                        accountId = account.homeAccountIdentifier;
                        this.logger.verbose("AccountId is set");
                    }
                    else {
                        accountId = Constants$2.no_account;
                        this.logger.verbose("AccountId is set as no_account");
                    }
                    acquireTokenAccountKey = AuthCache.generateAcquireTokenAccountKey(accountId, stateInfo.state);
                }
                var _a = ServerHashParamKeys.ERROR, hashErr = hashParams[_a], _b = ServerHashParamKeys.ERROR_DESCRIPTION, hashErrDesc = hashParams[_b];
                if (InteractionRequiredAuthError$1.isInteractionRequiredError(hashErr) ||
                    InteractionRequiredAuthError$1.isInteractionRequiredError(hashErrDesc)) {
                    error = new InteractionRequiredAuthError$1(hashParams[ServerHashParamKeys.ERROR], hashParams[ServerHashParamKeys.ERROR_DESCRIPTION]);
                }
                else {
                    error = new ServerError$1(hashParams[ServerHashParamKeys.ERROR], hashParams[ServerHashParamKeys.ERROR_DESCRIPTION]);
                }
            }
            // If the server returns "Success"
            else {
                this.logger.verbose("Server returns success");
                // Verify the state from redirect and record tokens to storage if exists
                if (stateInfo.stateMatch) {
                    this.logger.info("State is right");
                    if (hashParams.hasOwnProperty(ServerHashParamKeys.SESSION_STATE)) {
                        this.logger.verbose("Fragment has session state, caching");
                        this.cacheStorage.setItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.SESSION_STATE, stateInfo.state), hashParams[ServerHashParamKeys.SESSION_STATE]);
                    }
                    response.accountState = this.getAccountState(stateInfo.state);
                    var clientInfo = void 0;
                    // Process access_token
                    if (hashParams.hasOwnProperty(ServerHashParamKeys.ACCESS_TOKEN)) {
                        this.logger.info("Fragment has access token");
                        response.accessToken = hashParams[ServerHashParamKeys.ACCESS_TOKEN];
                        if (hashParams.hasOwnProperty(ServerHashParamKeys.SCOPE)) {
                            response.scopes = hashParams[ServerHashParamKeys.SCOPE].split(" ");
                        }
                        // retrieve the id_token from response if present
                        if (hashParams.hasOwnProperty(ServerHashParamKeys.ID_TOKEN)) {
                            this.logger.verbose("Fragment has id_token");
                            idTokenObj = new IdToken(hashParams[ServerHashParamKeys.ID_TOKEN]);
                        }
                        else {
                            this.logger.verbose("No idToken on fragment, getting idToken from cache");
                            idTokenObj = new IdToken(this.cacheStorage.getItem(PersistentCacheKeys$1.IDTOKEN));
                        }
                        response = ResponseUtils.setResponseIdToken(response, idTokenObj);
                        // set authority
                        var authority = this.populateAuthority(stateInfo.state, this.inCookie, this.cacheStorage, idTokenObj);
                        this.logger.verbose("Got authority from cache");
                        // retrieve client_info - if it is not found, generate the uid and utid from idToken
                        if (hashParams.hasOwnProperty(ServerHashParamKeys.CLIENT_INFO)) {
                            this.logger.verbose("Fragment has clientInfo");
                            clientInfo = new ClientInfo$1(hashParams[ServerHashParamKeys.CLIENT_INFO], authority);
                        }
                        else if (this.authorityInstance.AuthorityType === AuthorityType$1.Adfs) {
                            clientInfo = ClientInfo$1.createClientInfoFromIdToken(idTokenObj, authority);
                        }
                        else {
                            this.logger.warning("ClientInfo not received in the response from AAD");
                        }
                        response.account = Account.createAccount(idTokenObj, clientInfo);
                        this.logger.verbose("Account object created from response");
                        var accountKey = void 0;
                        if (response.account && !StringUtils$1.isEmpty(response.account.homeAccountIdentifier)) {
                            this.logger.verbose("AccountKey set");
                            accountKey = response.account.homeAccountIdentifier;
                        }
                        else {
                            this.logger.verbose("AccountKey set as no_account");
                            accountKey = Constants$2.no_account;
                        }
                        acquireTokenAccountKey = AuthCache.generateAcquireTokenAccountKey(accountKey, stateInfo.state);
                        var acquireTokenAccountKey_noaccount = AuthCache.generateAcquireTokenAccountKey(Constants$2.no_account, stateInfo.state);
                        this.logger.verbose("AcquireTokenAccountKey generated");
                        var cachedAccount = this.cacheStorage.getItem(acquireTokenAccountKey);
                        var acquireTokenAccount = void 0;
                        // Check with the account in the Cache
                        if (!StringUtils$1.isEmpty(cachedAccount)) {
                            acquireTokenAccount = JSON.parse(cachedAccount);
                            this.logger.verbose("AcquireToken request account retrieved from cache");
                            if (response.account && acquireTokenAccount && Account.compareAccounts(response.account, acquireTokenAccount)) {
                                response = this.saveAccessToken(response, authority, hashParams, clientInfo);
                                this.logger.info("The user object received in the response is the same as the one passed in the acquireToken request");
                            }
                            else {
                                this.logger.warning("The account object created from the response is not the same as the one passed in the acquireToken request");
                            }
                        }
                        else if (!StringUtils$1.isEmpty(this.cacheStorage.getItem(acquireTokenAccountKey_noaccount))) {
                            this.logger.verbose("No acquireToken account retrieved from cache");
                            response = this.saveAccessToken(response, authority, hashParams, clientInfo);
                        }
                    }
                    // Process id_token
                    if (hashParams.hasOwnProperty(ServerHashParamKeys.ID_TOKEN)) {
                        this.logger.info("Fragment has idToken");
                        // set the idToken
                        idTokenObj = new IdToken(hashParams[ServerHashParamKeys.ID_TOKEN]);
                        // set authority
                        var authority = this.populateAuthority(stateInfo.state, this.inCookie, this.cacheStorage, idTokenObj);
                        response = ResponseUtils.setResponseIdToken(response, idTokenObj);
                        if (hashParams.hasOwnProperty(ServerHashParamKeys.CLIENT_INFO)) {
                            this.logger.verbose("Fragment has clientInfo");
                            clientInfo = new ClientInfo$1(hashParams[ServerHashParamKeys.CLIENT_INFO], authority);
                        }
                        else if (this.authorityInstance.AuthorityType === AuthorityType$1.Adfs) {
                            clientInfo = ClientInfo$1.createClientInfoFromIdToken(idTokenObj, authority);
                        }
                        else {
                            this.logger.warning("ClientInfo not received in the response from AAD");
                        }
                        this.account = Account.createAccount(idTokenObj, clientInfo);
                        response.account = this.account;
                        this.logger.verbose("Account object created from response");
                        if (idTokenObj && idTokenObj.nonce) {
                            this.logger.verbose("IdToken has nonce");
                            // check nonce integrity if idToken has nonce - throw an error if not matched
                            var cachedNonce = this.cacheStorage.getItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.NONCE_IDTOKEN, stateInfo.state), this.inCookie);
                            if (idTokenObj.nonce !== cachedNonce) {
                                this.account = null;
                                this.cacheStorage.setItem(ErrorCacheKeys.LOGIN_ERROR, "Nonce Mismatch. Expected Nonce: " + cachedNonce + "," + "Actual Nonce: " + idTokenObj.nonce);
                                this.logger.error("Nonce Mismatch. Expected Nonce: " + cachedNonce + ", Actual Nonce: " + idTokenObj.nonce);
                                error = ClientAuthError$1.createNonceMismatchError(cachedNonce, idTokenObj.nonce);
                            }
                            // Save the token
                            else {
                                this.logger.verbose("Nonce matches, saving idToken to cache");
                                this.cacheStorage.setItem(PersistentCacheKeys$1.IDTOKEN, hashParams[ServerHashParamKeys.ID_TOKEN], this.inCookie);
                                this.cacheStorage.setItem(PersistentCacheKeys$1.CLIENT_INFO, clientInfo.encodeClientInfo(), this.inCookie);
                                // Save idToken as access token item for app itself
                                this.saveIdToken(response, authority, hashParams, clientInfo, idTokenObj);
                            }
                        }
                        else {
                            this.logger.verbose("No idToken or no nonce. Cache key for Authority set as state");
                            authorityKey = stateInfo.state;
                            acquireTokenAccountKey = stateInfo.state;
                            this.logger.error("Invalid id_token received in the response");
                            error = ClientAuthError$1.createInvalidIdTokenError(idTokenObj);
                            this.cacheStorage.setItem(ErrorCacheKeys.ERROR, error.errorCode);
                            this.cacheStorage.setItem(ErrorCacheKeys.ERROR_DESC, error.errorMessage);
                        }
                    }
                }
                // State mismatch - unexpected/invalid state
                else {
                    this.logger.verbose("State mismatch");
                    authorityKey = stateInfo.state;
                    acquireTokenAccountKey = stateInfo.state;
                    var expectedState = this.cacheStorage.getItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.STATE_LOGIN, stateInfo.state), this.inCookie);
                    this.logger.error("State Mismatch. Expected State: " + expectedState + ", Actual State: " + stateInfo.state);
                    error = ClientAuthError$1.createInvalidStateError(stateInfo.state, expectedState);
                    this.cacheStorage.setItem(ErrorCacheKeys.ERROR, error.errorCode);
                    this.cacheStorage.setItem(ErrorCacheKeys.ERROR_DESC, error.errorMessage);
                }
            }
            // Set status to completed
            this.cacheStorage.removeItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.RENEW_STATUS, stateInfo.state));
            this.cacheStorage.resetTempCacheItems(stateInfo.state);
            this.logger.verbose("Status set to complete, temporary cache cleared");
            // this is required if navigateToLoginRequestUrl=false
            if (this.inCookie) {
                this.logger.verbose("InCookie is true, setting authorityKey in cookie");
                this.cacheStorage.setItemCookie(authorityKey, "", -1);
                this.cacheStorage.clearMsalCookie(stateInfo.state);
            }
            if (error) {
                // Error case, set status to cancelled
                throw error;
            }
            if (!response) {
                throw AuthError$1.createUnexpectedError("Response is null");
            }
            return response;
        };
        /**
         * Set Authority when saving Token from the hash
         * @param state
         * @param inCookie
         * @param cacheStorage
         * @param idTokenObj
         * @param response
         */
        UserAgentApplication.prototype.populateAuthority = function (state, inCookie, cacheStorage, idTokenObj) {
            this.logger.verbose("PopulateAuthority has been called");
            var authorityKey = AuthCache.generateAuthorityKey(state);
            var cachedAuthority = cacheStorage.getItem(authorityKey, inCookie);
            // retrieve the authority from cache and replace with tenantID
            return StringUtils$1.isEmpty(cachedAuthority) ? cachedAuthority : UrlUtils.replaceTenantPath(cachedAuthority, idTokenObj.tenantId);
        };
        /* tslint:enable:no-string-literal */
        // #endregion
        // #region Account
        /**
         * Returns the signed in account
         * (the account object is created at the time of successful login)
         * or null when no state is found
         * @returns {@link Account} - the account object stored in MSAL
         */
        UserAgentApplication.prototype.getAccount = function () {
            // if a session already exists, get the account from the session
            if (this.account) {
                return this.account;
            }
            // frame is used to get idToken and populate the account for the given session
            var rawIdToken = this.cacheStorage.getItem(PersistentCacheKeys$1.IDTOKEN, this.inCookie);
            var rawClientInfo = this.cacheStorage.getItem(PersistentCacheKeys$1.CLIENT_INFO, this.inCookie);
            if (!StringUtils$1.isEmpty(rawIdToken) && !StringUtils$1.isEmpty(rawClientInfo)) {
                var idToken = new IdToken(rawIdToken);
                var clientInfo = new ClientInfo$1(rawClientInfo, "");
                this.account = Account.createAccount(idToken, clientInfo);
                return this.account;
            }
            // if login not yet done, return null
            return null;
        };
        /**
         * @hidden
         *
         * Extracts state value from the accountState sent with the authentication request.
         * @returns {string} scope.
         * @ignore
         */
        UserAgentApplication.prototype.getAccountState = function (state) {
            if (state) {
                var splitIndex = state.indexOf(Constants$2.resourceDelimiter);
                if (splitIndex > -1 && splitIndex + 1 < state.length) {
                    return state.substring(splitIndex + 1);
                }
            }
            return state;
        };
        /**
         * Use to get a list of unique accounts in MSAL cache based on homeAccountIdentifier.
         *
         * @param {@link Array<Account>} Account - all unique accounts in MSAL cache.
         */
        UserAgentApplication.prototype.getAllAccounts = function () {
            var accounts = [];
            var accessTokenCacheItems = this.cacheStorage.getAllAccessTokens(Constants$2.clientId, Constants$2.homeAccountIdentifier);
            for (var i = 0; i < accessTokenCacheItems.length; i++) {
                var idToken = new IdToken(accessTokenCacheItems[i].value.idToken);
                var clientInfo = new ClientInfo$1(accessTokenCacheItems[i].value.homeAccountIdentifier, "");
                var account = Account.createAccount(idToken, clientInfo);
                accounts.push(account);
            }
            return this.getUniqueAccounts(accounts);
        };
        /**
         * @hidden
         *
         * Used to filter accounts based on homeAccountIdentifier
         * @param {Array<Account>}  Accounts - accounts saved in the cache
         * @ignore
         */
        UserAgentApplication.prototype.getUniqueAccounts = function (accounts) {
            if (!accounts || accounts.length <= 1) {
                return accounts;
            }
            var flags = [];
            var uniqueAccounts = [];
            for (var index = 0; index < accounts.length; ++index) {
                if (accounts[index].homeAccountIdentifier && flags.indexOf(accounts[index].homeAccountIdentifier) === -1) {
                    flags.push(accounts[index].homeAccountIdentifier);
                    uniqueAccounts.push(accounts[index]);
                }
            }
            return uniqueAccounts;
        };
        // #endregion
        // #region Angular
        /**
         * @hidden
         *
         * Broadcast messages - Used only for Angular?  *
         * @param eventName
         * @param data
         */
        UserAgentApplication.prototype.broadcast = function (eventName, data) {
            var evt = new CustomEvent(eventName, { detail: data });
            window.dispatchEvent(evt);
        };
        /**
         * @hidden
         *
         * Helper function to retrieve the cached token
         *
         * @param scopes
         * @param {@link Account} account
         * @param state
         * @return {@link AuthResponse} AuthResponse
         */
        UserAgentApplication.prototype.getCachedTokenInternal = function (scopes, account, state, correlationId) {
            // Get the current session's account object
            var accountObject = account || this.getAccount();
            if (!accountObject) {
                return null;
            }
            // Construct AuthenticationRequest based on response type; set "redirectUri" from the "request" which makes this call from Angular - for this.getRedirectUri()
            var newAuthority = this.authorityInstance ? this.authorityInstance : AuthorityFactory$1.CreateInstance(this.authority, this.config.auth.validateAuthority);
            var responseType = this.getTokenType(accountObject, scopes);
            var serverAuthenticationRequest = new ServerRequestParameters(newAuthority, this.clientId, responseType, this.getRedirectUri(), scopes, state, correlationId);
            // get cached token
            return this.getCachedToken(serverAuthenticationRequest, account);
        };
        /**
         * @hidden
         *
         * Get scopes for the Endpoint - Used in Angular to track protected and unprotected resources without interaction from the developer app
         * Note: Please check if we need to set the "redirectUri" from the "request" which makes this call from Angular - for this.getRedirectUri()
         *
         * @param endpoint
         */
        UserAgentApplication.prototype.getScopesForEndpoint = function (endpoint) {
            // if user specified list of unprotectedResources, no need to send token to these endpoints, return null.
            if (this.config.framework.unprotectedResources.length > 0) {
                for (var i = 0; i < this.config.framework.unprotectedResources.length; i++) {
                    if (endpoint.indexOf(this.config.framework.unprotectedResources[i]) > -1) {
                        return null;
                    }
                }
            }
            // process all protected resources and send the matched one
            if (this.config.framework.protectedResourceMap.size > 0) {
                for (var _i = 0, _a = Array.from(this.config.framework.protectedResourceMap.keys()); _i < _a.length; _i++) {
                    var key = _a[_i];
                    // configEndpoint is like /api/Todo requested endpoint can be /api/Todo/1
                    if (endpoint.indexOf(key) > -1) {
                        return this.config.framework.protectedResourceMap.get(key);
                    }
                }
            }
            /*
             * default resource will be clientid if nothing specified
             * App will use idtoken for calls to itself
             * check if it's staring from http or https, needs to match with app host
             */
            if (endpoint.indexOf("http://") > -1 || endpoint.indexOf("https://") > -1) {
                if (UrlUtils.getHostFromUri(endpoint) === UrlUtils.getHostFromUri(this.getRedirectUri())) {
                    return new Array(this.clientId);
                }
            }
            else {
                /*
                 * in angular level, the url for $http interceptor call could be relative url,
                 * if it's relative call, we'll treat it as app backend call.
                 */
                return new Array(this.clientId);
            }
            // if not the app's own backend or not a domain listed in the endpoints structure
            return null;
        };
        /**
         * Return boolean flag to developer to help inform if login is in progress
         * @returns {boolean} true/false
         */
        UserAgentApplication.prototype.getLoginInProgress = function () {
            return this.cacheStorage.getItem(TemporaryCacheKeys$1.INTERACTION_STATUS) === Constants$2.inProgress;
        };
        /**
         * @hidden
         * @ignore
         *
         * @param loginInProgress
         */
        UserAgentApplication.prototype.setInteractionInProgress = function (inProgress) {
            if (inProgress) {
                this.cacheStorage.setItem(TemporaryCacheKeys$1.INTERACTION_STATUS, Constants$2.inProgress);
            }
            else {
                this.cacheStorage.removeItem(TemporaryCacheKeys$1.INTERACTION_STATUS);
            }
        };
        /**
         * @hidden
         * @ignore
         *
         * @param loginInProgress
         */
        UserAgentApplication.prototype.setloginInProgress = function (loginInProgress) {
            this.setInteractionInProgress(loginInProgress);
        };
        /**
         * @hidden
         * @ignore
         *
         * returns the status of acquireTokenInProgress
         */
        UserAgentApplication.prototype.getAcquireTokenInProgress = function () {
            return this.cacheStorage.getItem(TemporaryCacheKeys$1.INTERACTION_STATUS) === Constants$2.inProgress;
        };
        /**
         * @hidden
         * @ignore
         *
         * @param acquireTokenInProgress
         */
        UserAgentApplication.prototype.setAcquireTokenInProgress = function (acquireTokenInProgress) {
            this.setInteractionInProgress(acquireTokenInProgress);
        };
        /**
         * @hidden
         * @ignore
         *
         * returns the logger handle
         */
        UserAgentApplication.prototype.getLogger = function () {
            return this.logger;
        };
        /**
         * Sets the logger callback.
         * @param logger Logger callback
         */
        UserAgentApplication.prototype.setLogger = function (logger) {
            this.logger = logger;
        };
        // #endregion
        // #region Getters and Setters
        /**
         * Use to get the redirect uri configured in MSAL or null.
         * Evaluates redirectUri if its a function, otherwise simply returns its value.
         *
         * @returns {string} redirect URL
         */
        UserAgentApplication.prototype.getRedirectUri = function (reqRedirectUri) {
            if (reqRedirectUri) {
                return reqRedirectUri;
            }
            else if (typeof this.config.auth.redirectUri === "function") {
                return this.config.auth.redirectUri();
            }
            return this.config.auth.redirectUri;
        };
        /**
         * Use to get the post logout redirect uri configured in MSAL or null.
         * Evaluates postLogoutredirectUri if its a function, otherwise simply returns its value.
         *
         * @returns {string} post logout redirect URL
         */
        UserAgentApplication.prototype.getPostLogoutRedirectUri = function () {
            if (typeof this.config.auth.postLogoutRedirectUri === "function") {
                return this.config.auth.postLogoutRedirectUri();
            }
            return this.config.auth.postLogoutRedirectUri;
        };
        /**
         * Use to get the current {@link Configuration} object in MSAL
         *
         * @returns {@link Configuration}
         */
        UserAgentApplication.prototype.getCurrentConfiguration = function () {
            if (!this.config) {
                throw ClientConfigurationError$1.createNoSetConfigurationError();
            }
            return this.config;
        };
        /**
         * @ignore
         *
         * Utils function to create the Authentication
         * @param {@link account} account object
         * @param scopes
         *
         * @returns {string} token type: token, id_token or id_token token
         *
         */
        UserAgentApplication.prototype.getTokenType = function (accountObject, scopes) {
            var accountsMatch = Account.compareAccounts(accountObject, this.getAccount());
            return ServerRequestParameters.determineResponseType(accountsMatch, scopes);
        };
        /**
         * @hidden
         * @ignore
         *
         * Sets the cachekeys for and stores the account information in cache
         * @param account
         * @param state
         * @hidden
         */
        UserAgentApplication.prototype.setAccountCache = function (account, state) {
            // Cache acquireTokenAccountKey
            var accountId = account ? this.getAccountId(account) : Constants$2.no_account;
            var acquireTokenAccountKey = AuthCache.generateAcquireTokenAccountKey(accountId, state);
            this.cacheStorage.setItem(acquireTokenAccountKey, JSON.stringify(account));
        };
        /**
         * @hidden
         * @ignore
         *
         * Sets the cacheKey for and stores the authority information in cache
         * @param state
         * @param authority
         * @hidden
         */
        UserAgentApplication.prototype.setAuthorityCache = function (state, authority) {
            // Cache authorityKey
            var authorityKey = AuthCache.generateAuthorityKey(state);
            this.cacheStorage.setItem(authorityKey, UrlUtils.CanonicalizeUri(authority), this.inCookie);
        };
        /**
         * Updates account, authority, and nonce in cache
         * @param serverAuthenticationRequest
         * @param account
         * @hidden
         * @ignore
         */
        UserAgentApplication.prototype.updateCacheEntries = function (serverAuthenticationRequest, account, isLoginCall, loginStartPage) {
            // Cache Request Originator Page
            if (loginStartPage) {
                this.cacheStorage.setItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.LOGIN_REQUEST, serverAuthenticationRequest.state), loginStartPage, this.inCookie);
            }
            // Cache account and authority
            if (isLoginCall) {
                // Cache the state
                this.cacheStorage.setItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.STATE_LOGIN, serverAuthenticationRequest.state), serverAuthenticationRequest.state, this.inCookie);
            }
            else {
                this.setAccountCache(account, serverAuthenticationRequest.state);
            }
            // Cache authorityKey
            this.setAuthorityCache(serverAuthenticationRequest.state, serverAuthenticationRequest.authority);
            // Cache nonce
            this.cacheStorage.setItem(AuthCache.generateTemporaryCacheKey(TemporaryCacheKeys$1.NONCE_IDTOKEN, serverAuthenticationRequest.state), serverAuthenticationRequest.nonce, this.inCookie);
        };
        /**
         * Returns the unique identifier for the logged in account
         * @param account
         * @hidden
         * @ignore
         */
        UserAgentApplication.prototype.getAccountId = function (account) {
            // return `${account.accountIdentifier}` + Constants.resourceDelimiter + `${account.homeAccountIdentifier}`;
            var accountId;
            if (!StringUtils$1.isEmpty(account.homeAccountIdentifier)) {
                accountId = account.homeAccountIdentifier;
            }
            else {
                accountId = Constants$2.no_account;
            }
            return accountId;
        };
        /**
         * @ignore
         * @param extraQueryParameters
         *
         * Construct 'tokenRequest' from the available data in adalIdToken
         */
        UserAgentApplication.prototype.buildIDTokenRequest = function (request) {
            var tokenRequest = {
                scopes: Constants$2.oidcScopes,
                authority: this.authority,
                account: this.getAccount(),
                extraQueryParameters: request.extraQueryParameters,
                correlationId: request.correlationId
            };
            return tokenRequest;
        };
        /**
         * @ignore
         * @param config
         * @param clientId
         *
         * Construct TelemetryManager from Configuration
         */
        UserAgentApplication.prototype.getTelemetryManagerFromConfig = function (config, clientId) {
            if (!config) { // if unset
                return TelemetryManager.getTelemetrymanagerStub(clientId, this.logger);
            }
            // if set then validate
            var applicationName = config.applicationName, applicationVersion = config.applicationVersion, telemetryEmitter = config.telemetryEmitter;
            if (!applicationName || !applicationVersion || !telemetryEmitter) {
                throw ClientConfigurationError$1.createTelemetryConfigError(config);
            }
            // if valid then construct
            var telemetryPlatform = {
                applicationName: applicationName,
                applicationVersion: applicationVersion
            };
            var telemetryManagerConfig = {
                platform: telemetryPlatform,
                clientId: clientId
            };
            return new TelemetryManager(telemetryManagerConfig, telemetryEmitter, this.logger);
        };
        return UserAgentApplication;
    }());

    // Copyright (c) Microsoft Corporation.
    const logger$8 = credentialLogger("MSAL Browser v1 - Implicit Grant Flow");
    /**
     * Uses MSAL directly for browser authentication,
     * which uses the [Implicit Grant Flow](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-implicit-grant-flow)
     */
    class MSALImplicit {
        /**
         * Sets up an MSAL object based on the given parameters.
         * MSAL with Implicit Grant is not compatible with the account workflow we use from the MSAL Auth Code flow.
         * In this case, any `authenticationRecord` received will be ignored.
         * @param options - Parameters necessary and otherwise used to create the MSAL object.
         */
        constructor(options) {
            this.loginStyle = options.loginStyle;
            this.correlationId = options.correlationId;
            this.tenantId = options.tenantId;
            this.config = {
                auth: {
                    clientId: options.clientId,
                    authority: `${options.authorityHost}/${options.tenantId}`,
                    knownAuthorities: options.knownAuthorities,
                    // If the users picked redirect as their login style,
                    // but they didn't provide a redirectUri,
                    // we can try to use the current page we're in as a default value.
                    redirectUri: options.redirectUri || self.location.origin,
                    postLogoutRedirectUri: options.postLogoutRedirectUri
                },
                cache: {
                    cacheLocation: "localStorage",
                    storeAuthStateInCookie: true // Set to true to improve the experience on IE11 and Edge.
                }
            };
            this.app = new UserAgentApplication(this.config);
        }
        /**
         * Formats an MSAL 1 account into an `AuthenticationRecord`.
         * @param account - The account in the shape defined by MSAL.
         */
        handleAccount(account) {
            return {
                homeAccountId: account.homeAccountIdentifier,
                environment: account.environment,
                tenantId: this.tenantId,
                localAccountId: account.accountIdentifier,
                username: account.environment
            };
        }
        /**
         * Loads the account based on the result of the authentication.
         * If no result was received, tries to load the account from the cache.
         * @param result - Result object received from MSAL.
         */
        handleResult(result) {
            if (result === null || result === void 0 ? void 0 : result.account) {
                logger$8.info(`Authentication successful.`);
                this.account = this.handleAccount(result === null || result === void 0 ? void 0 : result.account);
                return this.account;
            }
            this.getActiveAccount();
            if (this.account) {
                return this.account;
            }
            return;
        }
        /**
         * Attempts to handle a redirection request the least amount of times possible.
         */
        handleRedirect() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this.account) {
                    return this.account;
                }
                if (this.redirectPromise) {
                    return this.redirectPromise;
                }
                if (!self.location.hash) {
                    return;
                }
                this.redirectPromise = new Promise((resolve, reject) => {
                    this.app.handleRedirectCallback((result) => {
                        if (!(result === null || result === void 0 ? void 0 : result.account)) {
                            const errorMessage = `Authentication failed. No redirect result.`;
                            logger$8.info(errorMessage);
                            reject(new Error(errorMessage));
                        }
                        this.handleResult(result);
                        resolve(this.account);
                    }, reject);
                });
                return this.redirectPromise;
            });
        }
        /**
         * Uses MSAL to trigger a redirect or a popup login.
         */
        login() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this.getActiveAccount()) {
                    return this.account;
                }
                switch (this.loginStyle) {
                    case "redirect": {
                        this.handleRedirect();
                        this.app.loginRedirect();
                        return this.redirectPromise;
                    }
                    case "popup":
                        return this.handleResult(yield this.app.loginPopup());
                }
            });
        }
        /**
         * Returns the existing account, attempts to load the account from MSAL.
         */
        getActiveAccount() {
            if (this.account) {
                return this.account;
            }
            const account = this.app.getAccount();
            if (!account) {
                return;
            }
            this.account = this.handleAccount(account);
            return this.account;
        }
        /**
         * Allows users to manually authenticate and retrieve the AuthenticationRecord.
         * @param options - Optional parameters to authenticate with, like the scope.
         */
        authenticate() {
            return __awaiter(this, void 0, void 0, function* () {
                // We ensure that redirection is handled at this point.
                yield this.handleRedirect();
                // If we've been able to retrieve the account, we return it.
                if (this.account) {
                    return this.account;
                }
                // Otherwise we try to login.
                return this.login();
            });
        }
        /**
         * Attempts to retrieve an authenticated token from MSAL.
         * @param options - Properties useful to retrieve the token, like the scopes and the abortSignal.
         */
        acquireToken(options) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.authenticate();
                const scopes = options.scopes;
                if (!scopes) {
                    throw new Error(`Invalid scopes in the acquireToken function of the MSAL Auth Code flow. Received: ${scopes}`);
                }
                const silentRequest = {
                    authority: this.config.auth.authority,
                    correlationId: this.correlationId,
                    scopes: Array.isArray(scopes) ? scopes : scopes.split(",")
                };
                let authResponse;
                try {
                    logger$8.info("Attempting to acquire token silently");
                    authResponse = yield this.app.acquireTokenSilent(silentRequest);
                }
                catch (err) {
                    if (err instanceof AuthError$1) {
                        switch (err.errorCode) {
                            case "consent_required":
                            case "interaction_required":
                            case "login_required":
                                logger$8.info(`Authentication returned errorCode ${err.errorCode}`);
                                break;
                            default:
                                logger$8.info(`Failed to acquire token: ${err.message}`);
                                throw err;
                        }
                    }
                }
                if (authResponse === undefined) {
                    logger$8.info(`Silent authentication failed, falling back to interactive method ${this.loginStyle}`);
                    switch (this.loginStyle) {
                        case "redirect":
                            // This will go out of the page.
                            // Once the InteractiveBrowserCredential is initialized again,
                            // we'll load the MSAL account in the constructor.
                            this.app.acquireTokenRedirect(silentRequest);
                            return undefined;
                        case "popup":
                            authResponse = yield this.app.acquireTokenPopup(silentRequest);
                            break;
                    }
                }
                return {
                    accessToken: authResponse.accessToken,
                    expiresOn: authResponse.expiresOn
                };
            });
        }
    }

    // Copyright (c) Microsoft Corporation.
    const logger$9 = credentialLogger("InteractiveBrowserCredential");
    /**
     * Enables authentication to Azure Active Directory inside of the web browser
     * using the interactive login flow, either via browser redirects or a popup
     * window.
     */
    class InteractiveBrowserCredential {
        /**
         * Creates an instance of the InteractiveBrowserCredential with the
         * details needed to authenticate against Azure Active Directory with
         * a user identity.
         *
         * @param options - Options for configuring the client which makes the authentication request.
         */
        constructor(options) {
            this.tenantId = options.tenantId || DefaultTenantId;
            if (!(options === null || options === void 0 ? void 0 : options.clientId)) {
                const error = new Error("The parameter `clientId` cannot be left undefined for the `InteractiveBrowserCredential`");
                logger$9.info(formatError("", error));
                throw error;
            }
            this.clientId = options.clientId;
            options = Object.assign(Object.assign(Object.assign({}, IdentityClient.getDefaultOptions()), options), { tenantId: this.tenantId, clientId: this.clientId });
            this.loginStyle = options.loginStyle || "popup";
            const loginStyles = ["redirect", "popup"];
            if (loginStyles.indexOf(this.loginStyle) === -1) {
                const error = new Error(`Invalid loginStyle: ${options.loginStyle}. Should be any of the following: ${loginStyles.join(", ")}.`);
                logger$9.info(formatError("", error));
                throw error;
            }
            const { clientId, tenantId, authorityHost, correlationId, redirectUri, postLogoutRedirectUri, authenticationRecord } = options;
            const msalOptions = {
                clientId,
                tenantId,
                authorityHost,
                correlationId,
                authenticationRecord,
                loginStyle: this.loginStyle,
                knownAuthorities: tenantId === "adfs" ? (authorityHost ? [authorityHost] : []) : [],
                redirectUri: typeof redirectUri === "function" ? redirectUri() : redirectUri,
                postLogoutRedirectUri: typeof postLogoutRedirectUri === "function"
                    ? postLogoutRedirectUri()
                    : postLogoutRedirectUri
            };
            if (options.flow === "implicit-grant") {
                this.msal = new MSALImplicit(msalOptions);
            }
            else {
                this.msal = new MSALAuthCode(msalOptions);
            }
        }
        /**
         * Authenticates with Azure Active Directory and returns an access token if
         * successful.  If authentication cannot be performed at this time, this method may
         * return null.  If an error occurs during authentication, an {@link AuthenticationError}
         * containing failure details will be thrown.
         *
         * @param scopes - The list of scopes for which the token will have access.
         * @param options - The options used to configure any requests this
         *                  TokenCredential implementation might make.
         */
        getToken(scopes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const { span } = createSpan("InteractiveBrowserCredential-getToken", options);
                try {
                    const authResponse = yield this.msal.acquireToken(Object.assign({ scopes }, options));
                    if (!authResponse) {
                        logger$9.getToken.info("No response");
                        return null;
                    }
                    if (!authResponse.expiresOn) {
                        logger$9.getToken.info(`Response had no "expiresOn" property.`);
                        return null;
                    }
                    if (!authResponse.accessToken) {
                        logger$9.getToken.info(`Response had no "accessToken" property.`);
                        return null;
                    }
                    if (authResponse) {
                        const expiresOnTimestamp = authResponse.expiresOn.getTime();
                        logger$9.getToken.info(formatSuccess(scopes));
                        return {
                            token: authResponse.accessToken,
                            expiresOnTimestamp
                        };
                    }
                    else {
                        logger$9.getToken.info("No response");
                        return null;
                    }
                }
                catch (err) {
                    span.setStatus({
                        code: src_1.UNKNOWN,
                        message: err.message
                    });
                    logger$9.getToken.info(formatError(scopes, err));
                    throw err;
                }
                finally {
                    span.end();
                }
            });
        }
    }

    // Copyright (c) Microsoft Corporation.
    const BrowserNotSupportedError$3 = new Error("VisualStudioCodeCredential is not supported in the browser.");
    const logger$a = credentialLogger("VisualStudioCodeCredential");
    class VisualStudioCodeCredential {
        constructor() {
            logger$a.info(formatError("", BrowserNotSupportedError$3));
            throw BrowserNotSupportedError$3;
        }
        getToken() {
            logger$a.getToken.info(formatError("", BrowserNotSupportedError$3));
            throw BrowserNotSupportedError$3;
        }
    }

    // Copyright (c) Microsoft Corporation.
    const BrowserNotSupportedError$4 = new Error("AzureCliCredential is not supported in the browser.");
    const logger$b = credentialLogger("AzureCliCredential");
    class AzureCliCredential {
        constructor() {
            logger$b.info(formatError("", BrowserNotSupportedError$4));
            throw BrowserNotSupportedError$4;
        }
        getToken() {
            logger$b.getToken.info(formatError("", BrowserNotSupportedError$4));
            throw BrowserNotSupportedError$4;
        }
    }

    // Copyright (c) Microsoft Corporation.
    const BrowserNotSupportedError$5 = new Error("ManagedIdentityCredential is not supported in the browser.");
    const logger$c = credentialLogger("ManagedIdentityCredential");
    class ManagedIdentityCredential {
        constructor() {
            logger$c.info(formatError("", BrowserNotSupportedError$5));
            throw BrowserNotSupportedError$5;
        }
        getToken() {
            return __awaiter(this, void 0, void 0, function* () {
                logger$c.getToken.info(formatError("", BrowserNotSupportedError$5));
                throw BrowserNotSupportedError$5;
            });
        }
    }

    // Copyright (c) Microsoft Corporation.
    const BrowserNotSupportedError$6 = new Error("DeviceCodeCredential is not supported in the browser.");
    const logger$d = credentialLogger("DeviceCodeCredential");
    class DeviceCodeCredential {
        constructor() {
            logger$d.info(formatError("", BrowserNotSupportedError$6));
            throw BrowserNotSupportedError$6;
        }
        getToken() {
            logger$d.getToken.info(formatError("", BrowserNotSupportedError$6));
            throw BrowserNotSupportedError$6;
        }
    }

    // Copyright (c) Microsoft Corporation.
    function checkTenantId(logger, tenantId) {
        if (!tenantId.match(/^[0-9a-zA-Z-.:/]+$/)) {
            const error = new Error("Invalid tenant id provided. You can locate your tenant id by following the instructions listed here: https://docs.microsoft.com/partner-center/find-ids-and-domain-names.");
            logger.info(formatError("", error));
            throw error;
        }
    }

    // Copyright (c) Microsoft Corporation.
    const logger$e = credentialLogger("UsernamePasswordCredential");
    /**
     * Enables authentication to Azure Active Directory with a user's
     * username and password. This credential requires a high degree of
     * trust so you should only use it when other, more secure credential
     * types can't be used.
     */
    class UsernamePasswordCredential {
        /**
         * Creates an instance of the UsernamePasswordCredential with the details
         * needed to authenticate against Azure Active Directory with a username
         * and password.
         *
         * @param tenantIdOrName - The Azure Active Directory tenant (directory) ID or name.
         * @param clientId - The client (application) ID of an App Registration in the tenant.
         * @param username - The user account's e-mail address (user name).
         * @param password - The user account's account password
         * @param options - Options for configuring the client which makes the authentication request.
         */
        constructor(tenantIdOrName, clientId, username, password, options) {
            checkTenantId(logger$e, tenantIdOrName);
            this.identityClient = new IdentityClient(options);
            this.tenantId = tenantIdOrName;
            this.clientId = clientId;
            this.username = username;
            this.password = password;
        }
        /**
         * Authenticates with Azure Active Directory and returns an access token if
         * successful.  If authentication cannot be performed at this time, this method may
         * return null.  If an error occurs during authentication, an {@link AuthenticationError}
         * containing failure details will be thrown.
         *
         * @param scopes - The list of scopes for which the token will have access.
         * @param options - The options used to configure any requests this
         *                TokenCredential implementation might make.
         */
        getToken(scopes, options) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const { span, updatedOptions } = createSpan("UsernamePasswordCredential-getToken", options);
                try {
                    const urlSuffix = getIdentityTokenEndpointSuffix(this.tenantId);
                    const webResource = this.identityClient.createWebResource({
                        url: `${this.identityClient.authorityHost}/${this.tenantId}/${urlSuffix}`,
                        method: "POST",
                        disableJsonStringifyOnBody: true,
                        deserializationMapper: undefined,
                        body: lib.stringify({
                            response_type: "token",
                            grant_type: "password",
                            client_id: this.clientId,
                            username: this.username,
                            password: this.password,
                            scope: typeof scopes === "string" ? scopes : scopes.join(" ")
                        }),
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        abortSignal: options && options.abortSignal,
                        spanOptions: (_a = updatedOptions === null || updatedOptions === void 0 ? void 0 : updatedOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.spanOptions
                    });
                    const tokenResponse = yield this.identityClient.sendTokenRequest(webResource);
                    logger$e.getToken.info(formatSuccess(scopes));
                    return (tokenResponse && tokenResponse.accessToken) || null;
                }
                catch (err) {
                    const code = err.name === AuthenticationErrorName
                        ? src_1.UNAUTHENTICATED
                        : src_1.UNKNOWN;
                    span.setStatus({
                        code,
                        message: err.message
                    });
                    logger$e.getToken.info(formatError(scopes, err));
                    throw err;
                }
                finally {
                    span.end();
                }
            });
        }
    }

    // Copyright (c) Microsoft Corporation.
    const BrowserNotSupportedError$7 = new Error("AuthorizationCodeCredential is not supported in the browser.  InteractiveBrowserCredential is more appropriate for this use case.");
    const logger$f = credentialLogger("AuthorizationCodeCredential");
    class AuthorizationCodeCredential {
        constructor() {
            logger$f.info(formatError("", BrowserNotSupportedError$7));
            throw BrowserNotSupportedError$7;
        }
        getToken() {
            logger$f.getToken.info(formatError("", BrowserNotSupportedError$7));
            throw BrowserNotSupportedError$7;
        }
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * Returns a new instance of the {@link DefaultAzureCredential}.
     */
    function getDefaultAzureCredential() {
        return new DefaultAzureCredential();
    }

    exports.AggregateAuthenticationError = AggregateAuthenticationError;
    exports.AggregateAuthenticationErrorName = AggregateAuthenticationErrorName;
    exports.AuthenticationError = AuthenticationError;
    exports.AuthenticationErrorName = AuthenticationErrorName;
    exports.AuthorizationCodeCredential = AuthorizationCodeCredential;
    exports.AzureCliCredential = AzureCliCredential;
    exports.ChainedTokenCredential = ChainedTokenCredential;
    exports.ClientCertificateCredential = ClientCertificateCredential;
    exports.ClientSecretCredential = ClientSecretCredential;
    exports.CredentialUnavailable = CredentialUnavailable;
    exports.DefaultAzureCredential = DefaultAzureCredential;
    exports.DeviceCodeCredential = DeviceCodeCredential;
    exports.EnvironmentCredential = EnvironmentCredential;
    exports.InteractiveBrowserCredential = InteractiveBrowserCredential;
    exports.ManagedIdentityCredential = ManagedIdentityCredential;
    exports.UsernamePasswordCredential = UsernamePasswordCredential;
    exports.VisualStudioCodeCredential = VisualStudioCodeCredential;
    exports.getDefaultAzureCredential = getDefaultAzureCredential;
    exports.logger = logger;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=identity.js.map
